<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML</title>
    <url>/2021/08/26/HTML/</url>
    <content><![CDATA[<h2 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h2><h3 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1.HTML"></a>1.HTML</h3><ul>
<li><strong>HTML</strong>：Hyper Text Markup Language（超文本标记语言）</li>
<li>超文本包括：文字、图片、音频、视频、动画等。</li>
<li><strong>W3C</strong>：World Wide Web Consortium（万维网联盟）</li>
<li><strong>包括</strong><ul>
<li>结构化标准语言（XHTML 、XML）</li>
<li>表现标准语言（CSS）</li>
<li>行为标准（DOM、ECMAScript ）</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-HTML基本结构"><a href="#2-HTML基本结构" class="headerlink" title="2.HTML基本结构"></a>2.HTML基本结构</h3><ul>
<li>HTML标签都以“&lt; &gt;”开始、“&lt;/ &gt;”结束，内容放在中间。</li>
<li>&lt; body&gt;、&lt; /body&gt; 这些成对的标签，分别叫开放标签和闭合标签。单独呈现的标签（空元素），如&lt; hr/&gt;，意为用 / 来关闭空元素。</li>
<li>DOCTYPE:告诉浏览器，我们要使用什么规范。</li>
<li>head标签代表网页头部 ，body标签代表网页主体，title标签是网页标题。</li>
<li>meta:描述性标签，用来描述我们网站的一些信息。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOCTYPE:告诉浏览器，我们要使用什么规范 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- head标签代表网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--meta:描述性标签，用来描述我们网站的一些信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--meta一般用来描述SEO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;德玛西亚，万众一心&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;欢迎来到王者峡谷！&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--title网页标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--body标签代表网页主体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Hello，World！</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-基本标签"><a href="#3-基本标签" class="headerlink" title="3.基本标签"></a>3.基本标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎    两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快       跑得快<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有耳朵     一只没有尾巴<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有耳朵     一只没有尾巴<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>真奇怪      真奇怪<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎     两只老虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快        跑得快<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有耳朵    一只没有尾巴<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>真奇怪      真奇怪<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">两只老虎    两只老虎 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">跑得快       跑得快<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">一只没有耳朵     一只没有尾巴<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">真奇怪      真奇怪<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">两只老虎     两只老虎<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">跑得快        跑得快<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">一只没有耳朵    一只没有尾巴<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">真奇怪      真奇怪<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="字体样式标签"><a href="#字体样式标签" class="headerlink" title="字体样式标签"></a>字体样式标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--粗体，斜体--&gt;</span></span><br><span class="line">粗体:  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体:  <span class="tag">&lt;<span class="name">em</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注释和特殊符号"><a href="#注释和特殊符号" class="headerlink" title="注释和特殊符号"></a>注释和特殊符号</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!----&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span> </span><br><span class="line">空格</span><br><span class="line">空<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>格</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span>大于符号</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>小于符号</span><br><span class="line"><span class="symbol">&amp;copy;</span>版权符号@</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-图像标签"><a href="#4-图像标签" class="headerlink" title="4.图像标签"></a>4.图像标签</h3><ul>
<li><strong>img</strong>；<strong>src</strong>：图像地址；<strong>alt</strong>：图像的替代文字；<strong>title</strong>：图像悬停文字；<strong>width</strong> <strong>height</strong>：宽度和高度。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--img 学习</span></span><br><span class="line"><span class="comment">src：图片地址（必填）</span></span><br><span class="line"><span class="comment">    相对地址（推荐），绝对地址</span></span><br><span class="line"><span class="comment">    ../  上一级目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">alt：图片名字（必填）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;宇智波带土&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;4.链接标签.html#down&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    跳到下面网页的down</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-链接标签"><a href="#5-链接标签" class="headerlink" title="5.链接标签"></a>5.链接标签</h3><ul>
<li><strong>页面间链接</strong>：从一个连接跳到另一个链接。<ul>
<li><strong>herf</strong>：必填，表示要跳转到哪个页面；<strong>target</strong>：表示窗口在哪里打开（**_blank** 在新标签中打开，**_self** 在自己的网页打开）；</li>
</ul>
</li>
<li><strong>锚链接</strong>：锚标记，跳转到锚标记。</li>
<li><strong>功能性链接</strong>：邮件链接：mailto，QQ链接。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用name作为锚标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--a链接，页面间链接</span></span><br><span class="line"><span class="comment">herf：必填，表示要跳转到哪个页面</span></span><br><span class="line"><span class="comment">target：表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">    _blank 在新标签中打开</span></span><br><span class="line"><span class="comment">    _self 在自己的网页打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击打开页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>点击跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;宇智波带土&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个锚标记</span></span><br><span class="line"><span class="comment">2.跳转到标记</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;down&quot;</span>&gt;</span>down<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--功能性链接</span></span><br><span class="line"><span class="comment">邮件链接：mailto:</span></span><br><span class="line"><span class="comment">QQ链接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:2389419762@qq.com&quot;</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://wpa.qq.com/pa?p=2::53&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;点击联系我qq&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击联系我qq&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-行内元素和块元素"><a href="#6-行内元素和块元素" class="headerlink" title="6.行内元素和块元素"></a>6.行内元素和块元素</h3><ul>
<li><strong>块元素</strong>：无论内容多少，该元素独占一行。（p、h1-h6…）</li>
<li><strong>行内元素</strong>：内容撑开宽度，左右都是行内元素的可以排在一行。（a、strong、em…）</li>
</ul>
<hr>
<h2 id="二、列表、表格与媒体元素"><a href="#二、列表、表格与媒体元素" class="headerlink" title="二、列表、表格与媒体元素"></a>二、列表、表格与媒体元素</h2><h3 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h3><p>列表就是信息资源的一种展示形式。它可以使信息结构化和条理化，并以列表的样式显示出来，以便浏览者能更快捷地获得相应的信息。</p>
<ul>
<li><strong>有序列表</strong>：<strong>ol</strong> 实现，<strong>li</strong> 声明列表项。</li>
<li><strong>无序列表</strong>：<strong>ul</strong> 实现，<strong>li</strong>声明列表项。</li>
<li><strong>自定义列表</strong>：<strong>dl</strong> 实现，<strong>dt</strong> 声明列表项，<strong>dd</strong> 声明列表内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">应用范围：试卷，问卷···</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">应用范围：导航，侧边栏···</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">dl：标签</span></span><br><span class="line"><span class="comment">dt：列表名称</span></span><br><span class="line"><span class="comment">dd：列表内容</span></span><br><span class="line"><span class="comment">应用范围：公司网站底部···d</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>陕西<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-表格"><a href="#2-表格" class="headerlink" title="2.表格"></a>2.表格</h3><ul>
<li><strong>table</strong> 实现，<strong>border</strong> 边框大小，<strong>tr</strong> 行，<strong>td</strong> 列，<strong>colspan</strong> 跨列，<strong>rowspan</strong> 跨行。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--table 表格</span></span><br><span class="line"><span class="comment">行   tr  rows</span></span><br><span class="line"><span class="comment">列   td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--border 边框大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan 跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan 跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-媒体元素"><a href="#3-媒体元素" class="headerlink" title="3.媒体元素"></a>3.媒体元素</h3><ul>
<li><strong>视频</strong>：<strong>video</strong>，src：资源路径，<strong>controls</strong>：控制条。</li>
<li><strong>音频</strong>：<strong>audio</strong>，src：资源路径，<strong>autoplay</strong>：自动播放。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视频和音频</span></span><br><span class="line"><span class="comment">src：资源路径</span></span><br><span class="line"><span class="comment">controls：控制条</span></span><br><span class="line"><span class="comment">autoplay：自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../resources/video/天气之子.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../resources/audio/天气之子.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-页面结构分析"><a href="#4-页面结构分析" class="headerlink" title="4.页面结构分析"></a>4.页面结构分析</h3><ul>
<li><strong>header</strong> 页面头部，<strong>footer</strong> 页面脚步，<strong>section</strong> 页面中的一块独立区域，<strong>aside</strong> 相关内容或应用（多用于侧边栏），<strong>nav</strong> 导航栏。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--nav 导航栏--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-内联框架"><a href="#5-内联框架" class="headerlink" title="5.内联框架"></a>5.内联框架</h3><ul>
<li><strong>iframe</strong> 内联框架，<strong>src</strong> 引用页面地址，<strong>name</strong> 框架标识名，</li>
<li>可实现单页面内联和页面间的相互跳转。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--iframe 内联框架</span></span><br><span class="line"><span class="comment">src：地址</span></span><br><span class="line"><span class="comment">w-h：宽和高</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;blbl&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000xp&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800xp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://space.bilibili.com/404880666&quot;</span> <span class="attr">target</span>=<span class="string">&quot;blbl&quot;</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、表单"><a href="#三、表单" class="headerlink" title="三、表单"></a>三、表单</h2><h3 id="1-表单语法"><a href="#1-表单语法" class="headerlink" title="1.表单语法"></a>1.表单语法</h3><ul>
<li><strong>form</strong> ：表单，<strong>action</strong>：表单提交的位置，可以是网站，也可以是一个请求处理地址，<strong>method</strong>：post，get  提交方式。<ul>
<li><strong>get</strong>：可以在url中看到我们提交的信息，不安全，高效。</li>
<li><strong>post</strong>：比较安全，传输大文件。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单 form</span></span><br><span class="line"><span class="comment">action：表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method：post，get  提交方式</span></span><br><span class="line"><span class="comment">    get：我们可以在url中看到我们提交的信息，不安全，高效。</span></span><br><span class="line"><span class="comment">    post：比较安全，传输大文件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.我的第一个网页.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-常用表单元素"><a href="#2-常用表单元素" class="headerlink" title="2.常用表单元素"></a>2.常用表单元素</h3><ul>
<li><strong>文本框</strong>：input type=”text”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本输入框：input type=&quot;text&quot;</span></span><br><span class="line"><span class="comment">name=&quot;username&quot; 文本框名称（必填）</span></span><br><span class="line"><span class="comment">value=&quot;德玛西亚&quot;    默认初始值</span></span><br><span class="line"><span class="comment">maxlength=&quot;8&quot;   最长能写几个字符</span></span><br><span class="line"><span class="comment">size=&quot;30&quot;    文本框的长度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>密码框</strong>：input type=”password”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--密码框：input type=&quot;password&quot;</span></span><br><span class="line"><span class="comment">name=&quot;pwd&quot; （必填）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>单选按钮</strong>：input type=”radio”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单选按钮：input type=&quot;radio&quot;</span></span><br><span class="line"><span class="comment">value：单选框的值</span></span><br><span class="line"><span class="comment">name：表示组 （必填） 相同才能实现单选</span></span><br><span class="line"><span class="comment">checked：选中状态</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>复选框</strong>：input type=”checkbox”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--复选框：input type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="comment">name：（必填），一组的名称需要相同</span></span><br><span class="line"><span class="comment">value：复选框的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sleep&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;code&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>敲代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>聊天</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>按钮</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按钮</span></span><br><span class="line"><span class="comment">input type=&quot;button&quot; 普通按钮</span></span><br><span class="line"><span class="comment">input type=&quot;image&quot;  图像按钮</span></span><br><span class="line"><span class="comment">input type=&quot;submit&quot; 提交按钮</span></span><br><span class="line"><span class="comment">input type=&quot;reset&quot;  重置按钮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击变长&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btnButton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../resources/image/1.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btnSubmit&quot;</span>&gt;</span>  <span class="comment">&lt;!--提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空表单&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btnReset&quot;</span>&gt;</span>  <span class="comment">&lt;!--重置--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>下拉列表框</strong>：<ul>
<li>下拉框：select name=”列表名称”</li>
<li>列表框：option value=”china”</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">下拉框：select name=&quot;列表名称&quot;</span></span><br><span class="line"><span class="comment">列表框：option value=&quot;china&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>国家：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;列表名称&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;yindu&quot;</span>&gt;</span>印度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;us&quot;</span> <span class="attr">selected</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ruishi&quot;</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>文本域</strong>：textarea name=”textarea”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本域</span></span><br><span class="line"><span class="comment">cols：显示的列数</span></span><br><span class="line"><span class="comment">rows：显示的行数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>文件域</strong>：input type=”file”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件域：input type=&quot;file&quot;</span></span><br><span class="line"><span class="comment">name=&quot;files&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uploda&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>邮箱</strong>：input type=”email”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮箱验证</span></span><br><span class="line"><span class="comment">会自动验证Email地址格式是否正确</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>网址</strong>：input type=”url”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--URL</span></span><br><span class="line"><span class="comment">会自动验证URL地址格式是否正确</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>URL：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>数字</strong>：input type=”number”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数字</span></span><br><span class="line"><span class="comment">step：步长</span></span><br><span class="line"><span class="comment">max：最大值</span></span><br><span class="line"><span class="comment">min：最小值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>商品数量：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>滑块</strong>：input type=”range”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--滑块</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>搜索框</strong>：input type=”search”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--搜索框</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索内容&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-表单高级应用"><a href="#3-表单高级应用" class="headerlink" title="3.表单高级应用"></a>3.表单高级应用</h3><ul>
<li><strong>隐藏域</strong>：<strong>hidden</strong>，在浏览器中看不到隐藏域，但是在提交表单时可以看到隐藏域的内容被提交至服务器。</li>
<li><strong>只读</strong>：<strong>readonly</strong>，只能读，不能更改。</li>
<li><strong>禁用</strong>：<strong>disabled</strong>，禁止使用。</li>
<li><strong>增强鼠标可用性</strong>：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--增强鼠标可用性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mark&quot;</span>&gt;</span>你点我试试<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mark&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-表单初级验证"><a href="#4-表单初级验证" class="headerlink" title="4.表单初级验证"></a>4.表单初级验证</h3><ul>
<li><strong>好处</strong>：<ul>
<li>减轻服务器的压力。</li>
<li>保证数据的可行性和安全性。</li>
</ul>
</li>
<li><strong>placeholder</strong>：提示信息，提示语默认显示，当文本框中输入内容时提示语消失。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索内容&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>required</strong>：规定文本框填写内容不能为空，否则不允许用户提交表单。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>pattern</strong>：用户输入的内容必须符合正则表达式所指的规则，否则就不能提交表单。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;diyemail&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法</title>
    <url>/2021/07/10/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1.单行注释"></a>1.单行注释</h3><p>//Hello World！    </p>
<h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h3><p>/*</p>
<p>Hello World！</p>
<p>Hello World！</p>
<p>*/</p>
<h3 id="3-文本注释"><a href="#3-文本注释" class="headerlink" title="3.文本注释"></a>3.文本注释</h3><p>/**</p>
<p>*Hello World！    </p>
<p>*Hello World！    </p>
<p>**/</p>
<h2 id="二、标识符、关键词"><a href="#二、标识符、关键词" class="headerlink" title="二、标识符、关键词"></a>二、标识符、关键词</h2><h3 id="1-标识符命名规则"><a href="#1-标识符命名规则" class="headerlink" title="1.标识符命名规则"></a>1.标识符命名规则</h3><ul>
<li>所有的标识符都应该以字母、美元符号、下划线开始</li>
<li>首字符之后可以是字母、美元符号、下划线、数字的任意组合</li>
<li>不能用关键词命名</li>
<li>大小写敏感</li>
</ul>
<h3 id="2-关键词"><a href="#2-关键词" class="headerlink" title="2.关键词"></a>2.关键词</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> 	 assent  	<span class="keyword">boolean</span> 	 <span class="keyword">break</span> 	 <span class="keyword">byte</span> 	 ase 	 <span class="keyword">catch</span></span><br><span class="line"><span class="keyword">char</span> 	 <span class="class"><span class="keyword">class</span> 	 <span class="title">const</span>		<span class="title">continue</span>	  <span class="title">default</span>	<span class="title">do</span>	<span class="title">double</span></span></span><br><span class="line"><span class="class"><span class="title">else</span> 	 <span class="title">enum</span>  	<span class="keyword">extends</span> 	 <span class="title">finally</span>	  <span class="title">float</span>	  <span class="title">for</span>	  <span class="title">goto</span>  <span class="title">if</span>	 </span></span><br><span class="line"><span class="class"><span class="keyword">implements</span>		<span class="title">import</span> 	 <span class="title">istanceof</span> 	 <span class="title">int</span>  	<span class="title">interface</span> 	 <span class="title">long</span>	</span></span><br><span class="line"><span class="class"><span class="title">native</span> 	  <span class="title">new</span> 	 <span class="title">package</span> 	 <span class="title">private</span> 	 <span class="title">protected</span>	  <span class="title">public</span>  <span class="title">return</span></span></span><br><span class="line"><span class="class"><span class="title">strictfp</span>  	<span class="title">short</span> 	 <span class="title">static</span> 	 <span class="title">super</span>  	<span class="title">switch</span>  	<span class="title">synchronized</span>  </span></span><br><span class="line"><span class="class"><span class="title">this</span>  <span class="title">throw</span>  <span class="title">throws</span>  	<span class="title">transient</span> 	 <span class="title">try</span>  	<span class="title">void</span>  	<span class="title">volatile</span>  <span class="title">while</span></span></span><br></pre></td></tr></table></figure>

<h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><h3 id="1-八大基本数据类型"><a href="#1-八大基本数据类型" class="headerlink" title="1.八大基本数据类型"></a>1.八大基本数据类型</h3><ul>
<li><p>字节型byte    取值范围：0 - 255    占1个字节</p>
</li>
<li><p>短整型short    取值范围：-32,768 ~ 3276    占2个字节</p>
</li>
<li><p>整形int    取值范围：-2,147,483,648 ~ 2,147,483,647    占4个字节</p>
</li>
<li><p>长整型long    取值范围：<br>-9223372036854775808~9223372036854775807    占8个字节</p>
</li>
<li><p>单精度浮点型float占4个字节    </p>
<p>负数范围:-3.402823E38 ~ -1.401298E-45<br>正数范围:1.401298E-45 ~ 3.402823E38</p>
</li>
<li><p>双精度浮点型double    占8个字节    </p>
<p>负数范围:-1.797,693,134,862,32E308 ~-4.940,656,458,412,47E-324<br>正数范围:4.940,656,458,412,47E-324 ~1.797,693,134,862,32E308</p>
</li>
<li><p>字符型char    用单引号括起来    占2个字节</p>
</li>
<li><p>布尔型boolean    （ true  false）    占1个字节</p>
</li>
</ul>
<h3 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h3><p>类（String类）、接口、数组</p>
<p>引用数据类型的大小统一设置为4个字节，记录的是其引用对象的地址。</p>
<h3 id="3-数据类型扩展"><a href="#3-数据类型扩展" class="headerlink" title="3.数据类型扩展"></a>3.数据类型扩展</h3><ul>
<li><p>整型扩展：进制表示：二进制 0b 开头；八进制 0 开头；十进制；十六进制 0x 开头；</p>
</li>
<li><p>浮点型扩展：由于字长有限，浮点数能够表示的数是有限的、离散的，一般存在舍入误差，很多数字无法完全精确表示，结果只能接近但不等于。所以避免在比较中使用浮点。（浮点类型不适合在不容许误差的金融计算领域，若要进行精确数字计算要使用BigDecimal类）</p>
</li>
<li><p>字符型扩展：”A”是字符串，’A’是字符，</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">转义字符：</span><br><span class="line"><span class="comment">//  \t 制表符</span></span><br><span class="line"><span class="comment">//  \n 换行</span></span><br><span class="line"><span class="comment">//  \r 回车</span></span><br><span class="line"><span class="comment">//  \b 退格</span></span><br></pre></td></tr></table></figure>

<ul>
<li>布尔型扩展</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="keyword">true</span>) &#123;&#125; <span class="comment">//新手</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;&#125; <span class="comment">//老手</span></span><br><span class="line"><span class="comment">//Less is Morel！  代码要精简易读</span></span><br></pre></td></tr></table></figure>

<h2 id="四、类型转换"><a href="#四、类型转换" class="headerlink" title="四、类型转换"></a>四、类型转换</h2><p>由于Java语言是强类型语言，所以在进行有些运算的时候要进行类型转换。</p>
<h3 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a>1.自动类型转换</h3><p>容量小的可以自动转换为容量大的数据类型。</p>
<p>从小到大：byte,short,char &lt; int &lt; long &lt; float &lt; double</p>
<h3 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="2.强制类型转换"></a>2.强制类型转换</h3><p>容量大的数据类型需要 强制转换 成容量小的的数据类型。 （type）var</p>
<h3 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3.常见问题"></a>3.常见问题</h3><ul>
<li>溢出问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作比较大的数的时候，注意溢出问题</span></span><br><span class="line"><span class="comment">// JDK7新特性，数字之间可以用下划线分割</span></span><br><span class="line"><span class="keyword">int</span> money = <span class="number">10_0000_0000</span>;</span><br><span class="line"><span class="keyword">int</span> years = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> total = money * years;<span class="comment">//-1474836480,计算的时候溢出了</span></span><br><span class="line"><span class="keyword">long</span> total2 = money * years;<span class="comment">//-1474836480，默认是int，转换之前已经存在问题了</span></span><br><span class="line"><span class="keyword">long</span> total3 = money * (<span class="keyword">long</span>) years;<span class="comment">//200亿，先把一个数转换为Lang</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>L和l问题</p>
<p>由于小写L和数字1很相似，为了更方便的识别代码，不要命名名字为小写l的变量，long类型使用大写L不使用小写l</p>
</li>
</ul>
<h2 id="五、变量和常量"><a href="#五、变量和常量" class="headerlink" title="五、变量和常量"></a>五、变量和常量</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><ul>
<li><p>变量：可以变化的量</p>
</li>
<li><p>变量作用域（变量分为三种）</p>
<ul>
<li>类变量（静态变量）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类变量,，从属于类，用static修饰，如果不初始化会自动初始为默认值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">2500</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;<span class="comment">//数值型初始为0或者0.0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> b;<span class="comment">//字符型初始为16位的0</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> c;<span class="comment">//布尔值初始位false</span></span><br><span class="line">    <span class="comment">//类变量在该类的方法中可以直接进行使用System.out.println(salary);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实例变量（成员变量）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="comment">//实例变量（成员变量）;从属于对象,如果不进行初始化，这个类型的默认值 0 0.0</span></span><br><span class="line">	<span class="comment">//布尔值:默认是false</span></span><br><span class="line">	<span class="comment">//除了基本类型,其余默认的值都是null;</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//成员变量要创建对象在该类的方法中进行使用</span></span><br></pre></td></tr></table></figure>

<ul>
<li>局部变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//局部变量;方法或语句块中定义的变量，没有初始值，必须进行声明和初始化（赋初值）;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    System.out.println(i);</span><br></pre></td></tr></table></figure>

<h3 id="2-常量"><a href="#2-常量" class="headerlink" title="2.常量"></a>2.常量</h3><ul>
<li>常量：值被设定后，在程序运行过程中不能被改变。<br>final  常量名 = 值;</li>
</ul>
<h3 id="3-命名规则"><a href="#3-命名规则" class="headerlink" title="3.命名规则"></a>3.命名规则</h3><ul>
<li>类名：首字母大写和驼峰原则 Demo DemoScore</li>
<li>类成员变量、局部变量和方法名：首字母小写和驼峰原则 demo demoScore</li>
<li>常量：大写字母和下划线 DEMO_SOCRE</li>
</ul>
<h2 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h2><h3 id="1-基本运算符（二元运算符）"><a href="#1-基本运算符（二元运算符）" class="headerlink" title="1.基本运算符（二元运算符）"></a>1.基本运算符（二元运算符）</h3><ul>
<li>加减乘除（+  -  *  /）    取模（%）</li>
<li>整数运算：俩个操作数，一个为Long，结果为Long；没有Long时，结果为int；即使操作数全为byte或者short，结果也是int。</li>
<li>浮点运算：俩个操作数，一个为double，结果为double；都为float才为float。</li>
<li>取模运算：负数%负数＝负数； 负数%正数＝负数； 正数%负数＝正数；</li>
<li>关系运算符   (==    !=    &gt;    &lt;    &lt;=    &gt;=)    返回布尔值</li>
</ul>
<h3 id="2-一元运算符"><a href="#2-一元运算符" class="headerlink" title="2.一元运算符"></a>2.一元运算符</h3><ul>
<li>自增++    自减–</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//++ 自增   -- 自减    一元运算符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++; <span class="comment">//执行这段代码后，先给b赋值，再a自加</span></span><br><span class="line"><span class="comment">// a = a + 1;</span></span><br><span class="line"><span class="keyword">int</span> c = ++a;<span class="comment">//执行这段代码前，先a自加,再给c赋值</span></span><br><span class="line"><span class="comment">//a = a + 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> e = d--; <span class="comment">//执行这段代码后，先给e赋值，再d自减</span></span><br><span class="line"><span class="comment">// d = d - 1</span></span><br><span class="line"><span class="keyword">int</span> f = --d;<span class="comment">//执行这段代码前，先d自减,再给f赋值</span></span><br><span class="line"><span class="comment">// d = d - 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Math类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//幂运算 2^3   2*2*2 = 8  很多运算我们会使用一些工具类来操作.Math类</span></span><br><span class="line"><span class="keyword">double</span> pow = Math.pow(a,d);</span><br><span class="line">System.out.println(pow);</span><br></pre></td></tr></table></figure>

<h3 id="3-条件运算符（三元运算符）"><a href="#3-条件运算符（三元运算符）" class="headerlink" title="3.条件运算符（三元运算符）"></a>3.条件运算符（三元运算符）</h3><p> a ? b : c        如果a是true就是b，否则就是c</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">71</span>;</span><br><span class="line">String type = score &gt;= <span class="number">60</span> ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">System.out.println(type);<span class="comment">//及格</span></span><br><span class="line"><span class="comment">//运算符优先级	（）最优先可以在表达式里边用小括号组织</span></span><br></pre></td></tr></table></figure>

<h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h3><ul>
<li><p>与&amp;&amp; （and）        或||（or）           非（取反）</p>
</li>
<li><p>短路运算：逻辑与只要有一个为false, 则直接返回false. 逻辑或只要有一个为true, 则直接返回true;</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//短路运算</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">boolean</span> d = (c &lt; <span class="number">4</span>) &amp;&amp; (c++ &lt; <span class="number">4</span>);</span><br><span class="line">System.out.println(d);<span class="comment">//false</span></span><br><span class="line">System.out.println(c);<span class="comment">//5  由于第一个为falsh，则直接返回false，c不自加，短路运算</span></span><br></pre></td></tr></table></figure>

<h3 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h3><ul>
<li>位运算符应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型 (byte)等类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A = 0011 1100</span></span><br><span class="line"><span class="comment">        B = 0000 1101</span></span><br><span class="line"><span class="comment">        ----------------------------</span></span><br><span class="line"><span class="comment">        A&amp;B = 0000 1100     两个都为1才为1，否则就是0</span></span><br><span class="line"><span class="comment">        A|B = 0011 1101     两个都为0才为0，否则都为1</span></span><br><span class="line"><span class="comment">        A^B = 0011 0001     相同为0，不同为1</span></span><br><span class="line"><span class="comment">        ~B = 1111 0010      1和0反过来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2 * 8 = 16   2*2*2*2</span></span><br><span class="line"><span class="comment">        如何效率极高的计算?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;&lt;  *2</span></span><br><span class="line"><span class="comment">        &gt;&gt;  /2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        0000 0000       0</span></span><br><span class="line"><span class="comment">        0000 0001       1</span></span><br><span class="line"><span class="comment">        0000 0010       2</span></span><br><span class="line"><span class="comment">        0000 0011       3</span></span><br><span class="line"><span class="comment">        0000 0100       4</span></span><br><span class="line"><span class="comment">        0000 1000       8</span></span><br><span class="line"><span class="comment">        0001 0000       16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);<span class="comment">//2*2*2*2=16</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-扩展赋值运算符"><a href="#6-扩展赋值运算符" class="headerlink" title="6.扩展赋值运算符"></a>6.扩展赋值运算符</h3><ul>
<li>a += b;//a = a + b<br>a -= b;//a = a - b<br>a /= b;//a = a / b<br>a *= b;//a = a * b</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串连接符 +         String</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span> + a + b);<span class="comment">// &quot;&quot;放前边会把加号旁边的操作数转换为字符串</span></span><br><span class="line">System.out.println(a + b + <span class="string">&quot;&quot;</span>);<span class="comment">// &quot;&quot;放后边不起上述作用</span></span><br><span class="line">System.out.println(a + b +<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;&quot;</span>+ a + b);<span class="comment">//30 2010</span></span><br></pre></td></tr></table></figure>

<h2 id="七、包"><a href="#七、包" class="headerlink" title="七、包"></a>七、包</h2><ul>
<li><p>包的作用：把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用；同一个包中的类名字是不同的，不同的包中的类 的名字是可以相同的。</p>
</li>
<li><p>包的创建：一般用公司域名倒置，  <a href="http://www.baidu.com/">www.baidu.com</a>   包名  com.baidu.www</p>
</li>
<li><p>包的导入：为了可以使用某一包中的成员，需要用import导入包。通配符*可以导入包下的所有类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*</span><br></pre></td></tr></table></figure>

<h2 id="八、JavaDoc"><a href="#八、JavaDoc" class="headerlink" title="八、JavaDoc"></a>八、JavaDoc</h2><ol>
<li><p>JavaDoc是可以将注释生成HTML文档的的技术。</p>
<p>@author 作者名 </p>
<p>@version 版本号 </p>
<p>@since 指明需要最早使用的jdk版本 </p>
<p>@param 参数名 </p>
<p>@return 返回值情况 </p>
<p>@throws 异常抛出情况</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String name)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令行生成JavaDoc文档  javadoc 参数 Java文件</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>用命令行生成JavaDoc文档：javadoc    -encoding UTF-8 -charset UTF-8    java文件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -encoding UTF-8 -charset UTF-8</span></span><br><span class="line"><span class="comment">//解决GBK乱码问题，在中间添加编码设置</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2021/09/20/JavaWeb/</url>
    <content><![CDATA[<h2 id="一、HTTP协议"><a href="#一、HTTP协议" class="headerlink" title="一、HTTP协议"></a>一、HTTP协议</h2><ul>
<li>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写。HTTP 协议和 TCP/IP 协议族内的其他众多的协议相同， 用于客户端和服务器之间的通信。请求访问文本或图像等资源的一端称为客户端， 而提供资源响应的一端称为服务器端。</li>
</ul>
<h2 id="二、Tomcat服务器"><a href="#二、Tomcat服务器" class="headerlink" title="二、Tomcat服务器"></a>二、Tomcat服务器</h2><ul>
<li>Tomcat服务器的配置和下载</li>
</ul>
<h2 id="三、servlet"><a href="#三、servlet" class="headerlink" title="三、servlet"></a>三、servlet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet的三大域对象</span></span><br><span class="line"><span class="comment"> *      1.request作用域</span></span><br><span class="line"><span class="comment"> *          在一次请求中有效，在请求转发中有效</span></span><br><span class="line"><span class="comment"> *      2.session作用域</span></span><br><span class="line"><span class="comment"> *          在一次会话中有效，可以有多次请求，无论是请求跳转还是重定向都有效，Session销毁后失效</span></span><br><span class="line"><span class="comment"> *      3.servletContext作用域</span></span><br><span class="line"><span class="comment"> *          在整个应用程序中有效，服务器关闭则失效</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="一、servlet的实现"><a href="#一、servlet的实现" class="headerlink" title="一、servlet的实现"></a>一、servlet的实现</h3><ol>
<li><p>创建普通的Java类，继承HttpServlet</p>
</li>
<li><p>重写service方法（doget方法、dopost方法）</p>
<ul>
<li>HttpServletRequest    客户向服务器发送的请求</li>
<li>HttpServletResponse    服务器对客户的响应</li>
</ul>
</li>
<li><p>配置web.xml（二选一，推荐注解方式），绑定url地址（必须以/开头）</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.getWriter().write(<span class="string">&quot;&lt;h2&gt;德玛西亚&lt;/h2&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：设置响应类型：</p>
<ol>
<li>response.setContentType(“text/html;charset=utf-8”)</li>
<li>response..setCharacterEncoding(“utf-8”);</li>
</ol>
<h3 id="二、servlet生命周期"><a href="#二、servlet生命周期" class="headerlink" title="二、servlet生命周期"></a>二、servlet生命周期</h3><ol>
<li>创建servlet：第⼀次访问servlet对应的url时，tomcat会给我们创建servlet的类，new⼀个servlet对象。</li>
<li>初始化servlet：初始化（init）servlet，servlet就创建好了。</li>
<li>自动销毁：Tomcat自动重启或者关闭会自动销毁。</li>
</ol>
<p><strong>注</strong>：再次访问的url不会重新创建 、初始化,tomcat全局中有且只有⼀个servlet对象</p>
<h3 id="三、HttpServletRequest对象"><a href="#三、HttpServletRequest对象" class="headerlink" title="三、HttpServletRequest对象"></a>三、HttpServletRequest对象</h3><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取请求的方式（get post）</span></span><br><span class="line">System.out.println(request.getMethod());</span><br><span class="line"><span class="comment">//2.获取请求的完整路径（从http开始，到？结束）</span></span><br><span class="line">System.out.println(request.getRequestURL());</span><br><span class="line"><span class="comment">//3.获取请求的部分路径（从项目路径开始，到？结束）</span></span><br><span class="line">System.out.println(request.getRequestURI());</span><br><span class="line"><span class="comment">//4.获取请求的参数字符串（从？开始，到最后）</span></span><br><span class="line">System.out.println(request.getQueryString());</span><br><span class="line"><span class="comment">//5.获取请求的协议版本</span></span><br><span class="line">System.out.println(request.getProtocol());</span><br><span class="line"><span class="comment">//6.获取项目的访问路径（站点名）</span></span><br><span class="line">System.out.println(request.getContextPath());</span><br></pre></td></tr></table></figure>

<h4 id="2-获取请求的参数"><a href="#2-获取请求的参数" class="headerlink" title="2.获取请求的参数"></a>2.获取请求的参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二、获取请求的参数</span></span><br><span class="line"><span class="comment">//1.获取指定参数的参数值</span></span><br><span class="line"><span class="comment">//request.getParameter(&quot;参数名&quot;);</span></span><br><span class="line">    <span class="comment">//1.表单提交:参数名表示的是表单元素的name的属性</span></span><br><span class="line">    <span class="comment">//2.地址栏输入:参数名表示的是”？键=值&amp;键=值“中的键</span></span><br><span class="line">String uname = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;姓名:&quot;</span>+uname);</span><br><span class="line">String upsw = request.getParameter(<span class="string">&quot;userPwd&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;密码:&quot;</span>+upsw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取指定参数的所有参数值</span></span><br><span class="line"><span class="comment">//request.getParameterValues(&quot;参数名&quot;);</span></span><br><span class="line">System.out.println(request.getParameterValues(<span class="string">&quot;hobby&quot;</span>).length);</span><br></pre></td></tr></table></figure>

<h4 id="3-请求乱码问题"><a href="#3-请求乱码问题" class="headerlink" title="3.请求乱码问题"></a>3.请求乱码问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三、请求乱码问题（只针对post有效） 设置在开头</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-请求转发"><a href="#4-请求转发" class="headerlink" title="4.请求转发"></a>4.请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//四、请求转发</span></span><br><span class="line"><span class="comment">//五、请求作用域：只在请求转发中有效</span></span><br><span class="line"><span class="comment">//如果登录成功，跳转到index.jsp,如果失败，跳转到login.jsp，显示错误原因</span></span><br><span class="line"><span class="keyword">if</span> (uname.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; upsw.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    request.setAttribute (<span class="string">&quot;userName&quot;</span>,uname);<span class="comment">//请求域</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求转发</span></span><br><span class="line"><span class="comment">     *     1.服务器跳转</span></span><br><span class="line"><span class="comment">     *     2.地址栏不会发生改变</span></span><br><span class="line"><span class="comment">     *     3.只有一次请求</span></span><br><span class="line"><span class="comment">     *     4.数据可以共享</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;index.jsp&quot;</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//设置请求域:设置数据存放在作用域中，让客户端能够获取数据</span></span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;姓名或密码不正确！&quot;</span>);<span class="comment">//请求域</span></span><br><span class="line"></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-请求作用域"><a href="#5-请求作用域" class="headerlink" title="5.请求作用域"></a>5.请求作用域</h4><p>请求作用域：只在请求转发中有效</p>
<ul>
<li>${username}        uname的值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;userName&#125;,登陆成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>${msg}        “姓名或密码不正确！”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;ser04&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>&gt;</span>唱歌</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dance&quot;</span>&gt;</span>跳舞</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rap&quot;</span>&gt;</span>说唱</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span> $&#123;msg&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="四、HttpServletResponse对象"><a href="#四、HttpServletResponse对象" class="headerlink" title="四、HttpServletResponse对象"></a>四、HttpServletResponse对象</h3><h4 id="1-响应数据"><a href="#1-响应数据" class="headerlink" title="1.响应数据"></a>1.响应数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、响应数据</span></span><br><span class="line"><span class="comment"> *     1.字符输出流 getWrite()</span></span><br><span class="line"><span class="comment"> *     2.字节输出流 getOutputStream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//得到字符输入流</span></span><br><span class="line">PrintWriter writer = response.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到字节输出流</span></span><br><span class="line">ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">&quot;HI&quot;</span>.getBytes());</span><br><span class="line">outputStream.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure>

<h4 id="2-响应乱码问题"><a href="#2-响应乱码问题" class="headerlink" title="2.响应乱码问题"></a>2.响应乱码问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二、响应乱码解决</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-重定向"><a href="#3-重定向" class="headerlink" title="3.重定向"></a>3.重定向</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (uname.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; upsw.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一、重定向</span></span><br><span class="line"><span class="comment">     *     1.客户端跳转</span></span><br><span class="line"><span class="comment">     *     2.地址栏会发生改变</span></span><br><span class="line"><span class="comment">     *     3.存在俩次请求</span></span><br><span class="line"><span class="comment">     *     3.数据不可以共享</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    response.sendRedirect(<span class="string">&quot;index01.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;login01.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-重定向和请求转发的区别"><a href="#4-重定向和请求转发的区别" class="headerlink" title="4.重定向和请求转发的区别"></a>4.重定向和请求转发的区别</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求转发</span></span><br><span class="line"><span class="comment"> *     1.服务器跳转</span></span><br><span class="line"><span class="comment"> *     2.地址栏不会发生改变</span></span><br><span class="line"><span class="comment"> *     3.只有一次请求</span></span><br><span class="line"><span class="comment"> *     4.数据可以共享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、重定向</span></span><br><span class="line"><span class="comment"> *     1.客户端跳转</span></span><br><span class="line"><span class="comment"> *     2.地址栏会发生改变</span></span><br><span class="line"><span class="comment"> *     3.存在俩次请求</span></span><br><span class="line"><span class="comment"> *     3.数据不可以共享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求转发 只能跳转到当前站点下的资源，不可以跨域</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;http://www.baidu.com&quot;</span>);<span class="comment">//跳不过去</span></span><br><span class="line"><span class="comment">// 重定向可以跳转到任意资源，</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;http://www.baidu.com&quot;</span>);<span class="comment">//跳过去了</span></span><br></pre></td></tr></table></figure>

<h2 id="四、Cookie"><a href="#四、Cookie" class="headerlink" title="四、Cookie"></a>四、Cookie</h2><h3 id="一、Cookie的创建和发送"><a href="#一、Cookie的创建和发送" class="headerlink" title="一、Cookie的创建和发送"></a>一、Cookie的创建和发送</h3><p>创建cookie对象：<code>new Cookie(name,value)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到cookie对象</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"><span class="comment">//发送cookie （将cookie响应给客户端）</span></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到cookie对象</span></span><br><span class="line">Cookie cookie02 = <span class="keyword">new</span> Cookie(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//发送cookie （将cookie响应给客户端）</span></span><br><span class="line">response.addCookie(cookie02);</span><br></pre></td></tr></table></figure>

<h3 id="二、Cookie的获取"><a href="#二、Cookie的获取" class="headerlink" title="二、Cookie的获取"></a>二、Cookie的获取</h3><p>Cookie的获取：<code>request.getCookies()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cookie的获取</span></span><br><span class="line"><span class="comment"> * 获取所有的cookie request.getCookies();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有的cookie对象</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//判断后遍历</span></span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + cookie.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;value:&quot;</span> + cookie.getValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的name的cookie对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;值为&quot;</span>+cookie.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name:name</span><br><span class="line">value:admin</span><br><span class="line">值为admin</span><br><span class="line">name:pwd</span><br><span class="line">value:<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h3 id="三、Cookie到期时间设置"><a href="#三、Cookie到期时间设置" class="headerlink" title="三、Cookie到期时间设置"></a>三、Cookie到期时间设置</h3><ul>
<li><p>Cookie的失效时间</p>
<p> 通过setMaxAge设置cookie的失效时间</p>
<ol>
<li><p>正整数：表示cookie存活指定数秒</p>
</li>
<li><p>负整数：表示cookie只在浏览器中存活，浏览器关闭即失效</p>
</li>
<li><p>零：表示删除cookie</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到cookie对象</span></span><br><span class="line">Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;uname1&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">//正整数:表示cookie存活指定数秒</span></span><br><span class="line">cookie1.setMaxAge(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//发送cookie （将cookie响应给客户端）</span></span><br><span class="line">response.addCookie(cookie1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到cookie对象</span></span><br><span class="line">Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;uname2&quot;</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"><span class="comment">//负整数:表示cookie旨在浏览器中存活，浏览器关闭即失效</span></span><br><span class="line">cookie2.setMaxAge(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//发送cookie （将cookie响应给客户端）</span></span><br><span class="line">response.addCookie(cookie2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到cookie对象</span></span><br><span class="line">Cookie cookie3 = <span class="keyword">new</span> Cookie(<span class="string">&quot;uname3&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"><span class="comment">//零:表示删除cookie</span></span><br><span class="line">cookie3.setMaxAge(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//发送cookie （将cookie响应给客户端）</span></span><br><span class="line">response.addCookie(cookie3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除已有的名字为name的cookie对象</span></span><br><span class="line">Cookie cook = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">cook.setMaxAge(<span class="number">0</span>);</span><br><span class="line">response.addCookie(cook);</span><br></pre></td></tr></table></figure>

<h3 id="四、Cookie注意点"><a href="#四、Cookie注意点" class="headerlink" title="四、Cookie注意点"></a>四、Cookie注意点</h3><ul>
<li><p>Cookie的注意点</p>
<ol>
<li><p>cookie只在当前浏览器中有效，不跨越浏览器（不跨电脑）</p>
</li>
<li><p>Cookie的同名问题</p>
<p>在cookie的domain与path相同时，出现相同的name会覆盖</p>
</li>
<li><p>cookie的存储数量问题</p>
<p>不同的浏览器存放的cookie的数量有限制，同域名下cookie的数量有限</p>
</li>
<li><p>cookie存中文问题</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.通过URLEncoder.encode()来进行编码</span></span><br><span class="line"><span class="comment">//  通过URLDecoder.decode()来进行解码</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(URLEncoder.encode(<span class="string">&quot;名字&quot;</span>),<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<h3 id="五、Cookie路径"><a href="#五、Cookie路径" class="headerlink" title="五、Cookie路径"></a>五、Cookie路径</h3><ul>
<li>Cookie的路径<ol>
<li>在当前项目下的资源可以获取</li>
<li>在当前服务器下的资源可以获取 设置路径为”/“</li>
<li>在指定项目下的资源可以访问</li>
<li>在指定路径的资源可以访问</li>
</ol>
</li>
</ul>
<ul>
<li>总结：当访问的路径中包含访问的的path时就可以访问到当前cookie对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">当前项目 Path=/s02</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.在当前项目下的资源可以获取</span></span><br><span class="line">Cookie cookie01 = <span class="keyword">new</span> Cookie(<span class="string">&quot;a1&quot;</span>,<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">cookie01.setPath(<span class="string">&quot;/s02&quot;</span>);</span><br><span class="line">response.addCookie(cookie01);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.在当前服务器下的资源可以获取 设置路径为”/“</span></span><br><span class="line">Cookie cookie02 = <span class="keyword">new</span> Cookie(<span class="string">&quot;a2&quot;</span>,<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">cookie02.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">response.addCookie(cookie02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在指定项目下的资源可以访问</span></span><br><span class="line">Cookie cookie03 = <span class="keyword">new</span> Cookie(<span class="string">&quot;a3&quot;</span>,<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">cookie03.setPath(<span class="string">&quot;/s01&quot;</span>);</span><br><span class="line">response.addCookie(cookie03);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.在指定路径的资源可以访问</span></span><br><span class="line">Cookie cookie04 = <span class="keyword">new</span> Cookie(<span class="string">&quot;a4&quot;</span>,<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">cookie04.setPath(<span class="string">&quot;/s02/cook&quot;</span>);</span><br><span class="line">response.addCookie(cookie04);</span><br></pre></td></tr></table></figure>

<h2 id="五、Session"><a href="#五、Session" class="headerlink" title="五、Session"></a>五、Session</h2><h3 id="1-Session对象的获取"><a href="#1-Session对象的获取" class="headerlink" title="1.Session对象的获取"></a>1.Session对象的获取</h3><ul>
<li><pre><code> 1.Session对象的获取
</code></pre>
</li>
<li><pre><code>     如果session对象存在，则直接获取，如果session对象不存在，则新建session
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取session对象</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;sessionID：&quot;</span>+session.getId());</span><br><span class="line">System.out.println(<span class="string">&quot;绘画创建时间：&quot;</span>+session.getCreationTime());</span><br><span class="line">System.out.println(<span class="string">&quot;最后一次访问时间：&quot;</span>+session.getLastAccessedTime());</span><br><span class="line">System.out.println(<span class="string">&quot;是否是新对象：&quot;</span>+session.isNew());</span><br></pre></td></tr></table></figure>

<h3 id="2-sessionid标识符"><a href="#2-sessionid标识符" class="headerlink" title="2.sessionid标识符"></a>2.sessionid标识符</h3><ul>
<li><pre><code>     当请求达到服务器时，如果使用了session，服务器会去获取一个jsessionid的cookie对象
</code></pre>
</li>
<li><pre><code>     如果cookie对象不存在，则新建session对象，并设置sessionid，将sessionid回传给客户端中，设置对应的cookie
</code></pre>
</li>
<li><pre><code>     如果cookie对象存在，服务器会比较客户端传递进去的sessionid是否和服务端的一致
</code></pre>
</li>
<li><pre><code>         如果不一致，新建session对象，并设置sessionid，将sessionid回传给客户端中，重新设置对应的cookie
</code></pre>
</li>
<li><pre><code>         如果一致，则获取当前的session对象
</code></pre>
</li>
<li><pre><code>     session底层是依赖cookie的，默认关闭浏览器失效。
</code></pre>
</li>
</ul>
<h3 id="3-Session作用域"><a href="#3-Session作用域" class="headerlink" title="3.Session作用域"></a>3.Session作用域</h3><ul>
<li><p>在一次会话中有效，可以有多次请求和响应，在会话中数据共享。</p>
</li>
<li><p>setAttribute</p>
<p>getAttribute</p>
<p>removeAttribute</p>
</li>
<li><p>request作用域</p>
<p>一次请求中有效，在请求转发中有效，在重定向中失效</p>
</li>
<li><p>session作用域</p>
<p>一次会话中有效，无论请求转发还是重定向都有效，会话销毁则失效</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置请求作用域</span></span><br><span class="line">req.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="comment">//设置session作用域</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;session&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求跳转（一次请求）</span></span><br><span class="line"><span class="comment">//req.getRequestDispatcher(&quot;se02&quot;).forward(req,resp);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重定向</span></span><br><span class="line">resp.sendRedirect(<span class="string">&quot;se02&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取session对象</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;session02 sessionID：&quot;</span>+session.getId());<span class="comment">//获取sessionID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取作用域</span></span><br><span class="line"><span class="comment">//request作用域</span></span><br><span class="line">System.out.println(req.getAttribute(<span class="string">&quot;name&quot;</span>));<span class="comment">//重定向获取不到，请求跳转可以获取到</span></span><br><span class="line"><span class="comment">//session作用域</span></span><br><span class="line">System.out.println(session.getAttribute(<span class="string">&quot;name2&quot;</span>));<span class="comment">//都可以获取到</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Session的销毁"><a href="#4-Session的销毁" class="headerlink" title="4.Session的销毁"></a>4.Session的销毁</h3><ol>
<li><p><strong>关闭服务器</strong></p>
</li>
<li><p><strong>关闭浏览器</strong></p>
<ul>
<li>session底层依赖cookie，cookie默认值只在浏览器中存货，浏览器关闭则失效。</li>
</ul>
</li>
<li><p><strong>默认最大不活动时间</strong></p>
<ul>
<li><p>当指定时间内没有任何操作，则session对象失效，在时间未到达之前有操作，则会重新计时。</p>
</li>
<li><p>服务器中设定了session的最大不活动时间，tomcat服务器设置的是30min</p>
</li>
<li><p>在Tomcat的解压目录的conf中的web.xml配置文件中。</p>
<p><code>&lt;session-config&gt;</code></p>
<p><code>&lt;session-timeout&gt;30&lt;/session-timeout&gt;</code></p>
<p><code>&lt;/session-config&gt;</code></p>
</li>
</ul>
</li>
<li><p><strong>手动设置失效时间</strong></p>
<ul>
<li><p>通过session.setMaxInactiveInterval（int）来设定session的最大不活动时间，单位为s</p>
</li>
<li><p>通过session.getMaxInactiveInterval（）方法获取当前最大不活动时间</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//session的销毁</span></span><br><span class="line"><span class="comment">//获取最大不活动时间</span></span><br><span class="line"><span class="keyword">int</span> sec = session.getMaxInactiveInterval();</span><br><span class="line">System.out.println(<span class="string">&quot;最大不活动时间：&quot;</span>+sec);</span><br><span class="line"><span class="comment">//设置最大不活动时间</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">20</span>);<span class="comment">//20s失效</span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>手动销毁</strong><ul>
<li>session.invalidate();</li>
</ul>
</li>
</ol>
<h2 id="六、Context"><a href="#六、Context" class="headerlink" title="六、Context"></a>六、Context</h2><h3 id="一、Context对象的获取"><a href="#一、Context对象的获取" class="headerlink" title="一、Context对象的获取"></a>一、Context对象的获取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletContext对象的获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//通过request对象</span></span><br><span class="line">ServletContext servletContext = req.getServletContext();</span><br><span class="line"><span class="comment">//通过session对象获取</span></span><br><span class="line">ServletContext servletContext1 = req.getSession().getServletContext();</span><br><span class="line"><span class="comment">//通过servletConfig获取</span></span><br><span class="line">ServletContext servletContext2 = getServletConfig().getServletContext();</span><br><span class="line"><span class="comment">//直接获取</span></span><br><span class="line">ServletContext servletContext3 = getServletContext();</span><br></pre></td></tr></table></figure>

<h3 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//获取项目的真实路径</span></span><br><span class="line">String realPath = servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">System.out.println(realPath);</span><br><span class="line"><span class="comment">//获取服务器的版本信息</span></span><br><span class="line">String serverInfo = req.getServletContext().getServerInfo();</span><br><span class="line">System.out.println(serverInfo);</span><br></pre></td></tr></table></figure>

<h3 id="三、作用域"><a href="#三、作用域" class="headerlink" title="三、作用域"></a>三、作用域</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * servletContext作用域</span></span><br><span class="line"><span class="comment"> *      在整个应用程序中有效，服务器关闭失效</span></span><br><span class="line"><span class="comment"> *      setAttribute();</span></span><br><span class="line"><span class="comment"> *      getAttribute();</span></span><br><span class="line"><span class="comment"> *      removeAttribute();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="七、filter-过滤器"><a href="#七、filter-过滤器" class="headerlink" title="七、filter 过滤器"></a>七、filter 过滤器</h2><h3 id="一、开发三要素"><a href="#一、开发三要素" class="headerlink" title="一、开发三要素"></a>一、开发三要素</h3><ol>
<li>实现javax.servlet.Filter接口</li>
<li>在doFilter（）方法中编写过滤器的功能代码</li>
<li>注解配置，说明拦截URL的范围</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;过滤器生效&quot;</span>);</span><br><span class="line">    <span class="comment">//设置请求的编码格式</span></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让请求能够进入下一步，访问过滤器、servlet</span></span><br><span class="line">    chain.doFilter(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、cookie，session，context区别"><a href="#八、cookie，session，context区别" class="headerlink" title="八、cookie，session，context区别"></a>八、cookie，session，context区别</h2><h3 id="存活时间问题"><a href="#存活时间问题" class="headerlink" title="存活时间问题"></a>存活时间问题</h3><ul>
<li><strong>cookie</strong>：默认存活在电脑中，关闭浏览器就会失效。设置了x时间后，关闭浏览器，x分钟后也会失效，通过setMaxAge设置cookie的失效时间。</li>
<li><strong>session</strong>：默认存活30min，Tomcat配置中查看，通过设置时间来设置session存活时间，通过session.setMaxInactiveInterval（int）来设定session的最大不活动时间，单位为s，关闭浏览器后丢失、找不到session，存活时间一到就会消失。</li>
<li><strong>context</strong>：全局对象，服务器开启和关闭 就会开启和关闭</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常</title>
    <url>/2021/08/04/Java%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h2><p>异常指程序在运行中出现的不期而至的各种状况，如：文件找不到，网络连接失败，非法参数等。</p>
<h4 id="1-三种类型的异常"><a href="#1-三种类型的异常" class="headerlink" title="1.三种类型的异常"></a>1.三种类型的异常</h4><ul>
<li>检查性异常：用户的或错误或问题引起的异常，程序员无法预见的，这些异常编译时不能被简单的忽略。</li>
<li>运行时异常：运行时可能被程序员避免的异常，运行时异常可以在编译时被忽略。</li>
<li>错误：错误不是异常，而是脱离程序控制的问题，错误在代码中经常被忽略。</li>
</ul>
<h4 id="2-异常体系结构"><a href="#2-异常体系结构" class="headerlink" title="2.异常体系结构"></a>2.异常体系结构</h4><p>异常类（Throwable）分为俩类，</p>
<ul>
<li>异常（Exception）用户程序可能捕获的异常情况或者是程序可以处理的异常。<ul>
<li>运行时异常（RuntimeException）：数组下标越界（ArrayIndexOutOfBoundsException），算数异常（ArithemticException）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理，一般由逻辑编辑错误引起。</li>
<li>非运行时异常（运行时异常之外的异常）：（IOException），（SQLException），（用户自定义的Exception），这些异常是必须处理的异常，不处理程序就不能编译通过。</li>
</ul>
</li>
<li>错误（Error）不希望被程序捕获或者程序无法处理的异常。出现这种异常，JVM一般会终止线程。<ul>
<li>由Java虚拟机生成并抛出，大多数错误和代码编写者所执行的操作无关：Java虚拟机运行错误（Virtual MachineError），类定义错误（NoClassDefFoundError），链接错误（LinkageError），这些错误是不可查的它们在应用程序的控制和处理能力之外，绝大多数是程序运行时不允许出现的状况。</li>
</ul>
</li>
</ul>
<h4 id="3-检查异常和不受检查异常"><a href="#3-检查异常和不受检查异常" class="headerlink" title="3.检查异常和不受检查异常"></a>3.检查异常和不受检查异常</h4><ul>
<li>检查异常：除了运行时异常及其子类以外，其他的异常类及其子类（非运行时异常）编译器要求必须处理的异常（try-catch语句捕获，或者throws抛出）</li>
<li>不受检查异常：包括运行时异常及其子类和Error，编译器不要求强制处理的异常。</li>
</ul>
<h2 id="二、Java异常处理机制"><a href="#二、Java异常处理机制" class="headerlink" title="二、Java异常处理机制"></a>二、Java异常处理机制</h2><h4 id="1-抛出异常"><a href="#1-抛出异常" class="headerlink" title="1.抛出异常"></a>1.抛出异常</h4><p>遇到异常，当前方法或者作用域无法继续执行下去，进行抛出处理。</p>
<h4 id="2-捕获异常"><a href="#2-捕获异常" class="headerlink" title="2.捕获异常"></a>2.捕获异常</h4><p>方法抛出异常后，运行系统转为寻找合适的异常处理器，进行捕获处理。</p>
<h4 id="3-异常处理五个关键字"><a href="#3-异常处理五个关键字" class="headerlink" title="3.异常处理五个关键字"></a>3.异常处理五个关键字</h4><ul>
<li><p>try——监听，将要监听的代码放在try语句块中，发生异常，异常就会被抛出。</p>
</li>
<li><p>catch——捕获异常，捕获try语句块中发生的异常.</p>
</li>
<li><p>finally——处理善后工作，总会被执行，主要用于收回try语句块中打开的资源。</p>
</li>
<li><p>throw——抛出异常</p>
</li>
<li><p>throws——用在方法签名中，声明该方法可能抛出的异常</p>
</li>
</ul>
<h2 id="三、异常处理"><a href="#三、异常处理" class="headerlink" title="三、异常处理"></a>三、异常处理</h2><h4 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="1.try-catch"></a>1.try-catch</h4><p>快捷键 Ctrl+Alt+T</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设要捕获多个异常，异常类型从小到大</span></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//try 监控区域</span></span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动抛出异常 throw throws</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">//catch（想要捕获的异常类型）  捕获异常</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Error f)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable g)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Throwable&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;<span class="comment">//finally 处理善后工作   可以不要finally   一般用来 资源关闭</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-throw"><a href="#2-throw" class="headerlink" title="2.throw"></a>2.throw</h4><p>该程序两次处理相同的错误，首先， main() 方法设立了一个异常关系然后调用proc()。proc()方法设 立了另一个异常处理关系并且立即抛出一个 NullPointerException 实例， NullPointerException 在 main() 中被再次捕获。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThrow</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">proc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught inside proc&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            proc();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Recaught: &quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-throws"><a href="#3-throws" class="headerlink" title="3.throws"></a>3.throws</h4><p>如果一个方法可以导致一个异常但不处理它，它必须指定这种行为以使方法的调用者可以保护它们自己 而不发生异常。要做到这点，我们可以在方法声明中包含一个 throws 子句。</p>
<h4 id="4-finally"><a href="#4-finally" class="headerlink" title="4.finally"></a>4.finally</h4><p>处理善后工作，主要用于收回try语句块中打开的资源，无论有没有异常被抛出都会被执行。</p>
<h4 id="5-执行顺序"><a href="#5-执行顺序" class="headerlink" title="5.执行顺序"></a>5.执行顺序</h4><ol>
<li>执行try,catch,给返回值赋值</li>
<li>执行finally</li>
<li>return</li>
</ol>
<h2 id="四、自定义异常"><a href="#四、自定义异常" class="headerlink" title="四、自定义异常"></a>四、自定义异常</h2><ul>
<li>用户自己定义的异常类，需要继承Exception类。</li>
<li>步骤<ol>
<li>创建自定义异常类。</li>
<li>在方法中通过throw关键字抛出异常对象。</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用 try-catch 语句捕获并处理；否则在方法的 声明处通过 throws 关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传递数字&gt;10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//打印异常信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + detail + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可能存异常的方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException </span>&#123;<span class="comment">//3.throws指明要抛出给方法调用者的异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span> (a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);<span class="comment">//2.throw抛出异常对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.通过try-catch捕获处理异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Myexception--&gt;&quot;</span> + e );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">传递的参数为<span class="number">11</span></span><br><span class="line">Myexception--&gt;MyException&#123;<span class="number">11</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数组</title>
    <url>/2021/07/23/Java%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="一、数组概述"><a href="#一、数组概述" class="headerlink" title="一、数组概述"></a>一、数组概述</h2><h4 id="1-数组的定义"><a href="#1-数组的定义" class="headerlink" title="1.数组的定义"></a>1.数组的定义</h4><ul>
<li>数组是相同类型数据的有序集合。</li>
<li>数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。</li>
<li>每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们。</li>
</ul>
<h4 id="2-数组的基本特点"><a href="#2-数组的基本特点" class="headerlink" title="2.数组的基本特点"></a>2.数组的基本特点</h4><ul>
<li>长度确定，数组一旦被创建，其大小不可以改变。</li>
<li>元素必须是相同类型，不能是混合类型。</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量，数组本身就是对象，Java中对象实在堆中的，因此数组无论保存原始类型还是其他对象类型，数对象本身是在堆中的。</li>
</ul>
<h2 id="二、数组的声明和创建"><a href="#二、数组的声明和创建" class="headerlink" title="二、数组的声明和创建"></a>二、数组的声明和创建</h2><h4 id="1-数组的声明和创建"><a href="#1-数组的声明和创建" class="headerlink" title="1.数组的声明和创建"></a>1.数组的声明和创建</h4><ul>
<li>int[] nums    （首选方法）</li>
<li>int nums[]    （效果相同，不是首选）</li>
<li>Java中用<strong>new</strong>操作符来创建数组。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] nums;<span class="comment">//1.声明一个数组。</span></span><br><span class="line">       nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//2.创建一个数组，这个数组包含十个（0~9）数字。</span></span><br><span class="line">       <span class="keyword">int</span>[] nums1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">       <span class="comment">//3.给数组赋值。</span></span><br><span class="line">       nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">       nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">       nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">       nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">       nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">       nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">       nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">       nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">       nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">       nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//求和</span></span><br><span class="line">       <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">           sum = sum + nums[i];</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;和为&quot;</span> + sum);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-三种初始化"><a href="#2-三种初始化" class="headerlink" title="2.三种初始化"></a>2.三种初始化</h4><ol>
<li><p><strong>静态初始化</strong></p>
<p>直接在定义数组的同时为数组元素分配空间并赋值。</p>
<p><code>int[] a = &#123;1,2,3,4,5,6&#125;;</code></p>
</li>
<li><p><strong>动态初始化</strong></p>
<p>数组定义、为数组元素分配空间、赋值，分开进行。</p>
<p><code>int[] b = new int[2];</code><br><code>b[0] = 1;</code><br><code>b[1] = 2;</code></p>
</li>
<li><p><strong>默认初始化</strong></p>
<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方法被隐式初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">boolean</span>[] b = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>];</span><br><span class="line">String[] c = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+a[<span class="number">1</span>]);<span class="comment">//0 0</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+b[<span class="number">1</span>]);<span class="comment">//false false</span></span><br><span class="line">System.out.println(c[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+c[<span class="number">1</span>]);<span class="comment">//null null</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-内存分析"><a href="#3-内存分析" class="headerlink" title="3.内存分析"></a>3.内存分析</h4><p><strong>Java内存</strong></p>
<ul>
<li>堆，存放new的对象和数组，可以被所有的线程共享，不会存放别的对象的引用。</li>
<li>栈，存放基本变量类型（包含这个基本变量类型的具体数值），引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
<li>方法区，可以被所有的线程共享，包含了所有的class和static变量。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20210708194237507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3EyMzg5NDE5NzYy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>声明的时候并没有实例化任何对象，只有在实例化数组对象时，JVM才分配空间，这时才与长度有 关。因此，声明数组时不能指定其长度(数组中元素的个数)，例如： int a[5]; //非法</li>
<li>声明一个数组的时候并没有数组被真正的创建。</li>
<li>构造一个数组，必须指定长度</li>
</ul>
<h4 id="4-数组边界"><a href="#4-数组边界" class="headerlink" title="4.数组边界"></a>4.数组边界</h4><ul>
<li><p>数组的元素通过索引访问，数组索引从0开始，所以索引值是从0到arrays.length-1，arrays.length为数组长度。</p>
</li>
<li><p>下标的合法区间：[0，length-1]，如果越界就会报错。</p>
</li>
</ul>
<p>​    <code>ArrayIndexOutOfBoundsException //数组下标越界异常！</code></p>
<h2 id="三、数组的使用"><a href="#三、数组的使用" class="headerlink" title="三、数组的使用"></a>三、数组的使用</h2><ul>
<li>由于数组的元素类型和数组的大小都是确定的，所以处理数组元素的时候，通常使用基本循环和For-                Each循环。</li>
</ul>
<h4 id="1-数组的基本使用"><a href="#1-数组的基本使用" class="headerlink" title="1.数组的基本使用"></a>1.数组的基本使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印全部数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.println(arrays[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求所有数组元素的和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        sum += arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = arrays[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrays[i]&gt;max)&#123;</span><br><span class="line">            max = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;max=&quot;</span>+max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-For-Each循环"><a href="#2-For-Each循环" class="headerlink" title="2.For-Each循环"></a>2.For-Each循环</h4><ul>
<li><p>For-Each 循环（加强型循环），在不使用下标的情况下 遍历数组。</p>
<p>for(type element: array){</p>
<p> System.out.println(element);</p>
<p> }</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//For-Each循环  没有下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> array : arrays) &#123;</span><br><span class="line">   System.out.print(array+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-数组作为方法入参"><a href="#3-数组作为方法入参" class="headerlink" title="3.数组作为方法入参"></a>3.数组作为方法入参</h4><ul>
<li>数组作为参数传递给方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印数组元素  数组做方法入参</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">        System.out.print (arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-数组做返回值"><a href="#4-数组做返回值" class="headerlink" title="4.数组做返回值"></a>4.数组做返回值</h4><ul>
<li>result数组作为函数的返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反转数组  数组做返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arrays.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转的操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length; i++,j--) &#123;</span><br><span class="line">        result[j] = arrays[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;<span class="comment">//result数组作为函数的返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、多维数组"><a href="#四、多维数组" class="headerlink" title="四、多维数组"></a>四、多维数组</h2><ul>
<li>多维数组可以看成是数组的数组，例如二维数组就是一个特殊的一维数组。<br><img src="https://img-blog.csdnimg.cn/20210708194543875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3EyMzg5NDE5NzYy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//[5][2] 5行2列</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1,2 array[0]</span></span><br><span class="line"><span class="comment">    2,3 array[1]</span></span><br><span class="line"><span class="comment">    3,4 array[2]</span></span><br><span class="line"><span class="comment">    4,5 array[3]</span></span><br><span class="line"><span class="comment">    5,6 array[4]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">2</span>];<span class="comment">//二维数组 5行2列</span></span><br></pre></td></tr></table></figure>

<ul>
<li>a.length为二维数组第一维度的长度。</li>
<li>a[0].length为第二维第一个数组的长度。</li>
</ul>
<h2 id="五、Arrays类"><a href="#五、Arrays类" class="headerlink" title="五、Arrays类"></a>五、Arrays类</h2><ul>
<li>Arrays类中的方法都是static修饰的静态方法，可以直接调用，不用使用对象来调用（但是可以使用对象调用）</li>
</ul>
<h4 id="1-打印数组元素-Arrays-toString"><a href="#1-打印数组元素-Arrays-toString" class="headerlink" title="1.打印数组元素    Arrays.toString()"></a>1.打印数组元素    Arrays.toString()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//打印数组元素    Arrays.toString</span></span><br><span class="line">System.out.println(Arrays.toString(a));<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure>

<h4 id="2-数组元素排序（升序）-Arrays-sort"><a href="#2-数组元素排序（升序）-Arrays-sort" class="headerlink" title="2.数组元素排序（升序）  Arrays.sort()"></a>2.数组元素排序（升序）  Arrays.sort()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">244</span>,<span class="number">45</span>,<span class="number">556</span>&#125;;<span class="comment">//数组元素排序，升序</span></span><br><span class="line">Arrays.sort(a);System.out.println(Arrays.toString(a));<span class="comment">//[1, 3, 6, 45, 244, 556]</span></span><br></pre></td></tr></table></figure>

<h4 id="3-数组元素填充-Arrays-fill-）"><a href="#3-数组元素填充-Arrays-fill-）" class="headerlink" title="3.数组元素填充    Arrays.fill(）"></a>3.数组元素填充    Arrays.fill(）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">244</span>,<span class="number">45</span>,<span class="number">556</span>&#125;;</span><br><span class="line"><span class="comment">//数组填充</span></span><br><span class="line">Arrays.fill(a,<span class="number">2</span>,<span class="number">4</span>,<span class="number">50</span>);<span class="comment">//填充2和4之间的元素为50，即第2个和第3个填充为50</span></span><br><span class="line">System.out.println(Arrays.toString(a));<span class="comment">//[1, 6, 50, 50, 45, 556]</span></span><br></pre></td></tr></table></figure>

<h2 id="六、冒泡排序"><a href="#六、冒泡排序" class="headerlink" title="六、冒泡排序"></a>六、冒泡排序</h2><p>1.比较数组中俩个相邻的元素，如果第一个比第二个大，就调换他们的位置。<br>2.每一次比较，都会产生一个最大或者最小的数字。<br>3.下一轮可以少一次排序。<br>4.依次循环，直到结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">23</span>,<span class="number">435</span>,<span class="number">6</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="number">345</span>,<span class="number">678</span>,<span class="number">1234</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.toString(sort(a)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">    <span class="comment">//临时变量</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//外层循环，判断循环执行多少次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//通过flag标识来位减少没有意义的比较。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//内层循环，比较俩个数，如果第一个比第二个大，则交换位置。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;array.length-<span class="number">1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j+<span class="number">1</span>]&gt;array[j])&#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、稀疏数组"><a href="#七、稀疏数组" class="headerlink" title="七、稀疏数组"></a>七、稀疏数组</h2><ul>
<li>当一个数组中大部分元素为0，或者是相同数值的数组时，可以使用稀疏数组对其进行保存。</li>
<li>稀疏数组处理方式<ul>
<li>确定数组有几行几列，有几个不同值。</li>
<li>把具有不同值的元素和行数列数记录在一个小规模的数组中，缩小程序的规模。（压缩）</li>
</ul>
</li>
</ul>
<p>例如：</p>
<p>原始数组<br>0    0    0    0    0<br>0    0    1    0    0<br>0    0    0    2    0<br>0    0    0    0    0<br>0    0    0    0    0</p>
<p>稀疏数组<br>行  列  值<br>5    5    2<br>1    2    1<br>2    3    2    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个二维数组 11*11  0：没有旗子  1：黑棋  2：白棋</span></span><br><span class="line">    <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//2.输出原始的数组</span></span><br><span class="line">    System.out.println(<span class="string">&quot;输出原始的数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">            System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一、转换为稀疏数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取有效值的个数</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值的个数：&quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span>  <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;<span class="comment">//行数</span></span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;<span class="comment">//列数</span></span><br><span class="line">    array2[<span class="number">0</span>][<span class="number">2</span>] = sum;<span class="comment">//有效值个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.遍历二维数组，将非零的数，存放在稀疏数组中。</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.输出稀疏数组</span></span><br><span class="line">    System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">        System.out.println(array2[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                +array2[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                +array2[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二、还原稀疏数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.读取稀疏数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.给其中的元素还原它得值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">        array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打印还原的数组</span></span><br><span class="line">    System.out.println(<span class="string">&quot;输出还原的数组&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">            System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Java方法</title>
    <url>/2021/07/20/Java%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、方法"><a href="#一、方法" class="headerlink" title="一、方法"></a>一、方法</h2><h4 id="1-什么是方法"><a href="#1-什么是方法" class="headerlink" title="1.什么是方法"></a>1.什么是方法</h4><p>System.out.println()</p>
<p>System是系统类，out是标准输出对象，println()是一个方法</p>
<p>这句话是调用系统类System中的标准输出对象out中的方法printlin()</p>
<ul>
<li>方法是解决一类问题的步骤的有序组合。</li>
<li>方法包含于类或者对象中。</li>
<li>方法在程序中被创建，在其他地方被引用。</li>
</ul>
<h4 id="2-方法的优点"><a href="#2-方法的优点" class="headerlink" title="2.方法的优点"></a>2.方法的优点</h4><ul>
<li><p>使程序变得简短和清晰。</p>
</li>
<li><p>有利于维护程序。</p>
</li>
<li><p>提高程序的开发效率。</p>
</li>
<li><p>提高了代码的重要性。</p>
</li>
</ul>
<h2 id="二、方法的定义"><a href="#二、方法的定义" class="headerlink" title="二、方法的定义"></a>二、方法的定义</h2><p>修饰符    返回值类型    方法名(参数类型 参数名){</p>
<p>​    方法体</p>
<p>​    return 返回值;<br>}</p>
<ul>
<li><strong>修饰符</strong>：是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。</li>
<li><strong>返回值类型</strong>：方法返回值的数据类型，有的方法执行操作后没有返回值，用void关键字。</li>
<li><strong>方法名</strong>：方法的名称。</li>
<li><strong>参数</strong>：含参数类型和参数名字，参数是可选的，方法可以不包含任何参数，调用改方法时，传递值给该参数。<ul>
<li><strong>形式参数</strong>：在方法被调用时用于接收外界输入的数据。</li>
<li><strong>实际参数</strong>：调用方法时实际传给方法的数据。</li>
</ul>
</li>
<li><strong>方法体</strong>：法中的执行语句，定义该方法的功能。</li>
</ul>
<h2 id="三、方法的调用"><a href="#三、方法的调用" class="headerlink" title="三、方法的调用"></a>三、方法的调用</h2><ul>
<li><p>当方法返回一个值的时候，方法调用通常被当作一个值。例如：</p>
<p><code>int max = max(5,10)</code></p>
</li>
<li><p>当方法返回值是void，方法调用的一定是一条语句。例如：</p>
<p><code>System.out.println(&quot;Hello，World！&quot;)</code></p>
</li>
<li><p>Java中只有<strong>值传递</strong>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = max(<span class="number">50</span>, <span class="number">20</span>);</span><br><span class="line">    System.out.println(max);</span><br><span class="line">    <span class="comment">//调用max方法，输出大的值。返回值。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比大小  max方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num1==num2)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;num1==num2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//终止方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num1&gt;num2)&#123;</span><br><span class="line">        result = num1;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result = num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>非静态方法，没有使用static修饰符修饰的方法，调用这种方法的时候，一定要使用对象。</li>
<li>静态方法，使用static修饰符修饰的方法，调用这种方法的时候，可以用对象，也可以使用类来调用。推荐后者。</li>
<li>类中方法中的调用，两个方法都是静态或者非静态都可以互相调用，当一个方法是静态，一个方 法是非静态的时候，非静态方法可以调用静态方法，反之不能。</li>
</ol>
<h2 id="四、方法的重载"><a href="#四、方法的重载" class="headerlink" title="四、方法的重载"></a>四、方法的重载</h2><p><strong>方法重载</strong>：一个类中可以有俩个方法具有相同的名字，但是这俩个方法有不同的参数列表，即参数个数不同，或者参数个数相同，但所对应的参数类型不同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法重载，方法名字必须相同，参数类型或参数个数或者参数排列顺序不同。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、命令行传参（了解）"><a href="#五、命令行传参（了解）" class="headerlink" title="五、命令行传参（了解）"></a>五、命令行传参（了解）</h2><p>有时候希望在运行一个程序时在传递给塔信息，这要靠传递命令行参数给main()函数实现。</p>
<p><img src="https://img-blog.csdnimg.cn/20210627174529345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3EyMzg5NDE5NzYy,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p>
<p>错误：找不到或无法找到加载主类。</p>
<p>解决方法：在项目输出的项目目录下执行java命令，写完整路径即可。</p>
<h2 id="六、可变参数"><a href="#六、可变参数" class="headerlink" title="六、可变参数"></a>六、可变参数</h2><p>在方法声明中，在指定参数类型后加一个省略号(…)实现可变参数的声明。可变参数在一个方法中只能有一个，而且必须是该方法的最后一个参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//double... numbers  可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers.length == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; result)&#123;</span><br><span class="line">            result = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;The max value is&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、递归"><a href="#七、递归" class="headerlink" title="七、递归"></a>七、递归</h2><p><strong>递归</strong>：A方法调用A方法，即自己调用自己，设计递归算法时，要明白什么时候自己不调用自己，否则就是一个死循环。递归包括俩个部分：</p>
<ul>
<li>递归头：什么时候不调用自身，没有递归头就会陷入死循环。</li>
<li>递归体：什么时候自己调用自己。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Demo07 demo07 = <span class="keyword">new</span> Demo07();</span><br><span class="line">    System.out.println(demo07.f(<span class="number">3</span>));</span><br><span class="line">    System.out.println(f(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//阶乘 3! 3*2*1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*f(a -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//边界条件：阶乘，乘到最后一个数，即1的时候，返回1，程序执行到底。</span></span><br><span class="line"><span class="comment">//递归前进段：当前的参数不等于1的时候，继续调用自身。</span></span><br><span class="line"><span class="comment">//递归返回段：从最大数开始乘，比如5的阶乘，就是5*（5-1），即n*（n-1）.</span></span><br></pre></td></tr></table></figure>

<p>递归和迭代的区别：</p>
<p>递归易于理解，容易编程，采取栈机制，对于嵌套层数深（深度大）的一些算法，就会占用大量的内存空间，时间开销也会增加，空间上内存会崩溃。</p>
<p>迭代不容易理解，编写复杂问题时困难，效率高，运行时间因循环次增加而增加，没有额外开销，空间上也没什么增加。</p>
<h2 id="八、小练习"><a href="#八、小练习" class="headerlink" title="八、小练习"></a>八、小练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//简易加减乘除计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiSuanQi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> b = <span class="number">0</span>;</span><br><span class="line">        String fh = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextDouble())&#123;</span><br><span class="line">            a = scanner.nextDouble();</span><br><span class="line">            fh = scanner.next();</span><br><span class="line">            b = scanner.nextDouble();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (fh) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                System.out.println(a+<span class="string">&quot;+&quot;</span>+b+<span class="string">&quot;=&quot;</span>+(a+b));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                System.out.println(a+<span class="string">&quot;-&quot;</span>+b+<span class="string">&quot;=&quot;</span>+(a-b));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                System.out.println(a+<span class="string">&quot;*&quot;</span>+b+<span class="string">&quot;=&quot;</span>+(a*b));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                System.out.println(a+<span class="string">&quot;/&quot;</span>+b+<span class="string">&quot;=&quot;</span>+(a/b));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输如正确内容&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java流程控制</title>
    <url>/2021/07/14/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一、用户交互Scanner"><a href="#一、用户交互Scanner" class="headerlink" title="一、用户交互Scanner"></a>一、用户交互Scanner</h2><h4 id="1-Scanner对象"><a href="#1-Scanner对象" class="headerlink" title="1.Scanner对象"></a>1.Scanner对象</h4><ul>
<li><p>用Scanne类来获取用户的输入。</p>
</li>
<li><p>创建Scanner对象的基本语法：</p>
<p><code>Scanner scanner = new Scanner(System.in);</code></p>
</li>
<li><p>不使用要关闭Scanner类，否则会一直占用资源</p>
</li>
</ul>
<h4 id="2-next-和-nextLine"><a href="#2-next-和-nextLine" class="headerlink" title="2.next 和 nextLine"></a>2.next 和 nextLine</h4><ul>
<li><p><strong>next()</strong></p>
<ol>
<li>一定要读取导到有效字符后才可以结束输出。</li>
<li>对输入有效字符之前遇到的空白，next()方法会将其去掉。</li>
<li>对输入有效字符之后遇到的空白，next()方法会将其作为分隔符或结束符。</li>
<li>next()方法不能得到带有空格的字符。</li>
</ol>
</li>
<li><p><strong>nextLine()</strong></p>
<ol>
<li>以Enter为结束符。</li>
<li>可以得到空白。</li>
</ol>
</li>
</ul>
<h4 id="3-其他方法"><a href="#3-其他方法" class="headerlink" title="3.其他方法"></a>3.其他方法</h4><ol>
<li><p><strong>int数据的输入</strong></p>
<p>先用hasNextInt()进行验证，再用nextInt()来读取    </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (scanner.hasNextInt())&#123;</span><br><span class="line">    i = scanner.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的整数为：&quot;</span>+ i );</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的不是整数！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>float数据的输入</strong></p>
<p>先用hasNextFloat()进行验证，再用nextFloat()来读取  </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (sc.hasNextFloat())&#123;</span><br><span class="line">    f = sc.nextFloat();</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的小数为：&quot;</span>+ f );</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的不是小数！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、顺序结构"><a href="#二、顺序结构" class="headerlink" title="二、顺序结构"></a>二、顺序结构</h2><ul>
<li>顺序结构是Java最简单的算法结构</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;hello4&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;hello4&quot;</span>);<span class="comment">//从上到下依次执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、选择结构"><a href="#三、选择结构" class="headerlink" title="三、选择结构"></a>三、选择结构</h2><h4 id="1-if单选择结构"><a href="#1-if单选择结构" class="headerlink" title="1.if单选择结构"></a>1.if单选择结构</h4><p>if(布尔表达式){<br>  执行语句<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">    String s = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//equal：判断字符串是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;Hello&quot;</span>))&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line"></span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-if双选择结构"><a href="#2-if双选择结构" class="headerlink" title="2.if双选择结构"></a>2.if双选择结构</h4><p>if(布尔表达式){<br>  执行语句<br>}else{<br>  执行语句<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//考试分数大60就是及格，小于60分就是不及格</span></span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br></pre></td></tr></table></figure>

<h4 id="3-if多选择结构"><a href="#3-if多选择结构" class="headerlink" title="3.if多选择结构"></a>3.if多选择结构</h4><p>if(布尔表达式){<br>  执行语句<br>}else if(布尔表达式){<br>  执行语句<br>}else{<br>  执行语句<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> score  = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score==<span class="number">100</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;恭喜满分&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">100</span> &amp;&amp; score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;A级&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score&lt;<span class="number">90</span> &amp;&amp; score &gt;=<span class="number">80</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;B级&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score&lt;<span class="number">80</span> &amp;&amp; score &gt;=<span class="number">70</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;C级&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score&lt;<span class="number">70</span> &amp;&amp; score &gt;=<span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;D级&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (score&lt;<span class="number">60</span> &amp;&amp; score &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;成绩不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure>

<ul>
<li>if 语句至多有1个 else 语句，else 语句在所有 else if 语句之后。</li>
<li>if 语句可以有若干个 else if 语句，他们必须在 else 语句之前。</li>
<li>一旦其中一个 else if 语句检测为 true ， 其他的 else if 语句和 else 语句都将跳过执行。</li>
</ul>
<h4 id="4-嵌套的if结构"><a href="#4-嵌套的if结构" class="headerlink" title="4.嵌套的if结构"></a>4.嵌套的if结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（布尔值表达式<span class="number">1</span>）&#123;</span><br><span class="line">    <span class="keyword">if</span>（布尔值表达式<span class="number">2</span>）&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-switch多选择结构"><a href="#5-switch多选择结构" class="headerlink" title="5.switch多选择结构"></a>5.switch多选择结构</h4><p>switch(expression){<br>    case value:<br>        执行语句<br>        break;(可选)<br>    case value:<br>        执行语句<br>        break;(可选)<br>    default:(可选)<br>        执行语句<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//case 穿透  //switch 匹配一个具体的值</span></span><br><span class="line">    <span class="keyword">char</span> grade = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;优及格&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;再接再厉&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;位置等级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>switch语句中的变量类型可以是：byte、short、int、char、字符串String类型，同时case标签必须为字符串常量或者字面量。</p>
</li>
<li><p>case语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面量。</p>
</li>
<li><p>当变量的值与case的值相等时，执行下一个语句，如果遇到break则跳出switch语句。</p>
</li>
<li><p>case不必须要包含break语句。</p>
</li>
<li><p>switch语句中可以包含一个default分支，一般在语句的最后一个分支，default在没有case语句的值和变量的值相等时执行，default不需要break语句。</p>
</li>
<li><p><strong>case穿透</strong>：如果case语句块中没有break语句，匹配成功后，从当前case开始，后续所有case的值都会输出。除非遇到break语句跳出。</p>
</li>
</ul>
<h2 id="四、循环结构"><a href="#四、循环结构" class="headerlink" title="四、循环结构"></a>四、循环结构</h2><h4 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h4><p>while(布尔表达式){<br>  循环内容<br>  }</p>
<ul>
<li>大多数情况一般都会让循环停止下来。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出1~100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>死循环</strong>：少数情况下会让循环一直进行，不停止，应用于服务器的请求响应监听等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//等待客户链接</span></span><br><span class="line">        <span class="comment">//定时检查</span></span><br><span class="line">        <span class="comment">//。。。。。。。。</span></span><br><span class="line">        <span class="comment">//业务中应该尽量避免死循环</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-do…while循环"><a href="#2-do…while循环" class="headerlink" title="2.do…while循环"></a>2.do…while循环</h4><p>do{<br>  执行语句<br>}while(布尔表达式)；</p>
<ul>
<li>do…while循环会先执行一次，在根据条件决定是否进行循环。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计算1+2+3+...+100=？</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span> (i&lt;=<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h4><p>for(初始化条件;条件判断;更新迭代){<br>  循环体<br>  }</p>
<ul>
<li><p>for循环的执行次数在执行前就是确定的，for循环是<strong>最有效、最灵活</strong>的循环结构。</p>
</li>
<li><p>for循环最先执行初始化步骤，可以声明一种类型，但是可以初始化一个或多个循环控制变量，也可以是空语句。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化条件；条件判断；更新迭代           //for循环是 最有效 最灵活 的循环结构</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    System.out.println(i);<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;  <span class="comment">//100.for   </span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//死循环</span></span><br><span class="line"><span class="keyword">for</span> (;;)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-循环练习"><a href="#4-循环练习" class="headerlink" title="4.循环练习"></a>4.循环练习</h4><ol>
<li>计算0到100之前所有奇数和偶数的和。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oddsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> evensum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            oddsum += i;<span class="comment">//奇数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            evensum += i;<span class="comment">//偶数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数的和为&quot;</span>+ oddsum);</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数的和为&quot;</span>+ evensum);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>输出1-1000之间能被5整除的数，并且每行输出3个。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i%(<span class="number">3</span>*<span class="number">5</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">//System.out.print(&quot;\n&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//println 输出完会换行</span></span><br><span class="line"> <span class="comment">//print 输出完不会换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打印九九乘法表。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int j = 9;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(j*i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>打印三角形。（5行）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">5</span>; j &gt;= i; j--) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-增强for循环"><a href="#5-增强for循环" class="headerlink" title="5.增强for循环"></a>5.增强for循环</h4><p>for(声明语句：表达式){<br>  执行代码<br>  }</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;<span class="comment">//定义了一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for循环   主要用于数组或集合的增强型for循环    遍历数组的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x:numbers)&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、break和continue"><a href="#五、break和continue" class="headerlink" title="五、break和continue"></a>五、break和continue</h2><h4 id="1-break关键字"><a href="#1-break关键字" class="headerlink" title="1.break关键字"></a>1.break关键字</h4><p>break语句用来强行跳出该循环，不执行循环中剩余的语句，继续执行该循环下面的语句，主要用在循环语句和switch语句中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//输出30之后，不会继续输出，跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="number">132</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-continue关键字"><a href="#2-continue关键字" class="headerlink" title="2.continue关键字"></a>2.continue关键字</h4><p>continue语句用于终止某次循环过程，跳过循环体中未循环的语句，进行下一次是否执行循环的判断。适用于任何循环控制结构中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-goto关键字-标签（了解）"><a href="#3-goto关键字-标签（了解）" class="headerlink" title="3.goto关键字  标签（了解）"></a>3.goto关键字  标签（了解）</h4><p>标签是后边跟着一个冒号的标识符， label：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印101-150之间所有的质数</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//不建议使用！！！</span></span><br><span class="line">    outer:<span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">101</span>;i&lt;<span class="number">150</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j &lt; i/<span class="number">2</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span> outer;<span class="comment">//了解标签</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础</title>
    <url>/2021/10/20/SpringBoot-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一-SpringBoot"><a href="#一-SpringBoot" class="headerlink" title="一.SpringBoot"></a>一.SpringBoot</h2><ul>
<li>相当于maven整合了所有jar包,spring boot整合了所有的框架</li>
<li>优点:<ul>
<li>为所有Spring开发者更快的入门</li>
<li>开箱即用，提供各种默认配置来简化项目配置</li>
<li>内嵌式容器简化Web项目</li>
<li>没有冗余代码生成和XML配置的要求</li>
</ul>
</li>
</ul>
<h2 id="二-实现"><a href="#二-实现" class="headerlink" title="二.实现"></a>二.实现</h2><h3 id="1-创建方式一"><a href="#1-创建方式一" class="headerlink" title="1.创建方式一"></a>1.创建方式一</h3><ul>
<li>使用Spring Initializr 的 Web页面创建项目<ol>
<li>打开 <a href="https://start.spring.io/">https://start.spring.io/</a></li>
<li>填写项目信息</li>
<li>点击”Generate Project“按钮生成项目；下载此项目</li>
<li>解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕.</li>
</ol>
</li>
</ul>
<h3 id="2-创建方式二"><a href="#2-创建方式二" class="headerlink" title="2.创建方式二"></a>2.创建方式二</h3><ul>
<li>使用 IDEA 直接创建项目<ol>
<li>创建一个新项目</li>
<li>选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</li>
<li>填写项目信息</li>
<li>选择初始化的组件（初学勾选 Web 即可）</li>
<li>填写项目路径</li>
<li>等待项目构建成功</li>
</ol>
</li>
</ul>
<h3 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3.项目结构"></a>3.项目结构</h3><ul>
<li>pom.xml文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web场景启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 剔除依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>必须在同级目录下新建controller,否者识别不到</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>主启动器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 来标注一个主程序类 ， 说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以为是启动了一个方法，其实是启动了一个服务</span></span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动服务器,发送请求 </li>
</ul>
<h3 id="4-运行原理"><a href="#4-运行原理" class="headerlink" title="4.运行原理"></a>4.运行原理</h3><ul>
<li>springboot-boot-starter-xxx：spring-boot的场景启动器</li>
<li>spring-boot-starter-web：导入web模块正常运行所依赖的组件；</li>
<li>原理:<ol>
<li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取 EnableAutoConfiguration指定的值</li>
<li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作</li>
<li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中</li>
<li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 </li>
<li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作</li>
</ol>
</li>
</ul>
<h2 id="三-Yaml语法学习"><a href="#三-Yaml语法学习" class="headerlink" title="三.Yaml语法学习"></a>三.Yaml语法学习</h2><ul>
<li><p>spring boot 的全局配置文件 (修改spring boot自动配置的默认值)</p>
<ol>
<li>application.properties<ul>
<li>语法结构    key=value</li>
</ul>
</li>
<li>application.yml<ul>
<li>语法结构    key: 空格value</li>
</ul>
</li>
</ol>
</li>
<li><p>Yaml语法:</p>
<ul>
<li>“ “ 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</li>
<li>‘ ‘ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字面量：普通的值 [ 数字，布尔值，字符串 ]</span></span><br><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象、Map格式</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line">	<span class="attr">v1:</span></span><br><span class="line">	<span class="attr">v2:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象和属性</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">mkbk</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">mkbk</span>,<span class="attr">age:</span> <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组(List、set)</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="string">port</span> <span class="string">:8090</span></span><br></pre></td></tr></table></figure>

<h2 id="四-注入配置文件"><a href="#四-注入配置文件" class="headerlink" title="四.注入配置文件"></a>四.注入配置文件</h2><h3 id="1-Yaml"><a href="#1-Yaml" class="headerlink" title="1.Yaml"></a>1.Yaml</h3><ul>
<li>通过yaml配置文件给实体类属性注入值</li>
<li>@configurationProperties：默认从全局配置文件中获取值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">mkbk</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">	<span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">	<span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">	<span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">	<span class="attr">lists:</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">	<span class="attr">dog:</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试输出</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person; <span class="comment">//将person自动注入进来</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person); <span class="comment">//打印person信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-properties"><a href="#2-properties" class="headerlink" title="2.properties"></a>2.properties</h3><ul>
<li>通过properties配置文件给实体类属性注入值</li>
<li>@PropertySource ：加载指定的配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">mkbk</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-配置文件占位符"><a href="#3-配置文件占位符" class="headerlink" title="3.配置文件占位符"></a>3.配置文件占位符</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">mkbk$&#123;random.uuid&#125;</span> <span class="comment"># 随机uuid</span></span><br><span class="line">	<span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span> <span class="comment"># 随机int</span></span><br><span class="line">	<span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">	<span class="attr">birth:</span> <span class="number">2022</span><span class="string">/01/01</span></span><br><span class="line">	<span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">	<span class="attr">lists:</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">	<span class="attr">dog:</span></span><br><span class="line">		<span class="comment"># 引用person.hello 的值，如果不存在就用 ：后面的值，即 other，然后拼接上_旺财</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">$&#123;person.hello:other&#125;_小白</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="4-JSR303数据校验"><a href="#4-JSR303数据校验" class="headerlink" title="4.JSR303数据校验"></a>4.JSR303数据校验</h3><ul>
<li>采用@validated来校验数据,如果数据异常会抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果报错,邮箱格式错误</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常见的</span></span><br><span class="line"><span class="meta">@NotNull(message=&quot;名字不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Max(value=120,message=&quot;年龄最大不能超过100&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>

<h2 id="五-多环境切换"><a href="#五-多环境切换" class="headerlink" title="五.多环境切换"></a>五.多环境切换</h2><ul>
<li>通过 application-{profile}.properties/yml , 用来指定多个环境版本</li>
<li>例如：application-test.properties 代表测试环境配置 application-dev.properties 代表开发环境配置</li>
<li>springboot 默认使用application.properties主配置文件</li>
<li>通过一个配置文件来选择需要运行的环境</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>

<ul>
<li>yml实现 多环境切换 更方便</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span></span><br><span class="line">		<span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span> <span class="string">prod</span> <span class="comment">#配置环境的名称	</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件优先级</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure>

<h2 id="六-自动配置原理"><a href="#六-自动配置原理" class="headerlink" title="六.自动配置原理"></a>六.自动配置原理</h2><ul>
<li>以HttpEncodingAutoConfiguration（Http编码自动配置）为例 解释自动配置原理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line"><span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line"><span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span></span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line"><span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line"><span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line"><span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span></span><br><span class="line">            OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframew</span><br><span class="line">                                                                   ork.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframe</span><br><span class="line">                                                                    work.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>根据当前不同的条件判断，决定这个配置类是否生效</li>
<li>一但这个配置类生效；这个配置类就会给容器中添加各种组件</li>
<li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的</li>
<li>所有在配置文件中能配置的属性都是在xxxProperties类中封装着</li>
<li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结:</strong></p>
<ol>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中</li>
<li>我们再来看这个自动配置类中到底配置了哪些组件 (只要我们要用的组件存在在其中，我们就不需要再手动配置了)</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可<ul>
<li>xxxxAutoConfigurartion：自动配置类；给容器中添加组件 </li>
<li>xxxxProperties:封装配置文件中相关属性</li>
</ul>
</li>
</ol>
<p><strong>概括:</strong></p>
<p>​        springboot启动会加载自动配置类 (配置类中根据一些条件判断决定该配置类是否加载,如果加载就会将这个配置类中的一些相关组件添加到容器中,添加组件的时候会从该类对应的properties类中获取某些属性),我们通过配置文件给这些属性添加值.如果自动配置类中没有我们需要的功能组件.则需要自己来配置</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 整合 Mybatis</title>
    <url>/2021/10/26/boot%E6%95%B4%E5%90%88mybatis/</url>
    <content><![CDATA[<h3 id="SpringBoot整合-Mybatis"><a href="#SpringBoot整合-Mybatis" class="headerlink" title="SpringBoot整合 Mybatis"></a>SpringBoot整合 Mybatis</h3><h4 id="1-创建-Student-实体类，搭建MVC"><a href="#1-创建-Student-实体类，搭建MVC" class="headerlink" title="1. 创建 Student 实体类，搭建MVC"></a>1. 创建 Student 实体类，搭建MVC</h4><h4 id="1-配置-application-yml-文件"><a href="#1-配置-application-yml-文件" class="headerlink" title="1. 配置 application.yml 文件"></a>1. 配置 application.yml 文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mytest?useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置-mybatis-config-xml-配置文件"><a href="#2-配置-mybatis-config-xml-配置文件" class="headerlink" title="2. 配置 mybatis-config.xml 配置文件"></a>2. 配置 mybatis-config.xml 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键自动生成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--驼峰命名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-配置-student-xml-映射文件"><a href="#3-配置-student-xml-映射文件" class="headerlink" title="3. 配置  student.xml 映射文件"></a>3. 配置  student.xml 映射文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.stx.ssmfirstdemo.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStuList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.stx.ssmfirstdemo.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        select id, name, age, sex, score, gid, addtime, status</span><br><span class="line">        from mytest.stu_info;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-编写Dao层接口-StudentDao"><a href="#4-编写Dao层接口-StudentDao" class="headerlink" title="4. 编写Dao层接口 StudentDao"></a>4. 编写Dao层接口 StudentDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问学生列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">queryStuList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-编写业务类接口-StudentService-和实现类-StudentServiceImpl"><a href="#5-编写业务类接口-StudentService-和实现类-StudentServiceImpl" class="headerlink" title="5. 编写业务类接口 StudentService 和实现类 StudentServiceImpl"></a>5. 编写业务类接口 StudentService 和实现类 StudentServiceImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">queryStuList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">queryStuList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentDao.queryStuList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-编写控制器-StudentController"><a href="#6-编写控制器-StudentController" class="headerlink" title="6. 编写控制器 StudentController"></a>6. 编写控制器 StudentController</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getStuList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title">queryStudentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentService.queryStuList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-扫描-MapperScan"><a href="#7-扫描-MapperScan" class="headerlink" title="7. 扫描  @MapperScan"></a>7. 扫描  @MapperScan</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.stx.*.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SsmfirstdemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SsmfirstdemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学习</title>
    <url>/2021/09/15/jsp/</url>
    <content><![CDATA[<h2 id="一、JSP"><a href="#一、JSP" class="headerlink" title="一、JSP"></a>一、JSP</h2><ol>
<li><p><strong>JSP</strong>：java    server    page    Java服务器页面</p>
</li>
<li><p><strong>特点</strong>：java代码和HTML分离，降低开发难度，使用简单。本质就是servlet</p>
</li>
</ol>
<h3 id="1-JSP基本语法"><a href="#1-JSP基本语法" class="headerlink" title="1.JSP基本语法"></a>1.JSP基本语法</h3><ul>
<li><strong>&lt;%%&gt;</strong>    jsp代码块：嵌入Java代码&lt;% java 代码块%&gt;</li>
<li><strong>&lt;%!%&gt;</strong>    jsp声明构造快：声明变量和方法&lt;%! int a = 10 %&gt;</li>
<li><strong>&lt;%=%&gt;</strong>    jsp输出指令：显示java代码的执行结果&lt;%=a%&gt;</li>
</ul>
<h3 id="2-转移过程"><a href="#2-转移过程" class="headerlink" title="2.转移过程"></a>2.转移过程</h3><ul>
<li>HTML代码，就会被转换为：out.write(“\r\n”);</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/622c65145baa1a80ab88d713.png" alt="image-20211111151238961"></p>
<h3 id="3-九大内置对象"><a href="#3-九大内置对象" class="headerlink" title="3.九大内置对象"></a>3.九大内置对象</h3><ul>
<li>PageContext 页面上下文对象，存东西</li>
<li>Request 请求，存东西</li>
<li>Response 响应</li>
<li>Session 用户会话，存东西</li>
<li>Application ServletContext 应用全局对象，存东西</li>
<li>config ServletConfig 应用配置对象</li>
<li>out PrintWriter 输出对象</li>
<li>page 当前页面对象，了解</li>
<li>exception 应用异常对象</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/622c65145baa1a80ab88d71f.png" alt="image-20211111151431783"></p>
<h2 id="二、EL表达式"><a href="#二、EL表达式" class="headerlink" title="二、EL表达式"></a>二、EL表达式</h2><ul>
<li><strong>EL表达式 ${}</strong> </li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--EL表达式 $&#123;&#125; &#125;--%&gt;</span><br><span class="line">&lt;p&gt;学生姓名：$&#123;requestScope.student.sname&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;学生年龄：$&#123;student.sage&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;学生成绩：&lt;%=score%&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;学生对象：$&#123;student&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;成绩评级：$&#123;requestScope.grade&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Session成绩评级：$&#123;sessionScope.grade&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三、JSTL标签"><a href="#三、JSTL标签" class="headerlink" title="三、JSTL标签"></a>三、JSTL标签</h2><h3 id="1-导入"><a href="#1-导入" class="headerlink" title="1.导入"></a>1.导入</h3><ul>
<li>JSTL使用前的<strong>导入</strong>：加入jar包，添加下列语句</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-IF的使用"><a href="#2-IF的使用" class="headerlink" title="2.IF的使用"></a>2.IF的使用</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSTL标签--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;requestScope.student.score&gt;=90&amp;&amp;requestScope.student.score&gt;=80&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;成绩优秀&lt;/h2&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;requestScope.student.score&lt;80&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;通知加紧努力了&lt;/h2&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-遍历-循环-switch的使用……"><a href="#3-遍历-循环-switch的使用……" class="headerlink" title="3.遍历,循环,switch的使用……"></a>3.遍历,循环,switch的使用……</h3>]]></content>
      <categories>
        <category>笔记</category>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2021/09/03/CSS/</url>
    <content><![CDATA[<h2 id="一、初始CSS"><a href="#一、初始CSS" class="headerlink" title="一、初始CSS"></a>一、初始CSS</h2><h3 id="1-CSS"><a href="#1-CSS" class="headerlink" title="1.CSS"></a>1.CSS</h3><ul>
<li>Cascading Style Sheet 层叠样式表。</li>
<li><strong>表现</strong>HTML或XHTML文件样式的计算机语言。</li>
<li>优势：<ul>
<li>内容与表现分离，网页的表现统一，容易修改。</li>
<li>丰富的样式，使得页面布局更加灵活。</li>
<li>运用独立于页面的CSS，有利于网页被搜索引擎收录。</li>
<li>减少网页的代码量，增加网页的浏览速度，节省网络带宽。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-CSS基本语法"><a href="#2-CSS基本语法" class="headerlink" title="2.CSS基本语法"></a>2.CSS基本语法</h3><ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">    声明<span class="number">1</span>；</span><br><span class="line">    声明<span class="number">2</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>style标签：CSS样式在HTML中应用的标签。</li>
</ul>
<hr>
<h3 id="3-引入CSS方式"><a href="#3-引入CSS方式" class="headerlink" title="3.引入CSS方式"></a>3.引入CSS方式</h3><ul>
<li><strong>行内样式</strong>：在标签元素中，编写一个style属性，编写样式即可，由于这种方式不能起到内容与表现相分离，因此不推荐使用。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> style=&quot;<span class="attribute">color</span>: blue<span class="string">&quot;&gt;我是标题&lt;/h1&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>内部样式</strong>：方便在同页面中修改样式，不利于在多页面间共享复用代码及维护。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>外部样式</strong>：CSS代码保存在扩展名为.css的样式表中，HTML文件引用扩展名为.css的样式表，有<strong>俩种</strong>方式。</p>
<ul>
<li><p><strong>链接式</strong>：使用 link 标签链接外部样式表，link 标签必须放在 head 标签中。</p>
</li>
<li><p>客户端浏览网页时先将外部CSS文件加载到网页当中，然后再进行编译显示，所以这种情况下显示出来的网页与用户预期的效果一样。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>导入式</strong>：使用@import导入外部样式表。</p>
</li>
<li><p>客户端在浏览网页时先将HTML结构呈现出来，再把外部CSS文件加载到网页当中，当网速较慢时会先显示没有CSS统一布局的HTML网页。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;<span class="keyword">@import</span> url(<span class="string">&quot;css/style.css&quot;</span>);&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>优先级</strong>：就近原则，越接近标签的样式优先级越高。</p>
</li>
</ul>
<hr>
<h3 id="4-CSS基本选择器"><a href="#4-CSS基本选择器" class="headerlink" title="4.CSS基本选择器"></a>4.CSS基本选择器</h3><ul>
<li><strong>标签选择器</strong>：HTML标签作为选择器的名称。</li>
<li><strong>类选择器</strong>：.class的名称{}，好处：可以多个标签归类，是同一个class，可以复用。</li>
<li><strong>ID选择器</strong>：#id名称{} ： id必须保证全局唯一!</li>
<li><strong>优先级</strong>：id 选择器&gt;class 选择器&gt;标签选择器</li>
</ul>
<hr>
<h3 id="5-CSS高级选择器"><a href="#5-CSS高级选择器" class="headerlink" title="5.CSS高级选择器"></a>5.CSS高级选择器</h3><h4 id="1-层次选择器"><a href="#1-层次选择器" class="headerlink" title="1.层次选择器"></a>1.层次选择器</h4><ul>
<li>后代选择器：某个元素的后面。</li>
<li>子选择器：一代，儿子。</li>
<li>相邻兄弟选择器：只有一个，相邻（向下）。</li>
<li>统通用兄弟选择器：当前选中元素向下的所有兄弟元素。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1.后代选择器：某个元素的后面*/</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#158616</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.子选择器：一代，儿子*/</span></span><br><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#158616</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3.相邻兄弟选择器：只有一个，相邻（向下）*/</span></span><br><span class="line"><span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#158616</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4.通用兄弟选择器：当前选中元素向下的所有兄弟元素*/</span></span><br><span class="line"><span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#158616</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="2.结构伪类选择器"></a>2.结构伪类选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*ul的第一个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ul的最后一个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中p1：定位到父元素，选择当前的第二个元素</span></span><br><span class="line"><span class="comment">选择当前p元素的父级元素，选择父级元素的第二个元素，并且是当前元素才生效，按顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中父级元素，下的p元素的第二个，按类型*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3.属性选择器"></a>3.属性选择器</h4><p>  =  绝对等于<br>  *= 包含<br>  ^= 以什么开头<br>  $= 以什么结尾</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*属性名，属性名 = 属性值（正值）</span></span><br><span class="line"><span class="comment">= 绝对等于</span></span><br><span class="line"><span class="comment">*= 包含</span></span><br><span class="line"><span class="comment">^= 以什么开头</span></span><br><span class="line"><span class="comment">$= 以什么结尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*存在id属性元素      a[]&#123;&#125;*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*id=first的元素*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*class 中有links的元素*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">&quot;links&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中herf中以http开头的*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中herf中以jpg结尾的*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=com]</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、美化网页元素"><a href="#二、美化网页元素" class="headerlink" title="二、美化网页元素"></a>二、美化网页元素</h2><h3 id="1-为什么使用CSS"><a href="#1-为什么使用CSS" class="headerlink" title="1.为什么使用CSS"></a>1.为什么使用CSS</h3><ul>
<li>有效的传递页面信息 。</li>
<li>使用CSS美化过的页面文本，使页面漂亮、美观，吸引用户 。</li>
<li>可以很好的突出页面的主题内容，使用户第一眼可以看到页面主要内容。</li>
<li>具有良好的用户体验。</li>
<li>&lt; span&gt;标签：能让某几个文字或者某个词语凸显出来，从而添加对应的样式！</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--重点突出的字，用<span class="selector-tag">span</span>套起来--&gt;</span><br><span class="line">做一名 &lt;<span class="selector-tag">span</span> id=&quot;title1&quot;&gt;JAVA&lt;/<span class="selector-tag">span</span>&gt;工程师</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-字体样式"><a href="#2-字体样式" class="headerlink" title="2.字体样式"></a>2.字体样式</h3><ul>
<li>font-family：字体类型<br>font-size：字体大小，单位：px、em。<br>font-weight：字体粗细，lighter、normal（400）、bold（700）、bolder。<br>color：字体颜色<br>font-style： 字体风格，normal、italic和oblique（斜体）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">&quot;Arial&quot;</span>,楷体;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#865722</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.p1</span>&#123;</span><br><span class="line">        <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>字体属性 font：字体属性的顺序：字体风格→字体粗细→字体大小→字体类型</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.p1</span>&#123;</span><br><span class="line">        <span class="attribute">font</span>: oblique <span class="number">100</span> <span class="number">16px</span> <span class="string">&quot;楷体&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-文本样式"><a href="#3-文本样式" class="headerlink" title="3.文本样式"></a>3.文本样式</h3><ul>
<li>text-align: center;    排版：居中。<br>text-indent: 2em;   段落首行缩进二字符。<br>text-decoration: none;    去掉下划线，上中下划线，删除线。</li>
<li>height: 300px;<br>line-height: 300px;<br>行高 和 块 的高度一致，就可以上下居中。</li>
<li>vertical-align: middle; 文本图片水平对齐，参照物: a，b。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">颜色：</span><br><span class="line">    单词</span><br><span class="line">    RGB <span class="number">0</span>~F</span><br><span class="line">    RGBA <span class="selector-tag">A</span> <span class="number">0</span>~<span class="number">1</span> 透明度</span><br><span class="line">--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.p1</span>&#123;</span><br><span class="line">        <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.p3</span>&#123;</span><br><span class="line">        <span class="attribute">background</span>: blue;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*下划线*/</span></span><br><span class="line">    <span class="selector-class">.l1</span>&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*中划线*/</span></span><br><span class="line">    <span class="selector-class">.l2</span>&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*上划线*/</span></span><br><span class="line">    <span class="selector-class">.l3</span>&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*超链接去掉下划线*/</span></span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*文本图片水平对齐，参照物， a，b*/</span></span><br><span class="line">     <span class="selector-tag">img</span>,<span class="selector-tag">span</span>&#123;</span><br><span class="line">         <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-文本阴影"><a href="#4-文本阴影" class="headerlink" title="4.文本阴影"></a>4.文本阴影</h3><ul>
<li>text-shadow： 文本阴影（水平偏移，垂直偏移，阴影模糊半径，阴影颜色）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#price</span>&#123;<span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">#0af8ff</span>;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-超链接伪类"><a href="#5-超链接伪类" class="headerlink" title="5.超链接伪类"></a>5.超链接伪类</h3><ul>
<li>a:hover{}    鼠标悬浮的状态</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*默认颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标悬浮的状态（只需要记住：hover）*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标按住未释放的状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e01500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-列表样式"><a href="#6-列表样式" class="headerlink" title="6.列表样式"></a>6.列表样式</h3><ul>
<li>list-style:<pre><code>none：去掉圆点
disc：实心圆，默认类型
circlr：空心圆
decimal：数字
square：正方形
</code></pre>
</li>
</ul>
<hr>
<h3 id="7-背景样式"><a href="#7-背景样式" class="headerlink" title="7.背景样式"></a>7.背景样式</h3><ul>
<li>background-image：背景图像<br>  background-color：背景颜色<br>   background-repeat：背景重复方式（沿x轴平铺，沿y轴平铺，不重复）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/cs11dn.png&quot;</span>);</span><br><span class="line">    <span class="comment">/*默认是全部平铺的 repeat*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*沿x轴平铺*/</span></span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*沿y轴平铺*/</span></span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*不重复 就一个*/</span></span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>背景简写</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*颜色 图片 图片定位 背景不重复*/</span></span><br><span class="line"><span class="attribute">background</span>: red <span class="built_in">url</span>(<span class="string">&quot;../images/d.png&quot;</span>) <span class="number">270px</span> <span class="number">10px</span> no-repeat;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="8-渐变样式"><a href="#8-渐变样式" class="headerlink" title="8.渐变样式"></a>8.渐变样式</h3><ul>
<li>网站推荐：<a href="http://color.oulu.me/">http://color.oulu.me/</a></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*background-color: #00bcbf;*/</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">117deg</span>, <span class="number">#00bcbf</span> <span class="number">0%</span>, <span class="number">#FC00FF</span> <span class="number">100%</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、盒子模型"><a href="#三、盒子模型" class="headerlink" title="三、盒子模型"></a>三、盒子模型</h2><h3 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1.盒子模型"></a>1.盒子模型</h3><ul>
<li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li>
<li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li>
<li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li>
<li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li>
</ul>
<p><img src="https://www.runoob.com/images/box-model.gif"></p>
<hr>
<h3 id="2-边框border"><a href="#2-边框border" class="headerlink" title="2.边框border"></a>2.边框border</h3><ul>
<li>同时设置4个边框颜色时，顺序为上右下左（顺时针）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*body总有一个默认的外边距 要进行默认设置margin：0（常见操作）</span></span><br><span class="line"><span class="comment">body&#123;</span></span><br><span class="line"><span class="comment">    margin: 0;</span></span><br><span class="line"><span class="comment">    padding: 0;</span></span><br><span class="line"><span class="comment">    text-decoration: none;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*border：粗细，样式，颜色</span></span><br><span class="line"><span class="comment">    solid 实线</span></span><br><span class="line"><span class="comment">    dashed 虚线</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-内外边距-padding-margin"><a href="#3-内外边距-padding-margin" class="headerlink" title="3.内外边距 padding margin"></a>3.内外边距 padding margin</h3><ul>
<li>同时设置2个值时，顺序为上下、右左。</li>
<li>同时设置4个值时，顺序为上右下左（顺时针）。</li>
<li>内外边距同理。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">顺时针旋转</span></span><br><span class="line"><span class="comment">margin: 0</span></span><br><span class="line"><span class="comment">margin: 0 1px</span></span><br><span class="line"><span class="comment">margin: 0 1px 2px 3px</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#0af8ff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>外边距的妙用，居中元素：<strong>margin: 0 auto;</strong></li>
<li>网页居中对齐的必要条件：块元素，固定宽度。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-盒子模型尺寸"><a href="#4-盒子模型尺寸" class="headerlink" title="4.盒子模型尺寸"></a>4.盒子模型尺寸</h3><ul>
<li>盒子模型总尺寸= border + padding + margin + 内容高度</li>
</ul>
<hr>
<h3 id="5-圆角边框"><a href="#5-圆角边框" class="headerlink" title="5.圆角边框"></a>5.圆角边框</h3><ul>
<li>border-radius：边框半径，左上，右上，右下，左下，顺时针方向。</li>
<li>圆圈：圆角=半径（border-radius: 50%;）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-盒子阴影"><a href="#6-盒子阴影" class="headerlink" title="6.盒子阴影"></a>6.盒子阴影</h3><ul>
<li>box-shadow：内阴影（阴影类型）、x轴位移、y轴位移、阴影模糊半径、阴影颜色。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:inset <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> yellow;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、浮动"><a href="#四、浮动" class="headerlink" title="四、浮动"></a>四、浮动</h2><h3 id="1-标准文档流"><a href="#1-标准文档流" class="headerlink" title="1.标准文档流"></a>1.标准文档流</h3><ul>
<li><strong>标准文档流</strong>：指元素根据块元素或行内元素的特性按从上到下，从左到右的方式自然排列。这也是元素默认的排列方式。</li>
<li><strong>块级元素</strong>（block）：&lt; h1&gt;…&lt; h6&gt;、&lt; p&gt;、&lt; div&gt;、列表</li>
<li><strong>内联元素</strong>（inline）：&lt; span&gt;、&lt; a&gt;、&lt; img&gt;</li>
<li>内联标签可以包含于块级标签中，成为它的子元素，而反过来则不成立。</li>
</ul>
<hr>
<h3 id="2-display"><a href="#2-display" class="headerlink" title="2.display"></a>2.display</h3><ul>
<li><strong>bolck</strong>：元素显示为块级元素。</li>
<li><strong>inline</strong>：元素显示为内联元素。</li>
<li><strong>inline-block</strong>: 行内块元素，是块元素，还可以内联，在一行！（可以使块元素排在一行）</li>
<li><strong>none</strong>：设置元素不会被显示。</li>
</ul>
<hr>
<h3 id="3-浮动-float"><a href="#3-浮动-float" class="headerlink" title="3.浮动 float"></a>3.浮动 float</h3><ul>
<li><p><strong>left</strong>：左浮动，<strong>right</strong>：右浮动。（可以使块元素排在一行，会产生边框塌陷）</p>
</li>
<li><p><strong>clear</strong>：清除浮动。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">clear</span>:both; 清除两侧浮动 &#125; <span class="selector-tag">div</span>&#123; <span class="attribute">clear</span><span class="selector-pseudo">:left</span>; 清除左侧浮动 &#125; <span class="selector-tag">div</span> &#123; <span class="attribute">clear</span><span class="selector-pseudo">:right</span>; 清除右侧浮动 &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-边框塌陷及解决方法"><a href="#4-边框塌陷及解决方法" class="headerlink" title="4.边框塌陷及解决方法"></a>4.边框塌陷及解决方法</h3><ul>
<li><strong>设置父元素的高度</strong><ul>
<li>简单，元素假定有了固定高度，就会被限制，降低扩展性。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="comment">/*简单，元素假定有了固定高度，就会被限制*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div4</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;father&quot; style=&quot;<span class="attribute">border</span>: <span class="number">1px</span> black solid<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div1<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div1&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div2<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div2&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div3<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div3&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div4<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div4&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>父级添加overflow属性（溢出处理）</strong><ul>
<li>简单，下拉列表框的场景不能使用。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*简单，下拉列表框的场景不能使用*/</span></span><br><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div4</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;father&quot; style=&quot;<span class="attribute">border</span>: <span class="number">1px</span> black solid<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div1<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div1&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div2<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div2&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div3<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div3&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div4<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div4&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>浮动元素后面加空div</strong><ul>
<li>简单，但是空div会造成HTML代码冗余，代码中尽量避免加空div。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div4</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*简单，代码中尽量避免加空div*/</span></span><br><span class="line"><span class="selector-id">#clear</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;father&quot; style=&quot;<span class="attribute">border</span>: <span class="number">1px</span> black solid<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div1<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div1&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div2<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div2&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div3<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div3&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div4<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div4&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div id=&quot;</span>clear<span class="string">&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>父级添加伪类after（推荐）</strong><ul>
<li>写法比前三个复杂，但是没有副作用，推荐使用。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*写法复杂，但是没有副作用，推荐使用*/</span></span><br><span class="line"><span class="selector-id">#father</span>:after&#123;</span><br><span class="line">    content:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div3</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div4</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;father&quot; style=&quot;<span class="attribute">border</span>: <span class="number">1px</span> black solid<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div1<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div1&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div2<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div2&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div3<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div3&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>div4<span class="string">&quot; style=&quot;</span>width: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">border</span>: <span class="number">1px</span> dashed red<span class="string">&quot;&gt;我是div4&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-inline-block-和-float-区别"><a href="#5-inline-block-和-float-区别" class="headerlink" title="5.inline-block 和 float 区别"></a>5.inline-block 和 float 区别</h3><ul>
<li>display: inline-block<ul>
<li>可以让元素排在一行，并且支持宽度和高度，代码实现起来方便。</li>
<li>但是位置方向不可控制，会解析空格。</li>
</ul>
</li>
<li>float<ul>
<li>可以让元素排在一行，并且支持宽度和高度，可以决定排列方向。</li>
<li>float 浮动以后元素脱离文档流，会对周围元素产生影响，必须在它的父级上添加清除浮动的样式。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="五、定位"><a href="#五、定位" class="headerlink" title="五、定位"></a>五、定位</h2><h3 id="1-定位在网页中的应用"><a href="#1-定位在网页中的应用" class="headerlink" title="1.定位在网页中的应用"></a>1.定位在网页中的应用</h3><ul>
<li>下拉菜单，不随滚动条移动的固定导航，鼠标移入弹出的消息框。</li>
</ul>
<hr>
<h3 id="2-相对定位-relative"><a href="#2-相对定位-relative" class="headerlink" title="2.相对定位 relative"></a>2.相对定位 relative</h3><ul>
<li>position: relative：<strong>相对定位</strong>，相对于自身原来的位置进行偏移。</li>
<li>偏移设置：top、left、right、bottom，上左右下。</li>
<li></li>
<li>设置相对定位的盒子仍在标准文档流中，它对父级盒子和相邻的盒子都没有任何影响。</li>
<li>层级提高，可以把标准文档流中的元素及浮动元素盖在下边</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#first</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0af8ff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#d83a17</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;<span class="comment">/*相对定位：上下左右*/</span></span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#second</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ebff11</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#e09344</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-绝对定位-absolute"><a href="#3-绝对定位-absolute" class="headerlink" title="3.绝对定位 absolute"></a>3.绝对定位 absolute</h3><ul>
<li>position: relative：<strong>绝对定位</strong>，相对于它的定位父级的位置来定位，如果没有设置定位父级，则相对浏览器窗口来定位。</li>
<li>元素位置发生偏移后，原来的位置不会被保留下来。</li>
<li>绝对定位的元素从标准文档流中脱离，这意味着它们对其他元素的定位不会造成影响。</li>
<li>层级提高，可以把标准文档流中的元素及浮动元素盖在下边。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#second</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ebff11</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#e09344</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">20px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-固定定位-fixed"><a href="#4-固定定位-fixed" class="headerlink" title="4.固定定位 fixed"></a>4.固定定位 fixed</h3><ul>
<li>position: fixed：<strong>固定定位</strong>，相对浏览器窗口来定位，偏移量不会随滚动条的移动而移动。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;<span class="comment">/*fixed，固定定位*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-z-index属性"><a href="#5-z-index属性" class="headerlink" title="5.z-index属性"></a>5.z-index属性</h3><ul>
<li><strong>z-index</strong>：调整元素定位时重叠层的上下位置，值大的层位于值小的层上方。默认层数是0。</li>
<li> <strong>opacity: x</strong>：设置透明度，x值为0~1，值越小越透明。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tipText</span>&#123;</span><br><span class="line">    <span class="comment">/*z-index: 1;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tipBg</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;<span class="comment">/*背景透明度*/</span></span><br><span class="line">    <span class="comment">/*filter: alpha(opacity=50);*/</span><span class="comment">/*老版本*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、制作网页动画"><a href="#六、制作网页动画" class="headerlink" title="六、制作网页动画"></a>六、制作网页动画</h2><h3 id="1-CSS变形"><a href="#1-CSS变形" class="headerlink" title="1.CSS变形"></a>1.CSS变形</h3><ul>
<li>translate()：<strong>平移函数</strong>，基于X、Y坐标重新定位元素的位置。</li>
<li>scale()：<strong>缩放函数</strong>，可以使任意元素对象尺寸发生变化。</li>
<li>rotate()：<strong>旋转函数</strong>，取值是一个度数值。</li>
<li>skew()：<strong>倾斜函数</strong>，取值是一个度数值。</li>
</ul>
<hr>
<h3 id="2-CSS过渡"><a href="#2-CSS过渡" class="headerlink" title="2.CSS过渡"></a>2.CSS过渡</h3><p>transition [ transition-property    transition-duration    transition-timing-function    transition-delay ]</p>
<ul>
<li>过渡属性（ transition-property ）：定义转换动画的CSS属性名称（width、height、background-color属性等）。</li>
<li>过渡所需的时间（ transition-duration ）：定义转换动画的时间长度，单位为秒。</li>
<li>过渡动画函数（ transition-timing-function ）：通过给过渡添加一个函数来指定动画的快慢方式。<ul>
<li>ease：速度由快到慢（默认值）</li>
<li>linear：速度恒速（匀速运动）</li>
<li>ease-in：速度越来越快（渐显效果）</li>
<li>ease-out：速度越来越慢（渐隐效果）</li>
<li>ease-in-out：速度先加速再减速（渐显渐隐效果）</li>
</ul>
</li>
<li>过渡延迟时间（ transition-delay ）：指定一个动画开始执行的时间。</li>
</ul>
<p>触发机制：伪类触发、媒体查询、JavaScript触发。</p>
<hr>
<h3 id="3-CSS动画"><a href="#3-CSS动画" class="headerlink" title="3.CSS动画"></a>3.CSS动画</h3><ul>
<li>设置关键帧</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myfirst &#123;    <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;    <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@keyframes的浏览器兼容性<ul>
<li>写兼容的时候浏览器前缀是放在@keyframes中间 例如：@-webkit-keyframes、@-moz- keyframes</li>
</ul>
</li>
<li>animation属性<ul>
<li>animation-play-state：动画的播放状态，规定动画是否正在运行或暂停。默认是 running。</li>
<li>animation-iteration-count：动画的播放次数，默认为1，特殊值 infinite，表示动画无限次播放。</li>
<li>animation-direction：动画的播放方向，规定是否应该轮流反向播放动画。</li>
<li>animation-fill-mode：动画发生的操作，规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解和反射</title>
    <url>/2021/08/15/Java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="一、注解Annotation"><a href="#一、注解Annotation" class="headerlink" title="一、注解Annotation"></a>一、注解Annotation</h2><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><ul>
<li>不是程序本身，可以对程序做出解释（这一点和注释(comment)没什么区别）</li>
<li>可以被其他程序（如编译器）读取。</li>
<li>注解以 @注释名 在代码中使用，还可以添加一些参数值。</li>
</ul>
<h3 id="2-内置注解"><a href="#2-内置注解" class="headerlink" title="2.内置注解"></a>2.内置注解</h3><ul>
<li>@Override，只用于修饰方法，表示方法重写。</li>
<li>@Deprecated，可以修饰方法，类，属性，表示不推荐程序员使用，可能存在问题，但是可以使用，或者存在更好的方式。</li>
<li>@SuppressWarnings，用来抑制编译时的警告信息，需要添加一个参数才能使用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Override  重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Deprecated，不推荐程序员使用，但是可以使用，或者存在更好的方式</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@SuppressWarnings 镇压警告</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">thest02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3.元注解"></a>3.元注解</h3><ul>
<li>作用：用来注解其他注解。</li>
<li>Java定义了4个标准的meta-annotation类型,他们被用来对其他annotation类型作说明 。<ul>
<li>@Target : 用于描述注解的使用范围，即:被描述的注解可以用在什么地方。</li>
<li>@Retention : 表示需要在什么级别保存该注释信息 , 用于描述注解的生命周期（SOURCE &lt; CLASS &lt; RUNTIME）</li>
<li>@Document：表示是否将注解生成在Javadoc中。</li>
<li>@Inherited：说明子类可以继承父类中的该注解。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target 表示我们的注解可以用在哪些地方</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Retention 表示我们的的注解在什么地方还有效</span></span><br><span class="line"><span class="comment">//runtime&gt;class&gt;sources</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Document 表示是否将我们的注解生成在Javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Inherited 子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h3><ul>
<li><p>用 @interface 自定义注解，public @interface 注解名 { 定义内容 }，自动继承java.lang.annotation.Annotation接口。</p>
</li>
<li><p>分析：</p>
<ul>
<li><p>注解元素必须要有值，一般用空字符串和0作默认值，-1作默认值，代表不存在。</p>
</li>
<li><p>通过default来声明参数的默认值。</p>
</li>
<li><p>若只有一个参数成员，参数名一般为value，可以省略value。</p>
</li>
<li><p>方法的名称就是参数的名称，返回值类型就是参数的类型，（返回值类型只能是基本类型，Class，String，enum）</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注解可以显式赋值，如果没有默认值，就必须给注解赋值，不显示则是默认值。</span></span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;张三&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;李四&quot;)</span><span class="comment">//只有一个参数，参数成员为value 可以省略value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型 + 参数名 + （）</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;<span class="comment">//没有默认值</span></span><br><span class="line">    <span class="function">String <span class="title">name01</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//如果默认值为负一，代表不存在。</span></span><br><span class="line">    </span><br><span class="line">    String[] school() <span class="keyword">default</span> &#123;<span class="string">&quot;花园宝宝&quot;</span>,<span class="string">&quot;花园宝宝乐园&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、反射Reflection"><a href="#二、反射Reflection" class="headerlink" title="二、反射Reflection"></a>二、反射Reflection</h2><h3 id="1、静态语言和动态语言"><a href="#1、静态语言和动态语言" class="headerlink" title="1、静态语言和动态语言"></a>1、静态语言和动态语言</h3><ol>
<li>静态语言：在运行代码时可以根据某些条件改变自身结构。如引进新的函数，对象或者代码，已有的函数可以被删除或者是其他结构上的变化。如Javascript、python。</li>
<li>动态语言：运行时结构不可以改变的语言。如Java、C、C++。</li>
<li>Java不是动态语言，但可以称之为“准动态语言”。具有一定的动态性，利用反射机制获得类似动态语言的特性。</li>
</ol>
<h3 id="2、反射"><a href="#2、反射" class="headerlink" title="2、反射"></a>2、反射</h3><ul>
<li>反射是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取 得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li>
<li>通过反射获取类的class对象：Class c = Class.forName(“java.lang.String”)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.feng.reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.feng.reflection.User&quot;</span>);</span><br><span class="line">        Class c3 = Class.forName(<span class="string">&quot;com.feng.reflection.User&quot;</span>);</span><br><span class="line">        Class c4 = Class.forName(<span class="string">&quot;com.feng.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个类在加载后，类的整个结构都被会封装在Class对象中。</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());<span class="comment">//c2 c3 c4 hashcode相同</span></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、得到Class类的几种方式"><a href="#3、得到Class类的几种方式" class="headerlink" title="3、得到Class类的几种方式"></a>3、得到Class类的几种方式</h3><ul>
<li>通过对象获得：对象.getClass()</li>
<li>通过字符串(包名+类名)获得：Class.forName(“java.lang.String”)</li>
<li>通过类的静态成员class获得：类.class</li>
<li>内置基本数据类型：类名.TYPE</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到Class类的几种方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是&quot;</span> + person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：通过对象获得</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：forname获得</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.feng.reflection.Student0&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：通过.class获得</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法四：基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Class类的常用方法，如：</span></span><br><span class="line">   		<span class="comment">//获得父类类型</span></span><br><span class="line">        Class c5 = c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">		<span class="comment">//···</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、Class对象的所有类型"><a href="#4、Class对象的所有类型" class="headerlink" title="4、Class对象的所有类型"></a>4、Class对象的所有类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 =Object.class;<span class="comment">//类</span></span><br><span class="line">        Class c2 =Comparable.class;<span class="comment">//接口</span></span><br><span class="line">        Class c3 =String[].class;<span class="comment">//一维数组</span></span><br><span class="line">        Class c4 =<span class="keyword">int</span>[][].class;<span class="comment">//二位数组</span></span><br><span class="line">        Class c5 =Override.class;<span class="comment">//注解</span></span><br><span class="line">        Class c6 = ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        Class c7 =Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8 =<span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        Class c9 =Class.class;<span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只要元素类型和维度一样，就是同一个Class</span></span><br><span class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、类加载内存分析"><a href="#5、类加载内存分析" class="headerlink" title="5、类加载内存分析"></a>5、类加载内存分析</h3><ul>
<li><strong>步骤</strong><ul>
<li>加载：将类的class文件加载到内存，产生一个代表该类的Class对象。</li>
<li>链接：将java二进制代码合并到JVM的运行状态之中的过程。<ul>
<li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题。</li>
<li>准备：为类变量（static）分配内存并设置类变量默认初始值。这些内存在方法区中进行分配。</li>
<li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）。</li>
</ul>
</li>
<li>初始化：执行类构造器()方法的过程。类构造器()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.加载到内存，会产生一个类对应的Class对象</span></span><br><span class="line"><span class="comment">        2.链接，链接结束后m = 0；（类变量初始化）</span></span><br><span class="line"><span class="comment">        3.初始化</span></span><br><span class="line"><span class="comment">            &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(&quot;A类静态代码块初始化&quot;);</span></span><br><span class="line"><span class="comment">                    m = 300;</span></span><br><span class="line"><span class="comment">                    m = 100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            m = 100;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造器初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>什么时候会发生类的初始化</strong><ul>
<li>类的主动引用（一定会发生类的初始化）<ul>
<li>JVM启动，先初始化main方法所在的类，然后调用类的静态成员（除了final常量，因为常量在链接的时候就存入调用类的常量池中了）和静态方法。</li>
<li>当初始化一个类，若父类没有初始化，先初始化父类。</li>
<li>包括：<ul>
<li>new了一个类的对象</li>
<li>反射</li>
</ul>
</li>
</ul>
</li>
<li>类的被动引用（不会发生类的处初始化）<ul>
<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化。</li>
<li>通过数组定义类引用，不会触发此类的初始化。</li>
<li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.主动引用：对象</span></span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line">        Main类被加载</span><br><span class="line">        父类被加载</span><br><span class="line">        子类被加载</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.反射也会产生主动引用</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.feng.reflection.Son&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Main类被加载</span><br><span class="line">        父类被加载</span><br><span class="line">        子类被加载</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被动引用1</span></span><br><span class="line">        System.out.println(Son.b);</span><br><span class="line"></span><br><span class="line">        Main类被加载</span><br><span class="line">        父类被加载</span><br><span class="line">        <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//被动引用2</span></span><br><span class="line">        Son[] array = <span class="keyword">new</span> Son[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//Main类被加载</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>类加载器的作用</strong></p>
<ul>
<li><p>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p>
</li>
<li><p>类加载器的作用：来把类(class)装载进内存中。</p>
<ul>
<li><p>引导类加载器：用C++编写，JVM自带的类加载器，负Java平台核心库。</p>
</li>
<li><p>扩展类加载器：使用java代码实现，主要加载jre/lib/ext/ 下的扩展类库。</p>
</li>
<li><p>系统类加载器：使用java代码实现，加载classpath目录下的类。</p>
</li>
<li><p>自定义类加载器：继承ClassLoader类实现自定义类加载器。</p>
</li>
<li><p>自底向上检查类是否装载，自顶向下尝试加载类。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类的加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类的加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);<span class="comment">//sun.misc.Launcher$ExtClassLoader@74a14482</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得扩展类加载器的父类加载器--&gt;根加载器（C/C++）</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">&quot;com.feng.reflection.Test07&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是哪个加载器加载的</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何获得系统类加载器的加载路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双亲委派机制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-获得类的信息"><a href="#6-获得类的信息" class="headerlink" title="6.获得类的信息"></a>6.获得类的信息</h3><ul>
<li><p>getName()：获得包名 + 类名，getSimpleName()：获得类名。</p>
</li>
<li><p>getFields()：只能找到public属性，getDeclaredFields()：找到全部的属性，getDeclaredField(“name”)：获得指定属性的值。</p>
</li>
<li><p>getMethods()：获得本类及其父类的全部public方法，getDeclaredMethods()：获得本类的所有方法，</p>
<p>getMethod(“setName”, String.class)：获得指定的方法（“方法名字”，参数类型）。</p>
</li>
<li><p>getConstructors()：获得构造器，getDeclaredConstructor(String.class, int.class, int.class)：获得指定有参构造器。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.feng.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获得包名 + 类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line"></span><br><span class="line">        fields = c1.getDeclaredFields();<span class="comment">//找到全部的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定属性的值</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获得本类及其父类的全部public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的：&quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();<span class="comment">//获得本类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods:&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        <span class="comment">//重载</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span> + getName);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span> + setName);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        Constructor[] constructors = c1.getConstructors();<span class="comment">//获得public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();<span class="comment">//获得本类全部方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span> + declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-动态创建对象执行方法"><a href="#7-动态创建对象执行方法" class="headerlink" title="7.动态创建对象执行方法"></a>7.动态创建对象执行方法</h3><ul>
<li>创建类的对象：newInstance()<ul>
<li>对象.newInstance()：本质调用无参构造器，所以必须有一个有效的访问权限足够的无参构造器。</li>
<li>构造器.newInstance()：先获取有参构造器，调用指定的有参构造器，需传递参数。</li>
</ul>
</li>
<li>调用指定的方法：invoke()<ul>
<li>invoke(user3, “张三”)：激活，通过invoke调用方法，（对象，“方法的值”）。</li>
</ul>
</li>
<li>调用指定的属性：set()<ul>
<li>set(user4,”李四”)：通过set调用属性，（对象，“属性的值”）。</li>
</ul>
</li>
<li>安全检测关闭：setAccessible(true)<ul>
<li>私有的属性和方法不能被直接被操作，需要关闭程序的安全检测。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//获得Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.feng.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        User user1 = (User) c1.newInstance();<span class="comment">//本质是调用了无参构造器</span></span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        User user2 = (User) constructor.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">001</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        User user3 = (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获取一个方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//invoke : 激活的意思</span></span><br><span class="line">        <span class="comment">//（对象，“方法的值”）</span></span><br><span class="line">        setName.invoke(user3, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操纵属性</span></span><br><span class="line">        User user4 = (User) c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能直接操作私有属性，我们需要关闭程序的安全检测，通过方法或者属性的setAccessible(true)</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        name.set(user4,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>setAccessible性能分析。</li>
<li>可以提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;普通方式执行10亿次：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = user.getClass();</span><br><span class="line"></span><br><span class="line">        Method getName = c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式执行10亿次：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用  关闭检测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = user.getClass();</span><br><span class="line"></span><br><span class="line">        Method getName = c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;关闭检测执行10亿次：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        普通方式执行<span class="number">10</span>亿次：4ms</span><br><span class="line">        反射方式执行<span class="number">10</span>亿次：2205ms</span><br><span class="line">        关闭检测执行<span class="number">10</span>亿次：1063ms--&gt;提高效率</span><br></pre></td></tr></table></figure>

<h3 id="8-获得泛型信息"><a href="#8-获得泛型信息" class="headerlink" title="8.获得泛型信息"></a>8.获得泛型信息</h3><ul>
<li>getGenericParameterTypes()：获得泛型参数类型。</li>
<li>getGenericReturnType()：获得泛型返回值类型。</li>
<li>getGenericExceptionTypes()：获得泛型异常类型。</li>
<li>ParameterizedType : 表示一种参数化类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Method method = Test11.class.getDeclaredMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&amp;&quot;</span>+ genericParameterType);</span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;<span class="comment">//如果泛型参数类型属于参数化类型</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        method = Test11.class.getDeclaredMethod(<span class="string">&quot;test02&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        Type genericReturnType = method.getGenericReturnType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-获得注解信息"><a href="#9-获得注解信息" class="headerlink" title="9.获得注解信息"></a>9.获得注解信息</h3><ul>
<li>getAnnotations()：获得注解。</li>
<li>getAnnotation(TableFeng.class)：获得注解的参数的值。</li>
<li>获得类指定属性的注解，先获得指定的属性，再通过属性获得注解。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取注解信息 反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.feng.reflection.student2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得注解的value的值</span></span><br><span class="line">        TableFeng tableFeng = (TableFeng)c1.getAnnotation(TableFeng.class);</span><br><span class="line">        String value = tableFeng.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        FieldFeng annotation = name.getAnnotation(FieldFeng.class);</span><br><span class="line">        System.out.println(annotation.columnName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableFeng(&quot;db_student&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FieldFeng(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@FieldFeng(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@FieldFeng(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">student2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">student2</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> TableFeng &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@interface</span> FieldFeng &#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;<span class="comment">//列名</span></span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;<span class="comment">//类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;<span class="comment">//长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>注解和反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2021/07/28/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h2><h4 id="1什么是面向对象"><a href="#1什么是面向对象" class="headerlink" title="1什么是面向对象"></a>1什么是面向对象</h4><ol>
<li>Java的编程语言是面向对象的，采用这种语言进行编程成为面向对象编程（object-oriented-programming，OOP）</li>
<li>面向对象编程的本质：以类的方式组织代码，以对象的组织（封装）数据。</li>
<li>面向对象的三大基本特征：封装，继承，多态。</li>
<li>从认识角度，先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。从代码角度，现有类后有对象。类是对象的模板。</li>
</ol>
<h4 id="2类与对象的关系"><a href="#2类与对象的关系" class="headerlink" title="2类与对象的关系"></a>2类与对象的关系</h4><ol>
<li><p>类是抽象的数据类型，对某一类事物整体描述和定义，但不能代表某一个具体的事物。</p>
</li>
<li><p>对象是抽象概念的具体实例。</p>
<p><code>Student xiaoming = new Student();</code></p>
</li>
<li><p>对象小明就是Student类的一个实例。Student类只是给对象xiaoming的创建提供的一个参考模板，是抽象出来的。</p>
</li>
</ol>
<h4 id="3对象和引用的关系"><a href="#3对象和引用的关系" class="headerlink" title="3对象和引用的关系"></a>3对象和引用的关系</h4><ol>
<li><p>引用“指向”对象</p>
</li>
<li><p>使用类类型、数组类型、接口类型声明出的变量,都可以指向对象，这种变量就是引用类型变量，简称引 用。 在程序中，创建出对象后，直接使用并不方便,所以一般会用一个引用类型的变量去接收这个对象，这个就是 所说的引用指向对象。</p>
<p><code>Student student= new Student(&quot;张三&quot;);</code></p>
</li>
<li><p>student指向了“小明”这个对象</p>
</li>
</ol>
<h2 id="二、创建对象和初始化"><a href="#二、创建对象和初始化" class="headerlink" title="二、创建对象和初始化"></a>二、创建对象和初始化</h2><ul>
<li><p>使用new关键字创建对象，用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</p>
<p><code>Student s = new Student();</code></p>
</li>
</ul>
<h2 id="三、构造器"><a href="#三、构造器" class="headerlink" title="三、构造器"></a>三、构造器</h2><ol>
<li><strong>构造器</strong>，也被称为构造方法，是在进行创建对象的时候必须要调用的。<ul>
<li>必须和类的名字相同。</li>
<li>必须没有返回类型，也不能用void。</li>
</ul>
</li>
<li><strong>构造器的作用</strong><ul>
<li>使用new创建对象的时候必须使用类的构造方法。</li>
<li>构造器可以给对象中的属性初始化赋初值。</li>
</ul>
</li>
<li><strong>默认构造器</strong><ul>
<li>编写类的时候，没有写构造器，编译之后也会自动添加一个无参构造器，这个构造器就是默认构造器。</li>
</ul>
</li>
<li><strong>注意点</strong><ul>
<li>有参构造器，在创建对象的时候可以给属性赋值（构造器重载）</li>
<li>定义有参构造之后，如果想使用无参构造，需要显式的定义一个无参构造。</li>
<li>Alt + Insert  创建构造器的快捷键。</li>
<li>this关键字：表示当前类中的。</li>
</ul>
</li>
</ol>
<h2 id="四、内存分析"><a href="#四、内存分析" class="headerlink" title="四、内存分析"></a>四、内存分析</h2><ol>
<li><strong>栈（stack）</strong><ul>
<li>每个线程私有，不能实现线程间的共享！</li>
<li>存放基本变量类型（包含这个基本类型的具体数值）</li>
<li>引用对象的变量（存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li><strong>堆（heap）</strong><ul>
<li>存放new的对象和数组</li>
<li>可以被所有的线程共享，不会存放别的对象引用</li>
</ul>
</li>
<li><strong>方法区（也是堆）</strong><ul>
<li>被所有线程共享</li>
<li>存放程序中永远是不变或唯一的内容（类代码信息，静态变量，字符串常量）</li>
</ul>
</li>
</ol>
<h2 id="五、封装"><a href="#五、封装" class="headerlink" title="五、封装"></a>五、封装</h2><h4 id="1-封装的步骤"><a href="#1-封装的步骤" class="headerlink" title="1.封装的步骤"></a>1.封装的步骤</h4><ul>
<li>属性私有，get/set，</li>
</ul>
<ol>
<li>使用private修饰需要封装的成员变量</li>
<li>提供一个公开的方法设置或者访问私有的属性<ul>
<li>访问通过get()方法：getName()</li>
<li>设置通过set()方法：setName()</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line"><span class="comment">//提供一些public 的 get set方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//get得到这个数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set给这个属性设置值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Alt + Insert 快捷键</span></span><br></pre></td></tr></table></figure>

<h4 id="2-封装的作用和意义"><a href="#2-封装的作用和意义" class="headerlink" title="2.封装的作用和意义"></a>2.封装的作用和意义</h4><ul>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一用户的调用接口</li>
<li>系统可维护增加了</li>
<li>便于调用者调用</li>
</ul>
<h4 id="3-方法重载"><a href="#3-方法重载" class="headerlink" title="3.方法重载"></a>3.方法重载</h4><ul>
<li>类中有多个方法,有着相同的方法名,但是方法的参数各不相同，这种情况被称为<strong>方法重载</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法重载满足条件：</p>
<ol>
<li>方法名不同</li>
<li>参数列表必须不同（参数的类型、个数、顺序的不同）</li>
<li>方法的返回值可以不同，也可以相同。</li>
</ol>
<h2 id="六、继承"><a href="#六、继承" class="headerlink" title="六、继承"></a>六、继承</h2><h4 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h4><ul>
<li><p>继承是类和类之间的一种关系，继承关系的俩个类，一个是子类（派生类），一个是父类（基类）。子类继承父类用关键字extends表示。</p>
<p><code>public class Student extends Person &#123;&#125;</code></p>
</li>
<li><p>子类和父类之间，从意义上讲具有“is a”的关系。</p>
<p>student is a person，dog is a animal ，</p>
</li>
<li><p>类和类之间的继承是单继承。一个子类只能直接继承一个父类，一个父类可以被多个子类继承。</p>
</li>
<li><p>子类继承父类的方法和属性后，子类中能不能直接使用父类的这些方法和属性，是和这些属性和方法的修饰符相关的。</p>
</li>
</ul>
<h4 id="2-Object类"><a href="#2-Object类" class="headerlink" title="2.Object类"></a>2.Object类</h4><ul>
<li>java中每一个类都是直接或者间接调用的继承了Object类，所以每一对象都和Object类有“is a”的关系，任何一个类最上层的父类都是Object（除了自己本身）任何一个对象都可以调用从Object继承过来的方法。</li>
</ul>
<h4 id="3-Super关键字"><a href="#3-Super关键字" class="headerlink" title="3.Super关键字"></a>3.Super关键字</h4><ul>
<li>子类继承父类后，在子类中可以用this来表示访问或调用子类中的属性和方法，用super表示访问或调用父类中的属性和方法。</li>
<li>父类中的构造器不能被子类继承,但是子类的构造器中,会隐式的调用父类中的无参构造器(默认使用 super关键字)。</li>
<li>super注意点<ol>
<li>super调用父类的构造方法，必须在构造方法的第一个。</li>
<li>super必须只能出现在子类的方法或构造方法中。</li>
<li>super和this不能同时调用构造方法！</li>
</ol>
</li>
<li>super 和 this 区别<ol>
<li>代表的对象不同<br>   this：   本身调用者这个对象<br>   super：  代表父类对象的引用</li>
<li>使用前提<br>   this：没有继承也可以使用<br>   super：只能在继承条件下才可以使用</li>
<li>调用构造方法<br>   this()；调用本类的构造<br>   super()；调用父类的构造</li>
</ol>
</li>
</ul>
<h4 id="4-方法重写"><a href="#4-方法重写" class="headerlink" title="4.方法重写"></a>4.方法重写</h4><ul>
<li><p>方法重写需要有继承关系，只存在于子类和父类之间，子类重写父类的方法。</p>
<ol>
<li>方法名字必须相同，参数列表必须相同，方法体不同。</li>
<li>修饰符：范围可以被扩大，但不能被缩小。  public&gt;protected&gt;default&gt;private</li>
<li>抛出的异常：范围可以被缩小，但不能被扩大。  ClassNotFoundException–&gt;Exception(大）</li>
<li>返回类型可以相同，也可以不同，如果不同的话，子类重写后的方法返回类型必须是父类方法返回类型的子类型。</li>
</ol>
</li>
<li><p>静态方法不能重写</p>
<ol>
<li>父类的静态方法不能被子类重写为非静态方法</li>
<li>父类的非静态方法不能被子类重写为静态方法</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A类继承B类 A和B中都一个相同的静态方法test</span><br><span class="line">B a = <span class="keyword">new</span> A();</span><br><span class="line">a.test();<span class="comment">//调用到的是B类中的静态方法test</span></span><br><span class="line"></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">a.test();<span class="comment">//调用到的是A类中的静态方法test</span></span><br><span class="line">可以看出静态方法的调用只和左边变量声明的类型相关，和非静态方法重写之后的效果不同</span><br></pre></td></tr></table></figure>

<ul>
<li><p>为什么要重写？</p>
<p>父类的功能，子类不一定需要，或者不一定满足子类的功能需求！</p>
</li>
<li><p>快捷键 Alt + Insert      Override</p>
</li>
</ul>
<h2 id="七、多态"><a href="#七、多态" class="headerlink" title="七、多态"></a>七、多态</h2><h4 id="1-多态"><a href="#1-多态" class="headerlink" title="1.多态"></a>1.多态</h4><ul>
<li><p>多态性是OOP中的一个重要特性，程序的最终状态只有在执行过程中才被决定而非在编译期间就决定了。</p>
</li>
<li><p>一个对象的实际类型是确定的，可以指向对象的引用的类型就不确定了，（父类的引用指向子类）</p>
<p>子类能调用自己的方法或者继承的父类的方法，父类可以指向子类，但不能调用子类独有的方法。</p>
<p>子类调用继承的父类的方法，如果子类重写了该方法，则调用重写之后的方法。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">    <span class="comment">//new Student();</span></span><br><span class="line">    <span class="comment">//new Person():</span></span><br><span class="line">    <span class="comment">//Person 有 ran(),Student 有 eat()和重写的run()	</span></span><br><span class="line">    <span class="comment">//可以指向对象的引用的类型就不确定了，父类的引用指向子类</span></span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student();<span class="comment">//Student（子类）能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">    Person s2 = <span class="keyword">new</span> Student();<span class="comment">//Person（父类）可以指向子类，但不能调用子类独有的方法</span></span><br><span class="line">    Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">    s2.run();<span class="comment">//子类重写了父类的方法，执行子类的方法</span></span><br><span class="line">    s1.run();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大！</span></span><br><span class="line">    s1.eat();</span><br><span class="line">    <span class="comment">//s2.eat();父类不能调用子类独有的方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-重写、重载和多态的关系"><a href="#2-重写、重载和多态的关系" class="headerlink" title="2.重写、重载和多态的关系"></a>2.重写、重载和多态的关系</h4><ul>
<li><p>重载是编译时多态</p>
<p>调用重载的方法,在编译期间就要确定调用的方法是谁,如果不能确定则编译报错</p>
</li>
<li><p>重写是运行时多态</p>
<p>调用重写的方法,在运行期间才能确定这个方法到底是哪个对象中的。这个取决于调用方法的引用,在运行期间所指向的对象是谁,这个引用指向哪个对象那么调用的就是哪个对象中的方法。(java中的方法调用, 是运行时动态和对象绑定的)</p>
</li>
</ul>
<h4 id="3-多态注意事项"><a href="#3-多态注意事项" class="headerlink" title="3.多态注意事项"></a>3.多态注意事项</h4><ol>
<li><p>多态是方法的多态，属性没有多态。</p>
</li>
<li><p>调用方法有时候需要进行类型转换，父类和子类要有联系， 如果没有联系，类型转换异常，报错：  ClassCastException！</p>
</li>
</ol>
<h4 id="4-多态存在条件"><a href="#4-多态存在条件" class="headerlink" title="4.多态存在条件"></a>4.多态存在条件</h4><ul>
<li><p>继承关系。</p>
</li>
<li><p>方法需要重写。</p>
<p>无法重写的情况：</p>
<pre><code>    1.static方法，属于类，他是不属于实例
    2.final 常量
    3.private方法 私有的
</code></pre>
</li>
<li><p>父类引用指向子类对象。</p>
</li>
</ul>
<h4 id="5-instanceof-和-类型转换"><a href="#5-instanceof-和-类型转换" class="headerlink" title="5.instanceof  和  类型转换"></a>5.instanceof  和  类型转换</h4><ol>
<li><p><strong>instanceof</strong></p>
<ul>
<li><p>System.out.println(X instanceof Y);</p>
<ol>
<li><p>编译是否能通过，主要是看声明变量X的类型和Y是否存在父子关系。存在，编译通过，不存在，编译不通过。</p>
</li>
<li><p>输出为false还是true，主要是看变量X指向的对象实际类型是不是Y类型的子类型。</p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//object&gt;string</span></span><br><span class="line">    <span class="comment">//object&gt;person&gt;teacher</span></span><br><span class="line">    <span class="comment">//object&gt;person&gt;student</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//System.out.println(X instanceof Y);//编译是否通过</span></span><br><span class="line"></span><br><span class="line">    Object object = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//t</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//t</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//t</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//f</span></span><br><span class="line">    System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//f</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Person person = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Student);<span class="comment">//t</span></span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Person);<span class="comment">//t</span></span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//t</span></span><br><span class="line">    System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//f</span></span><br><span class="line">    <span class="comment">//System.out.println(person instanceof String); //编译报错</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(student <span class="keyword">instanceof</span> Student);<span class="comment">//t</span></span><br><span class="line">    System.out.println(student <span class="keyword">instanceof</span> Person);<span class="comment">//t</span></span><br><span class="line">    System.out.println(student <span class="keyword">instanceof</span> Object);<span class="comment">//t</span></span><br><span class="line">    <span class="comment">//System.out.println(student instanceof Teacher); //编译报错</span></span><br><span class="line">    <span class="comment">//System.out.println(student instanceof String); //编译报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>类型转换</strong></li>
</ol>
<ul>
<li>为什么要类型转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//object&gt;person&gt;teacher</span></span><br><span class="line">	<span class="comment">//object&gt;person&gt;student</span></span><br><span class="line">   </span><br><span class="line">	为什么类型转换</span><br><span class="line">	Person person = <span class="keyword">new</span> Student();</span><br><span class="line">	<span class="comment">//将这个对象强制转换为student类型，就可以使用student类型的方法了！</span></span><br><span class="line">	person.go()<span class="comment">//编译报错，需要将变量person的类型进行强制转换为student类型</span></span><br><span class="line">	Student student = (student)person</span><br><span class="line">	student.go()</span><br><span class="line">	<span class="comment">//或者</span></span><br><span class="line">	((Student) person).go();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>类型转换基本问题</p>
<p>X x = (X)o<br>运行是否报错,主要是变量o所指向的对象实现类型,是不是X类型的子类型,如果不是则运行就会报错。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//object&gt;person&gt;teacher</span></span><br><span class="line">	<span class="comment">//object&gt;person&gt;student</span></span><br><span class="line">    </span><br><span class="line">	类型转换中一些问题</span><br><span class="line">	Object o = <span class="keyword">new</span> Student();<span class="comment">//编译通过 运行没问题</span></span><br><span class="line">	Person p = (Person)o;</span><br><span class="line">	</span><br><span class="line">	Object o = <span class="keyword">new</span> Student();<span class="comment">//编译通过 运行没问题</span></span><br><span class="line">	Student s = (Student)o;</span><br><span class="line">	</span><br><span class="line">	Object o = <span class="keyword">new</span> Teacher();<span class="comment">//编译通过,运行报错</span></span><br><span class="line">	Student s = (Student)o;</span><br><span class="line">&#125;</span><br><span class="line">	即: X x = (X)o</span><br><span class="line">	运行是否报错,主要是变量o所指向的对象实现类型,是不是X类型的子类型,如果不是则运行就会报错。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>总结</p>
<ol>
<li><p>父类引用指向子类的对象</p>
</li>
<li><p>把子类对象直接赋值给父类引用（子类转换为父类），向上转型，丢失子类本来的一些方法</p>
<p>Father father = new Son();</p>
</li>
<li><p>把指向子类对象的父类引用赋值给子类引用（父类转换为子类），向下转型，需要强制类型转换，（son）必须添加，进行强制转换</p>
<p>Son son =  (Son)father;</p>
</li>
<li><p>方便方法的调用，减少重复的代码，简洁</p>
</li>
</ol>
</li>
</ul>
<h2 id="八、修饰符"><a href="#八、修饰符" class="headerlink" title="八、修饰符"></a>八、修饰符</h2><h4 id="1-static修饰符"><a href="#1-static修饰符" class="headerlink" title="1.static修饰符"></a>1.static修饰符</h4><ol>
<li><p>static变量</p>
<p>静态变量和非静态变量的区别:</p>
<ul>
<li><p>静态变量属于类，在类的加载过程中分配内存，可以使用类名来访问（推荐），也可以使用对象来访问</p>
</li>
<li><p>非静态变量属于对象，在实例变量创建对象时分配内存，必须使用对象来访问</p>
</li>
</ul>
</li>
<li><p>static方法</p>
<p>静态方法和非静态方法的区别：</p>
<ul>
<li><p>静态方法属于类，可以使用类名来调用（推荐），也可以使用对象来调用</p>
<p>静态方法不可以直接访问类中的非静态变量和非静态方法，但可以直接访问类中静态变量和静态方法</p>
<p>父类的静态方法可以被子类继承，但是不能被子类重写为非静态方法</p>
</li>
<li><p>非静态方法属于对象，必须使用对象来调用</p>
<p>非静态方法可以可以直接访问类中静态方法和静态变量，也可以直接访问类中的非静态方法和非静态变量</p>
<p>父类的非静态方法不可以被子类重写为静态方法</p>
</li>
</ul>
</li>
<li><p>匿名代码块和静态代码块</p>
<ul>
<li><p>匿名代码块在创建对象的时候自动执行，在构造器执行之前，每次创建对象都会自动执行</p>
<p>作用：给对象的成员变量初始化赋初值（同构造器的作用）</p>
</li>
<li><p>静态代码块在类加载完成之后就自动执行，只执行一次</p>
<p>作用：给类中的静态成员变量初始化赋初值</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二个执行  赋初值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一个执行  只执行一次</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三个执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">静态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br><span class="line">=============</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>创建和初始化对象的过程</p>
<p><code>Student s = new Student();</code></p>
<p>​    Student类之前没有进行类加载 </p>
<ol>
<li>类加载,同时初始化类中静态的属性 </li>
<li>执行静态代码块 </li>
<li>分配内存空间,同时初始化非静态的属性(赋默认值,0/false/null) </li>
<li>调用Student的父类构造器 </li>
<li>对Student中的属性进行显示赋值(如果有的话) </li>
<li>执行匿名代码块 </li>
<li>执行构造器 </li>
<li>返回内存地址</li>
</ol>
</li>
<li><p>静态导入</p>
<p>用import static 导入类里的静态方法</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.random());<span class="comment">//随机数</span></span><br><span class="line">        System.out.println(random());<span class="comment">//随机数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-final修饰符"><a href="#2-final修饰符" class="headerlink" title="2.final修饰符"></a>2.final修饰符</h4><ul>
<li>final修饰的方法可以被继承，不能被子类重写</li>
<li>final修饰的属性不可变，常量</li>
<li>final修饰的类不能被继承，没有子类</li>
</ul>
<h4 id="3-abstract修饰符"><a href="#3-abstract修饰符" class="headerlink" title="3.abstract修饰符"></a>3.abstract修饰符</h4><ul>
<li>抽象类和抽象方法：抽象类中可以有抽象和非抽象方法，抽象方法一定在抽象类中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">//约束  子类帮我们实现</span></span><br><span class="line">    <span class="comment">//abstract, 抽象方法，只有方法的名字，没有方法的的实现。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.不能new这个抽象类，只能靠子类去实现，：约束</span></span><br><span class="line">    <span class="comment">//2.抽象类中可以写普通的方法</span></span><br><span class="line">    <span class="comment">//3.抽象方法必须在抽象类中</span></span><br><span class="line">    <span class="comment">//抽象的抽象：约束</span></span><br><span class="line">    <span class="comment">//存在意义：提高开发效率</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象类不能用new来创建对象，只能用子类继承</li>
<li>抽象方法，只有方法声明，没有方法实现，用子类来实现</li>
<li>子类继承抽象类，子类就必须实现抽象类中没有实现的抽象方法，除非子类也是abstract类</li>
</ul>
<h2 id="九、接口"><a href="#九、接口" class="headerlink" title="九、接口"></a>九、接口</h2><h4 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h4><ul>
<li><p>接口就是比抽象类还抽象的抽象类。接口是多继承</p>
<p>用关键词interface声明，</p>
<p>用关键词implements实现，</p>
</li>
<li><p>接口中的方法都是抽象方法（public abstract）</p>
<p>接口中的变量都是静态常量（public static final）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//静态常量 ~ public static final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口中的所有定义的方法都是抽象方法 ~ public abstract</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>一个类可以实现多个接口（多继承），一个接口可以继承多个父接口。</p>
<p>接口不能被实例化，接口中没有构造方法</p>
<p>类实现某个接口必须重写接口中所有的抽象方法，除非这个类为抽象类</p>
<p>不允许创建接口的实例，但允许定义接口类型的引用变量，该引用变量引用实现了这个接口的类的实例</p>
</li>
<li><p>接口的作用：</p>
<p>达到统一访问，创建对象的时候用接口创建，【接口名】 【对象名】 = new【实现接口的类】</p>
</li>
</ul>
<h2 id="十、内部类"><a href="#十、内部类" class="headerlink" title="十、内部类"></a>十、内部类</h2><h4 id="1-内部类"><a href="#1-内部类" class="headerlink" title="1.内部类"></a>1.内部类</h4><ul>
<li>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。</li>
<li>实例化内部类需要先实例化外部类，通过外部类去调用内部类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">	outer.out();</span><br><span class="line"> 	<span class="comment">//通过外部类来实例化内部类</span></span><br><span class="line"></span><br><span class="line">	Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">	inner.in();</span><br><span class="line">	inner.getid();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-成员内部类"><a href="#2-成员内部类" class="headerlink" title="2.成员内部类"></a>2.成员内部类</h4><ul>
<li>成员内部类中不能写静态属性和静态方法，</li>
<li>成员内部类可以访问外部类的所有属性（包括私有的成员变量，方法）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类，加上static 就是静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内部类获得外部类的私有属性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getid</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类  外部类创建的方法中的内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner01</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3.静态内部类"></a>3.静态内部类</h4><ul>
<li>用static修饰的内部类就是静态内部类</li>
</ul>
<h4 id="4-局部内部类"><a href="#4-局部内部类" class="headerlink" title="4.局部内部类"></a>4.局部内部类</h4><ul>
<li>外部类创建的方法中的内部类</li>
</ul>
<h4 id="5-匿名内部类"><a href="#5-匿名内部类" class="headerlink" title="5.匿名内部类"></a>5.匿名内部类</h4><ul>
<li>一个对象只需要使用一次，只需要new Object().method()，就可以了。不需要给这个实例保存到该类型变量中去，这是匿名对象。匿名内部类，也是只需要使用一次，不需要在类中先定义一个这样的内部类，等待在需要的时候，临时实现这个内部类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Apple apple = new Apple();</span></span><br><span class="line">        <span class="comment">//没有名字初始化类，不将实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> Apple().eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Web开发</title>
    <url>/2021/10/27/SpringBoot-web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Spring-Boot-Web开发"><a href="#Spring-Boot-Web开发" class="headerlink" title="Spring-Boot  Web开发"></a>Spring-Boot  Web开发</h1><hr>
<h2 id="一-静态资源映射规则"><a href="#一-静态资源映射规则" class="headerlink" title="一.静态资源映射规则"></a>一.静态资源映射规则</h2><h3 id="1-第一种-webjars"><a href="#1-第一种-webjars" class="headerlink" title="1.第一种 webjars"></a>1.第一种 webjars</h3><ul>
<li>以jar包的方式引入静态资源</li>
<li>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面</li>
<li>查看 addResourceHandlers  添加资源处理, 可以看到springboot 是寻找一个路径访问</li>
<li>访问  <a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl =</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">// webjars 配置 </span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">        <span class="comment">//去这个地方寻找	classpath:/META-INF/resources/webjars/</span></span><br><span class="line">        .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)         	   .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))        	.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-第二种-项目"><a href="#2-第二种-项目" class="headerlink" title="2.第二种 项目"></a>2.第二种 项目</h3><ul>
<li>查看 staticPathPattern /** , 访问当前项目的任意资源, 查看 ResourceProperties类 (设置静态资源有关的参数)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入方法</span></span><br><span class="line"><span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到对应的值</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"><span class="comment">// 找到路径 指向了寻找资源的文件夹</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;</span><br><span class="line">    <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;classpath:/resources/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;classpath:/static/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;classpath:/public/&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3.第三种 自定义路径</p>
<ul>
<li>自定义静态资源路径,一旦自定义,原来的自动配置就会失效</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/mkbk/,classpath:/feng/</span></span><br></pre></td></tr></table></figure>

<h2 id="二-首页"><a href="#二-首页" class="headerlink" title="二.首页"></a>二.首页</h2><ul>
<li>查看 welcomePageHandlerMapping </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping</span></span><br><span class="line"><span class="function">    <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                              FormattingConversionService mvcConversionService,</span></span></span><br><span class="line"><span class="params"><span class="function">                              ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span></span><br><span class="line">        WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext),</span><br><span class="line">        applicationContext, getWelcomePage(), <span class="comment">// getWelcomePage 获得欢迎页</span></span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看 getWelcomePage()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="comment">// ::是java8 中新引入的运算符</span></span><br><span class="line">    <span class="comment">// Class::function的时候function是属于Class的，应该是静态方法。</span></span><br><span class="line">    <span class="comment">// this::function的funtion是属于这个对象的。</span></span><br><span class="line">    <span class="comment">// 简而言之，就是一种语法而已，是一种简写</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 欢迎页就是一个location下的的 index.html 而已</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射</li>
</ul>
<h2 id="三-Thymeleaf"><a href="#三-Thymeleaf" class="headerlink" title="三.Thymeleaf"></a>三.Thymeleaf</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ul>
<li>模板引擎,功能类似于之前的就是jsp,但是,springboot不支持jsp,所以使用Thymeleaf</li>
<li>依赖导入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看Thymeleaf的自动配置类 ThymeleafProperties</li>
<li>可以看到默认的前缀和后置,将html文件放在该路径下就可以自动渲染.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.thymeleaf&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><ul>
<li>使用thymeleaf需要导入约束</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>html:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>mkbk<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--th:text就是将div中的内容设置为它指定的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure>

<ul>
<li>官方文档 : <a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//th:each 遍历</span></span><br><span class="line"><span class="comment">//th:if 判断</span></span><br><span class="line"><span class="comment">//th:switch</span></span><br><span class="line"><span class="comment">//th:case</span></span><br><span class="line"><span class="comment">//th:text 转义特殊字符</span></span><br><span class="line"><span class="comment">//th:utext 不转义特殊字符</span></span><br><span class="line"><span class="comment">//*&#123;&#125; 选择表达似乎</span></span><br><span class="line"><span class="comment">//#&#123;&#125; 获取国际化呢容</span></span><br><span class="line"><span class="comment">//@&#123;&#125; 定义Url</span></span><br><span class="line"><span class="comment">//~&#123;&#125; 片段引用表达式</span></span><br><span class="line"><span class="comment">//th:fragment 定义模板名</span></span><br><span class="line"><span class="comment">//th:insert 插入模板名</span></span><br><span class="line"><span class="comment">//.........</span></span><br></pre></td></tr></table></figure>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;h1&gt;test&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;mkbk&quot;</span>,<span class="string">&quot;feng&quot;</span>));</span><br><span class="line">    <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不转义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--遍历数据--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:each</span>=<span class="string">&quot;user :$&#123;users&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--行内写法：官网#12--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四-MVC自动配置原理"><a href="#四-MVC自动配置原理" class="headerlink" title="四.MVC自动配置原理"></a>四.MVC自动配置原理</h2><ul>
<li>官网阅读</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spring MVC Auto-configuration</span><br><span class="line"><span class="comment">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span></span><br><span class="line">Spring Boot provides auto-configuration <span class="keyword">for</span> Spring MVC that works well with</span><br><span class="line">most applications.</span><br><span class="line"><span class="comment">// 自动配置在Spring默认设置的基础上添加了以下功能：</span></span><br><span class="line">The auto-configuration adds the following features on top of Spring’s</span><br><span class="line">defaults:</span><br><span class="line"><span class="comment">// 包含视图解析器</span></span><br><span class="line">Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</span><br><span class="line"><span class="comment">// 支持静态资源文件夹的路径，以及webjars</span></span><br><span class="line">Support <span class="keyword">for</span> serving <span class="keyword">static</span> resources, including support <span class="keyword">for</span> WebJars</span><br><span class="line"><span class="comment">// 自动注册了Converter：</span></span><br><span class="line"><span class="comment">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型</span></span><br><span class="line"><span class="comment">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span></span><br><span class="line">Automatic registration of Converter, GenericConverter, and Formatter beans.</span><br><span class="line"><span class="comment">// HttpMessageConverters</span></span><br><span class="line"><span class="comment">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，</span></span><br><span class="line"><span class="function">Support <span class="keyword">for</span> <span class="title">HttpMessageConverters</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">// 定义错误代码生成规则的</span></span></span><br><span class="line"><span class="function">Automatic registration of <span class="title">MessageCodesResolver</span> <span class="params">(covered later in <span class="keyword">this</span></span></span></span><br><span class="line"><span class="params"><span class="function">document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">// 首页定制</span></span></span><br><span class="line"><span class="function">Static index.html support.</span></span><br><span class="line"><span class="function"><span class="comment">// 图标定制</span></span></span><br><span class="line"><span class="function">Custom Favicon <span class="title">support</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span></span></span><br><span class="line"><span class="function">Automatic use of a ConfigurableWebBindingInitializer <span class="title">bean</span> <span class="params">(covered later in</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制</span></span></span><br><span class="line"><span class="comment"><span class="function">器和其他功能），则可以添加自己的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。</span></span></span><br><span class="line"><span class="comment"><span class="function">如果希望提供RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br><span class="line"><span class="function">If you want to keep Spring Boot MVC features and you want to add additional</span></span><br><span class="line"><span class="function">MVC <span class="title">configuration</span></span></span><br><span class="line"><span class="function"><span class="params">(interceptors, formatters, view controllers, and other features)</span>, you</span></span><br><span class="line"><span class="function">can add your own</span></span><br><span class="line"><span class="function">@Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</span></span><br><span class="line"><span class="function">If you wish to provide</span></span><br><span class="line"><span class="function">custom instances of RequestMappingHandlerMapping,</span></span><br><span class="line"><span class="function">RequestMappingHandlerAdapter, or</span></span><br><span class="line"><span class="function">ExceptionHandlerExceptionResolver, you can declare a</span></span><br><span class="line"><span class="function">WebMvcRegistrationsAdapter instance to provide such components.</span></span><br><span class="line"><span class="function"><span class="comment">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行</span></span></span><br><span class="line"><span class="function">注释。</span></span><br><span class="line"><span class="function">If you want to take complete control of Spring MVC, you can add your own</span></span><br><span class="line"><span class="function">@Configuration annotated with @EnableWebMvc.</span></span><br></pre></td></tr></table></figure>

<h3 id="1-ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#1-ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="1.ContentNegotiatingViewResolver  内容协商视图解析器"></a>1.ContentNegotiatingViewResolver  内容协商视图解析器</h3><ul>
<li>自动配置了SpringMVC的视图解析器</li>
<li>源码查看   WebMvcAutoConfiguration    ContentNegotiatingViewResolver</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ViewResolver.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 注解说明：@Nullable 即参数可为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No currentServletRequestAttributes&quot;</span>);</span><br><span class="line">                 List&lt;MediaType&gt; requestedMediaTypes =</span><br><span class="line">                 <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">                 <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">// 获取候选的视图对象</span></span><br><span class="line">                     List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale,</span><br><span class="line">                                                                        requestedMediaTypes);</span><br><span class="line">                     <span class="comment">// 选择一个最适合的视图对象，然后把这个对象返回</span></span><br><span class="line">                     View bestView = <span class="keyword">this</span>.getBestView(candidateViews,</span><br><span class="line">                                                      requestedMediaTypes, attrs);</span><br><span class="line">                     <span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         <span class="keyword">return</span> bestView;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="comment">// .....</span></span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>打开getCandidateViews 看到他是把所有的视图解析器拿来遍历解析</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator var5 = <span class="keyword">this</span>.viewResolvers.iterator();</span><br></pre></td></tr></table></figure>

<ul>
<li>去容器中找到视图解析器,进行组合.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span></span><br><span class="line">    <span class="comment">// ViewRescolver.class 把所有的视图解析器来组合的</span></span><br><span class="line">    Collection&lt;ViewResolver&gt; matchingBeans =</span><br><span class="line">        BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();</span><br><span class="line">    ViewResolver viewResolver;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = <span class="keyword">new</span> ArrayList(matchingBeans.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-转换器和格式化器"><a href="#2-转换器和格式化器" class="headerlink" title="2.转换器和格式化器"></a>2.转换器和格式化器</h3><ul>
<li>查看源码 FormattingConversionService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到配置文件中的格式化规则</span></span><br><span class="line">    WebConversionService conversionService =</span><br><span class="line">        <span class="keyword">new</span> WebConversionService(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">    addFormatters(conversionService);</span><br><span class="line">    <span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>格式化规则  getDateFormat</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Date format to use. For instance, `dd/MM/yyyy`. 默认的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以在properties配置文件中配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.date-format</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>

<h3 id="3-修改SpringBoot的默认配置"><a href="#3-修改SpringBoot的默认配置" class="headerlink" title="3.修改SpringBoot的默认配置"></a>3.修改SpringBoot的默认配置</h3><ul>
<li>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置 @bean），如果有就用用户配置的，如果没有就用自动配置的； 如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</li>
<li>全面接管springMVC (不建议)<ul>
<li>配置类中标注@EnableWebMvc注解</li>
</ul>
</li>
<li>自定义配置类<ul>
<li>编写一个@Configuration注解类,实现WebMvcConfigurer接口</li>
<li>不能标注@EnableWebMvc注解</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//可以使用自定义类扩展MVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送/test ， 就会跳转到test页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/test&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-自动配置原理"><a href="#4-自动配置原理" class="headerlink" title="4.自动配置原理"></a>4.自动配置原理</h3><ol>
<li>WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类 WebMvcAutoConfigurationAdapter</li>
<li>这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</li>
<li>查看EnableWebMvcConfiguration这个类，它继承了一个父类： DelegatingWebMvcConfiguration</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">    <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span></span><br><span class="line">        WebMvcConfigurerComposite();</span><br><span class="line">    <span class="comment">// 从容器中获取所有的webmvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.可以看到所有的WebMvcConfiguration (spring的和我们自己配置的)都会调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我</span></span><br><span class="line">        们配置的</span><br><span class="line">            WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();</span><br><span class="line">        delegate.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五-页面国际化"><a href="#五-页面国际化" class="headerlink" title="五.页面国际化"></a>五.页面国际化</h2><blockquote>
<p>实现页面的中英双文的实时切换,国际化配置</p>
</blockquote>
<ol>
<li>resources资源文件下新建一个i18n目录，存放国际化配置文件</li>
<li>新建login.properties文件和login_zh_CN.properties文件,idea会自动识别</li>
<li>在其中再新建一个login_en_US.properties文件</li>
<li>选择Resource Bundle ‘login’,添加属性 (login.tip,login.name等) , 并在右侧三个框分别输入内容.实现三种展现方式</li>
<li>配置messages路径<ul>
<li>国际化自动配置类:MessageSourceAutoConfiguration</li>
</ul>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>编写前端页面实现功能 展示中文<ul>
<li>th:text=”#{login.tip}”</li>
</ul>
</li>
</ol>
<blockquote>
<p>通过 Locale (区域信息对象)  LocaleResolver  (获取区域信息对象) 来实现按钮双文切换</p>
</blockquote>
<ol>
<li>自己配置LocaleResolver 组件类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以在链接上携带区域信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        Locale locale = Locale.getDefault(); <span class="comment">// 如果没有获取到就使用系统默认的</span></span><br><span class="line">        <span class="comment">//如果请求链接不为空</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            <span class="comment">//分割请求参数</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家，地区</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="params"><span class="function">                          HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>为了让我们的区域化信息能够生效,我们需要再配置一下这个组件,在我们的MvcConofig下添加 bean</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写前端页面实现中英文切换</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里传入参数不需要使用 ？ 使用 （key=value）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六-登录和拦截器"><a href="#六-登录和拦截器" class="headerlink" title="六.登录和拦截器"></a>六.登录和拦截器</h2><ul>
<li>禁用模板引擎的缓冲,页面修改后 重新编译 实时生效.</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁用模板缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h3><ul>
<li>html 表单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里面的所有表单标签都需要加上一个name属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>controller控制器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/user/login&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@RequestParam(&quot;password&quot;)</span> String password,</span></span></span><br><span class="line"><span class="params"><span class="function">                        Model model, HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="comment">//登录成功！将用户信息放入session</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dashboard&quot;</span>; <span class="comment">// 跳转到首页</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败！存放错误信息</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>登陆失败,将失败信息展示在前台</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--判断是否显示，使用if, $&#123;&#125;可以使用工具类，可以看thymeleaf的中文文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>登陆以后,重定向到首页,添加视图控制器.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>将controller更改为重定向</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登录成功！防止表单重复提交，我们重定向</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-拦截器"><a href="#2-拦截器" class="headerlink" title="2.拦截器"></a>2.拦截器</h3><ul>
<li>通过拦截器解决不登录也能跳到首页的问题</li>
<li>自定义拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse</span></span></span><br><span class="line"><span class="params"><span class="function">                             response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取 loginUser 信息进行判断</span></span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123; <span class="comment">// 未登录，返回登录页面</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限，请先登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 登录，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>将拦截器注册搭配springmvc配置类中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册拦截器，及拦截请求和要剔除哪些请求!</span></span><br><span class="line">    <span class="comment">// 我们还需要过滤静态资源文件，否则样式显示不出来</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/asserts/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过thymeleaf在后台获取登录的用户信息</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--后台主页显示登录用户的信息--&gt;</span></span><br><span class="line">[[$&#123;session.loginUser&#125;]]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过controller model 和view 以及thymeleaf 实现员工的后台增删改查 (后台数据修改,前台数据展示)</p>
</blockquote>
<h2 id="七-404和注销"><a href="#七-404和注销" class="headerlink" title="七.404和注销"></a>七.404和注销</h2><h3 id="1-404"><a href="#1-404" class="headerlink" title="1.404"></a>1.404</h3><ul>
<li>在templates文件夹下添加error文件夹,里边存放404.html等错误文件.springboot会自动使用.</li>
</ul>
<h3 id="2-注销"><a href="#2-注销" class="headerlink" title="2.注销"></a>2.注销</h3><ul>
<li>html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/loginOut&#125;&quot;</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/loginOut&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loginOut</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八-定制错误数据"><a href="#八-定制错误数据" class="headerlink" title="八.定制错误数据"></a>八.定制错误数据</h2><ul>
<li>自动装配类: ErrorMvcAutoConfiguration  里边有几个重要的自动注入的 bean<ol>
<li>DefaultErrorAttributes </li>
<li>BasicErrorController </li>
<li>ErrorPageCustomizer </li>
<li>DefaultErrorViewResolver</li>
</ol>
</li>
<li>步骤:<ol>
<li>出现错误,ErrorPageCustomizer 就会生效（定制错误的响应规则）</li>
<li>系统一旦出现错误之后就会来到 /error 请求进行处理；这个请求会被 BasicErrorController 处理</li>
<li>通过 DefaultErrorViewResolver 默认视图解析器去error路径下解析试图  error/404 error/500</li>
</ol>
</li>
<li>定制错误信息,可以建立一个error目录,放入对应的错误码html文件<ul>
<li>这些页面的信息数据存放在DefaultErrorAttributes中,里边包含很多addxx方法,就是添加不同的信息</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// addStatus</span></span><br><span class="line"><span class="comment">// addErrorDetails</span></span><br><span class="line"><span class="comment">// addErrorMessage</span></span><br><span class="line"><span class="comment">// addStackTrace</span></span><br><span class="line"><span class="comment">// addPath</span></span><br><span class="line"><span class="comment">// 这里面存了一些错误的信息，我们可以在错误页面直接取出来</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>笔记</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2021/10/03/Springmvc/</url>
    <content><![CDATA[<h2 id="一-Springmvc"><a href="#一-Springmvc" class="headerlink" title="一.Springmvc"></a>一.Springmvc</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ul>
<li>模型,视图,控制器的简写,是一种设计规范</li>
<li>降低了视图和业务逻辑间的双向耦合</li>
<li>是一种架构模式</li>
<li><strong>Model</strong>(模型):提供要展示的数据和行为,可以理解为是JavaBean组件,由dao层和service层一起组成.获取模型数据和进行业务处理的层<ul>
<li>业务逻辑,保存数据的状态</li>
</ul>
</li>
<li><strong>View</strong>(视图):模型的展示<ul>
<li>显示页面</li>
</ul>
</li>
<li><strong>Controller</strong>(控制器):接受用户的请求,交由模型层处理,处理完毕后把返回的模型数据返回给视图层.<ul>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ul>
</li>
</ul>
<h2 id="二-执行原理"><a href="#二-执行原理" class="headerlink" title="二.执行原理"></a>二.执行原理</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy00854e07-7eac-476c-a9dd-dcebb7ac0b89.png" alt="img"></p>
<p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy0214fd0a-0df0-4910-a467-5b7d61712868.png" alt="img"></p>
<ul>
<li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</li>
<li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li>
<li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器。</li>
<li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li>
<li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li>
<li>Handler让具体的Controller执行。</li>
<li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li>
<li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li>
<li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li>
<li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li>
<li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li>
</ul>
<h2 id="三-搭建-配置-注解"><a href="#三-搭建-配置-注解" class="headerlink" title="三.搭建(配置,注解)"></a>三.搭建(配置,注解)</h2><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><ol>
<li>导入springmvc依赖,配置web.xml,注册DispacherServlet</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写配置文件: springmvc-servlet.xml </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--处理适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>controller层,实现controller接口.返回ModelAndView,封装数据和视图.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将自己的类交给SpringIOC容器，注册bean</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编写jsp页面,展示数据和页面</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>玛卡巴卡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>启动Tomcat服务器测试.</li>
</ol>
<h3 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h3><ol>
<li>导入相关依赖,Maven资源过滤问题的解决</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置web.xml<ul>
<li>注册DispatcherServlet</li>
<li>关联SpringMVC的配置文件</li>
<li>拦截器<ul>
<li>/ 不会匹配jsp文件,只匹配请求</li>
<li>/* 匹配所有,jsp会再次进入DispatcherServlet,报404错误</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Spring MVC 配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Controller层</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>创建视图层</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>玛卡巴卡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>启动Tomcat服务器测试.</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>新建项目</li>
<li>导入依赖</li>
<li>编写web.xml<ul>
<li>注册DispatcherServlet,关联springmvc配置文件,拦截器</li>
</ul>
</li>
<li>编写springmvc配置文件<ul>
<li>手动配置视图解析器,开启注解驱动(自动配置处理映射器,处理适配器)</li>
</ul>
</li>
<li>编写controller控制器</li>
<li>编写jsp视图层</li>
<li>启动服务器</li>
</ol>
<h2 id="四-Controller和Restful"><a href="#四-Controller和Restful" class="headerlink" title="四.Controller和Restful"></a>四.Controller和Restful</h2><h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1.Controller"></a>1.Controller</h3><ul>
<li>负责解析用户的请求,并将其转化为一个模型,一个控制器可以有多个方法</li>
<li>通过实现Controller接口来实现</li>
<li>通过注解@Controller来实现</li>
<li>@RequestMapping(“/请求地址”),可以用在方法或类上</li>
<li>控制器与视图之间是弱偶合关系</li>
</ul>
<h3 id="2-RestFul"><a href="#2-RestFul" class="headerlink" title="2.RestFul"></a>2.RestFul</h3><ul>
<li>Restful是一个资源定位及资源操作的风格</li>
<li>使用POST、DELETE、PUT、GET等不同方法对资源进行操作,分别对应 添加、 删除、修改、查询</li>
</ul>
<p><strong>测试</strong>:</p>
<ul>
<li>@PathVariable,让方法参数的值对应绑定到一个URL模板变量上.</li>
<li>请求地址更简单: <a href="http://localhost:8080/commit/1/2">http://localhost:8080/commit/1/2</a></li>
<li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用method属性指定请求类型</li>
<li>约束请求类型,GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>@GetMapping</code></li>
<li><code>@PostMapping</code></li>
<li><code>@PutMapping</code></li>
<li><code>@DeleteMapping</code></li>
<li><code>@PatchMapping</code></li>
</ol>
<p>@GetMapping 等同于 @RequestMapping(method =RequestMethod.GET) </p>
<h2 id="五-结果跳转方式"><a href="#五-结果跳转方式" class="headerlink" title="五.结果跳转方式"></a>五.结果跳转方式</h2><h3 id="1-ModelAndView"><a href="#1-ModelAndView" class="headerlink" title="1.ModelAndView"></a>1.ModelAndView</h3><ul>
<li>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</li>
<li>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-ServletAPI"><a href="#2-ServletAPI" class="headerlink" title="2.ServletAPI"></a>2.ServletAPI</h3><ul>
<li>通过HttpServletResponse进行输出</li>
<li>通过HttpServletResponse实现重定向</li>
<li>通过HttpServletRequest实现转发</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-SpringMVC"><a href="#3-SpringMVC" class="headerlink" title="3.SpringMVC"></a>3.SpringMVC</h3><ul>
<li>通过SpringMVC来实现转发和重定向 - 无需视图解析器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过SpringMVC来实现转发和重定向 - 有视图解析器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六-数据处理"><a href="#六-数据处理" class="headerlink" title="六.数据处理"></a>六.数据处理</h2><h3 id="1-处理提交数据"><a href="#1-处理提交数据" class="headerlink" title="1.处理提交数据"></a>1.处理提交数据</h3><ol>
<li>提交的域名称和处理方法的参数名一致<ul>
<li>提交数据 : <a href="http://localhost:8080/hello?name=mkbk">http://localhost:8080/hello?name=mkbk</a></li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>提交的域名称和处理方法的参数名不一致<ul>
<li>通过@RequestParam(“name”)处理</li>
<li>提交数据 : <a href="http://localhost:8080/hello?username=mkbk">http://localhost:8080/hello?username=mkbk</a></li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>提交的是一个对象</li>
</ol>
<ul>
<li>提交的表单域和对象的属性名一致 , 参数使用对象</li>
<li>提交数据 : <a href="http://localhost:8080/user?name=mkbk&amp;id=1&amp;age=18">http://localhost:8080/user?name=mkbk&amp;id=1&amp;age=18</a></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数据发送到前端"><a href="#2-数据发送到前端" class="headerlink" title="2.数据发送到前端"></a>2.数据发送到前端</h3><ol>
<li>通过ModelAndView</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过ModelMap</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过Model</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-乱码问题"><a href="#3-乱码问题" class="headerlink" title="3.乱码问题"></a>3.乱码问题</h3><ul>
<li>添加过滤器 过滤乱码问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="七-拦截器"><a href="#七-拦截器" class="headerlink" title="七.拦截器"></a>七.拦截器</h2><h3 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1.过滤器"></a>1.过滤器</h3><ul>
<li>servlet规范中的一部分，任何java web工程都可以使用</li>
<li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li>
</ul>
<h3 id="2-拦截器"><a href="#2-拦截器" class="headerlink" title="2.拦截器"></a>2.拦截器</h3><ul>
<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>
<li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li>
<li>拦截器是AOP思想的具体应用</li>
</ul>
<h3 id="3-自定义拦截器"><a href="#3-自定义拦截器" class="headerlink" title="3.自定义拦截器"></a>3.自定义拦截器</h3><ol>
<li>编写拦截器，实现 HandlerInterceptor 接口。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.interceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">    <span class="comment">//如果返回true执行下一个拦截器</span></span><br><span class="line">    <span class="comment">//如果返回false就不执行下一个拦截器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>springmvc配置文件中，配置拦截器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试拦截器的控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/interceptor&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制器中的方法执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>jsp</li>
</ol>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;拦截器测试&lt;/a&gt;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>笔记</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL</title>
    <url>/2021/09/29/mysql/</url>
    <content><![CDATA[<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><ul>
<li>mysql -h127.0.0.1 -P3306 -uroot -p123456<br>-h IP地址  -P端口号  -u账号  -p密码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases -- 显示数据库</span><br><span class="line">use stu_info；  -- 打开数据库</span><br><span class="line">select * from stu_info； -- 全表查看数据</span><br><span class="line">net start/stop mysql  -- 启动 关闭服务</span><br><span class="line">select version(); -- 查看版本</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>非关系nosql  keyvalue 和 关系sql 表 主键 </li>
<li>auto_increment自增</li>
</ul>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a><strong>建表</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user_info(</span><br><span class="line">    uid int primary key auto_increment,</span><br><span class="line">    uname varchar(10),</span><br><span class="line">    age int,</span><br><span class="line">    salary float(8,2)</span><br><span class="line">     );</span><br></pre></td></tr></table></figure>

<h3 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a><strong>查询表</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM user_info;</span><br></pre></td></tr></table></figure>

<h3 id="查看属性"><a href="#查看属性" class="headerlink" title="查看属性"></a><strong>查看属性</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show columns from user_info; </span><br></pre></td></tr></table></figure>

<h3 id="单个插入"><a href="#单个插入" class="headerlink" title="单个插入"></a><strong>单个插入</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into user_info</span><br><span class="line">   values(10001,&#x27;聪聪&#x27;,20,8000);</span><br></pre></td></tr></table></figure>

<p><strong>多个插入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into user_info </span><br><span class="line">   values</span><br><span class="line">   (1004,&#x27;牛午璇&#x27;,18,8000),</span><br><span class="line">   (10005,&#x27;牛梦茹&#x27;,20,9000),</span><br><span class="line">   (10006,&#x27;王伦&#x27;,19,10000);</span><br></pre></td></tr></table></figure>

<h3 id="目标列查询插入"><a href="#目标列查询插入" class="headerlink" title="目标列查询插入"></a><strong>目标列查询插入</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO user_info(uname,age)</span><br><span class="line">VALUES</span><br><span class="line">(&#x27;三&#x27;,30),</span><br><span class="line">(&#x27;四&#x27;,20),</span><br><span class="line">(&#x27;五&#x27;,40);</span><br></pre></td></tr></table></figure>

<h3 id="update-更新"><a href="#update-更新" class="headerlink" title="update 更新"></a><strong>update 更新</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE stu_info SET sex = &#x27;女&#x27; WHERE id = 10002;</span><br><span class="line">UPDATE stu_info SET age = age+5 WHERE sex = &#x27;女&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="delete-删除"><a href="#delete-删除" class="headerlink" title="delete 删除"></a><strong>delete 删除</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM stu_info WHERE `name` LIKE &#x27;test%&#x27;; -- 物理删除</span><br><span class="line">UPDATE stu_info set status = 1 WHERE `name` = &#x27;wwq&#x27;;  -- 逻辑删除</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="select练习"><a href="#select练习" class="headerlink" title="select练习"></a>select练习</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 全表的所有记录查询</span><br><span class="line">SELECT * FROM stu_info;</span><br><span class="line"></span><br><span class="line">-- AS对列进行重命名,AS可以省略</span><br><span class="line">SELECT `name` AS 姓名,age 年龄 FROM stu_info; </span><br><span class="line"></span><br><span class="line">-- DISTINCT对结果集进行去重</span><br><span class="line">SELECT DISTINCT `name` AS 姓名,age AS 年龄 FROM stu_info;</span><br><span class="line">SELECT DISTINCT `name` FROM stu_info;</span><br><span class="line"></span><br><span class="line">-- where 对查询结果集进行一个筛选 &gt; &lt; = </span><br><span class="line">SELECT `name`,age FROM stu_info WHERE age=20;</span><br><span class="line">SELECT `name`,age FROM stu_info WHERE age&gt;20;</span><br><span class="line">SELECT `name`,age FROM stu_info WHERE age&lt;20;</span><br><span class="line"></span><br><span class="line">-- where 对查询结果集进行一个筛选AND OR</span><br><span class="line">SELECT * FROM stu_info WHERE age&lt;20 AND sex= &#x27;男&#x27;;</span><br><span class="line">SELECT * FROM stu_info WHERE age&lt;20 AND sex= &#x27;女&#x27;;</span><br><span class="line">-- 查询成绩大于年龄大于90的女生姓名</span><br><span class="line">SELECT `name` AS &#x27;成绩&gt;90&#x27; FROM stu_info WHERE score&gt;90 AND sex= &#x27;女&#x27;;</span><br><span class="line"></span><br><span class="line">-- WHERE  对查询结果集进行一个筛选between AND 第一个小于第二个值</span><br><span class="line">-- 查询成绩在80到90之间的学生姓名</span><br><span class="line">SELECT `name`,score AS &#x27;80到90之间&#x27; FROM stu_info </span><br><span class="line">WHERE score&gt;=80 AND score&lt;=90;</span><br><span class="line">SELECT `name`,score FROM stu_info WHERE score BETWEEN 80 AND 90;</span><br><span class="line">-- 查询注册时间在2017年9月7号到2017年9月10号之间的</span><br><span class="line">SELECT `name`,addtime FROM stu_info </span><br><span class="line">WHERE addtime BETWEEN &#x27;2017-09-07 00:00:00&#x27; AND &#x27;2017-09-10 23:59:59&#x27;; </span><br><span class="line"></span><br><span class="line">-- in notin 查询在2，3，4组的学生姓名 年龄 性别</span><br><span class="line">SELECT `name`,age,sex,gid FROM stu_info WHERE gid=2 OR gid=3 OR gid=4;</span><br><span class="line">SELECT `name`,age,sex,gid FROM stu_info WHERE gid IN(2,3,4,5,6);-- 在23456组的</span><br><span class="line">SELECT `name`,age,sex,gid FROM stu_info WHERE gid NOT IN(2,3,4,5,6); -- 在1组的</span><br><span class="line"></span><br><span class="line">-- 模糊查询，通配符查询 LIKE后面跟%通配符，指代未知N个字符</span><br><span class="line">SELECT * FROM stu_info WHERE `name` = &#x27;张志龙&#x27;;</span><br><span class="line">SELECT * FROM stu_info WHERE `name` LIKE &#x27;张%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 模糊查询，通配符查询 LIKE后面跟_通配符，指代未知一个字符</span><br><span class="line">SELECT * FROM stu_info WHERE `name` LIKE &#x27;张__&#x27;;</span><br><span class="line"></span><br><span class="line">-- name必须是三个字符的</span><br><span class="line">SELECT * FROM stu_info WHERE `name` LIKE &#x27;___&#x27;;</span><br><span class="line"></span><br><span class="line">-- name至少两个字的学生</span><br><span class="line">SELECT * FROM stu_info WHERE `name` LIKE &#x27;__%&#x27;;</span><br><span class="line"></span><br><span class="line">-- name包含文的</span><br><span class="line">SELECT * FROM stu_info WHERE `name` LIKE &#x27;%文%&#x27;;</span><br><span class="line">SELECT 5,`name` FROM stu_info;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 对结果集进行排序 ASC默认升序 DESC降序 	</span><br><span class="line">SELECT name,score,age,sex FROM stu_info </span><br><span class="line">WHERE sex = &#x27;女&#x27; AND score is NOT NULL </span><br><span class="line">ORDER BY score DESC;</span><br><span class="line"></span><br><span class="line">SELECT name,age,score from stu_info WHERE sex = &#x27;男&#x27; AND score is NOT NULL</span><br><span class="line">ORDER BY age DESC,score ASC,`name` ;</span><br><span class="line"></span><br><span class="line">-- 聚合函数返回结果就是一个值，count()统计记录数</span><br><span class="line">SELECT COUNT(id) AS 学生人数 FROM stu_info;</span><br><span class="line">SELECT COUNT(*) AS 学生人数 FROM stu_info;</span><br><span class="line"></span><br><span class="line">-- 统计男生的个数</span><br><span class="line">SELECT COUNT(*) AS 男生个数 FROM stu_info</span><br><span class="line">WHERE sex = &#x27;男&#x27;;</span><br><span class="line"></span><br><span class="line">-- 统计score最大值、最小值、平均值</span><br><span class="line">SELECT MAX(score) AS scoer最大值 FROM stu_info</span><br><span class="line">WHERE score IS NOT NULL;</span><br><span class="line">SELECT MIN(score) AS scoer最小值 FROM stu_info</span><br><span class="line">WHERE score IS NOT NULL;</span><br><span class="line">SELECT AVG(score) AS score的平均值 FROM stu_info </span><br><span class="line">WHERE score is not NULL;</span><br><span class="line">SELECT ROUND(AVG(score),3) AS score的平均值 FROM stu_info </span><br><span class="line">WHERE score is not NULL;</span><br><span class="line"></span><br><span class="line">-- 统计一下男生年龄的最大值、最小值、平均值</span><br><span class="line">SELECT MAX(age) AS 男生年龄最大值 FROM stu_info</span><br><span class="line">WHERE age IS not NULL;</span><br><span class="line">SELECT MIN(age) AS 男生年龄最小值 FROM stu_info</span><br><span class="line">WHERE age IS not NULL;</span><br><span class="line">SELECT ROUND(AVG(age),2) AS 男生年龄平均值 FROM stu_info</span><br><span class="line">WHERE age IS not NULL;</span><br><span class="line">-- 对结果保存两位小数 ROUND(X,D)对x取D为小数</span><br><span class="line"></span><br><span class="line">-- 分组 按组号分组 求每组的成绩最大值和人员个数</span><br><span class="line">SELECT gid AS 组号,COUNT(id) AS 人数,MAX(score) AS 最大值 </span><br><span class="line">FROM stu_info </span><br><span class="line">WHERE gid IS NOT NULL</span><br><span class="line">GROUP BY gid;</span><br><span class="line"></span><br><span class="line">-- 分组 按性别分组，统计不同性别的人数，统计男生、女生、未知中年龄的最大值 分组的where用having表示</span><br><span class="line">SELECT sex AS 组号,COUNT(*) AS 人数,MAX(age) AS 最大值 </span><br><span class="line">FROM stu_info</span><br><span class="line">WHERE sex IS NOT NULL</span><br><span class="line">GROUP BY sex HAVING count(*)&gt;3;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ER图-三大范式"><a href="#ER图-三大范式" class="headerlink" title="ER图,三大范式"></a>ER图,三大范式</h2><p>E-R图—&gt;关系表—&gt;三大范式理论</p>
<p>数据冗余、操作异常（插入异常、删除异常、更新异常）</p>
<p><img src="https://pic.imgdb.cn/item/622c63015baa1a80ab87cfc7.png" alt="image-20211012082519636"></p>
<h3 id="E-R图转化表"><a href="#E-R图转化表" class="headerlink" title="E-R图转化表"></a><strong>E-R图转化表</strong></h3><p><strong>逻辑模型如何转化物理模型?</strong></p>
<ol>
<li>实体集转化成实体表，实体属性转化成表字段，主属性转化成表主键</li>
<li>M-N——的关系：生成关系表，关系表的主键为联合主键，由俩个实体表的主键构成</li>
<li>1-N——的关系：不生成关系表，在多端表中加入单端表的主属性</li>
<li>1-1——的关系：不生成关系表，选择俩表的任意一表加入另一表的主键即可</li>
</ol>
<h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a><strong>三大范式</strong></h3><ol>
<li><p>表中没有多值字段（地址就是多值） </p>
<p>确保每列的原子性,每列都是不可再分的最小数据单元</p>
</li>
<li><p>表存在联合主键，不存在部分函数依赖，不存在非主属性对某一主属性的部分函数依赖</p>
<p>要求每个表只描述一件事情</p>
</li>
<li><p>不存在非主属性对主属性的传递依赖</p>
<p>数据表中的每一列数据都和主键直接相关，而不能间接相关</p>
</li>
</ol>
<hr>
<h2 id="多表查询-子查询"><a href="#多表查询-子查询" class="headerlink" title="多表查询,子查询"></a>多表查询,子查询</h2><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a><strong>多表查询</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM-- 笛卡尔积 AxB 6x8 48条</span><br><span class="line"></span><br><span class="line">SELECT `name`,dname,loca, FROM employee,department; -- 笛卡尔积 AxB 6x8 48条</span><br><span class="line">WHERE employee.depid = department.id;</span><br><span class="line"></span><br><span class="line">-- 1.查询出每个员工对应的部门名称和部门位置</span><br><span class="line">SELECT employee.id,`name`,dname,loca FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id;</span><br><span class="line">SELECT * FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id;</span><br><span class="line"></span><br><span class="line">-- 2.查询出每个部门的员工数、平均年龄</span><br><span class="line">SELECT dname,COUNT(*),AVG(age),ROUND(AVG(age)) </span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id</span><br><span class="line">GROUP BY dname;</span><br><span class="line"></span><br><span class="line">-- 3.查询出每个部门底下的员工数&gt;1的部门名称</span><br><span class="line">SELECT dname,COUNT(*),AVG(age),ROUND(AVG(age)) </span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id</span><br><span class="line">GROUP BY dname </span><br><span class="line">HAVING COUNT(*)&gt;1;</span><br><span class="line"></span><br><span class="line">-- 4.查询出每个部门下的平均年龄&gt;16的部门名称</span><br><span class="line">SELECT dname,COUNT(*),AVG(age),ROUND(AVG(age)) </span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id</span><br><span class="line">GROUP BY dname HAVING AVG(age)&gt;16;</span><br><span class="line"></span><br><span class="line">-- 5.统计出每个部门下不同年龄段的员工数</span><br><span class="line">SELECT dname,age,COUNT(*)</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id</span><br><span class="line">GROUP BY dname,age;</span><br><span class="line"></span><br><span class="line">-- 6.统计出每个部门年龄段超过1人的组内年龄段</span><br><span class="line">SELECT dname,age,COUNT(*)</span><br><span class="line">FROM employee,department</span><br><span class="line">WHERE employee.depid = department.id</span><br><span class="line">GROUP BY dname,age</span><br><span class="line">HAVING count(*)&gt;1;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM COMPANY </span><br><span class="line">WHERE ID IN (SELECT ID </span><br><span class="line">             FROM COMPANY </span><br><span class="line">             WHERE SALARY &gt; 45000) ;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>语言分类</strong>: DDL数据定义语言 DQL数据查询语言 DML数据处理语言 DCL数据控制语言 </p>
<h4 id="1-建表语句"><a href="#1-建表语句" class="headerlink" title="1.建表语句"></a>1.建表语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table studnet(</span><br><span class="line">	sid int primary key auto_increment,</span><br><span class="line">	sname varchar(20),</span><br><span class="line">	sage int,</span><br><span class="line">	sex varchar(2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="2-增-insert-into"><a href="#2-增-insert-into" class="headerlink" title="2.增 insert into"></a>2.增 insert into</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into student (sname，sage)</span><br><span class="line">values (&#x27;张三&#x27;,20),</span><br><span class="line">       (&#x27;李四&#x27;,20);</span><br></pre></td></tr></table></figure>

<h4 id="3-查询-select-from"><a href="#3-查询-select-from" class="headerlink" title="3.查询 select from"></a>3.查询 select from</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sid,sname,sage,sex </span><br><span class="line">from student</span><br><span class="line">where sex = &#x27;女&#x27; and age&gt;18 and sname like &#x27;__&#x27;;</span><br><span class="line">分组函数 count sum avg max min</span><br><span class="line">分组 group by having</span><br><span class="line">排序 order by asc desc</span><br><span class="line">显示几条 索引从0开始 limit（索引，显示几个）</span><br></pre></td></tr></table></figure>

<h4 id="4-改-更新-update-set"><a href="#4-改-更新-update-set" class="headerlink" title="4.改 更新 update set"></a>4.改 更新 update set</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update student</span><br><span class="line">set age = age+1</span><br><span class="line">where sex = &#x27;女&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="5-删除-delete-from"><a href="#5-删除-delete-from" class="headerlink" title="5.删除 delete from"></a>5.删除 delete from</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from student where age&gt;18;</span><br></pre></td></tr></table></figure>

<h4 id="6-设计表的理论："><a href="#6-设计表的理论：" class="headerlink" title="6.设计表的理论："></a>6.设计表的理论：</h4><h5 id="E-R图转化为二维关系表："><a href="#E-R图转化为二维关系表：" class="headerlink" title="E-R图转化为二维关系表："></a>E-R图转化为二维关系表：</h5><ol>
<li>实体集转化成实体表，实体属性转化成表字段，主属性转化成表主键</li>
<li>M-N——的关系：生成关系表，关系表的主键为联合主键，由俩个实体表的主键构成</li>
<li>1-N——的关系：不生成关系表，在多端表中加入单端表的主属性</li>
<li>1-1——的关系：不生成关系表，选择俩表的任意一表加入另一表的主键即可</li>
</ol>
<h5 id="范式理论"><a href="#范式理论" class="headerlink" title="范式理论"></a>范式理论</h5><ol>
<li><p>表中没有多值字段（地址就是多值） </p>
<p>确保每列的原子性,每列都是不可再分的最小数据单元</p>
</li>
<li><p>表存在联合主键，不存在部分函数依赖，不存在非主属性对某一主属性的部分函数依赖</p>
<p>要求每个表只描述一件事情</p>
</li>
<li><p>不存在非主属性对主属性的传递依赖</p>
<p>数据表中的每一列数据都和主键直接相关，而不能间接相关</p>
</li>
</ol>
<hr>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>导入java包 驱动 add as library</p>
</li>
<li><ul>
<li>加载驱动 –<code>class.forname(&quot;com.mysql.jdbc.Driver&quot;);</code></li>
<li>建立连接 – 地址 账号 密码 </li>
<li>执行操作 – 增删改查</li>
<li>释放资源 – close 关闭连接b</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ulr设置</span></span><br><span class="line">jdbc协议头 ip：端口号/数据库名</span><br><span class="line">    useSSL=<span class="keyword">false</span>  <span class="comment">//安全连接</span></span><br><span class="line">    useUnicode=<span class="keyword">true</span>   <span class="comment">//使用unicode字符集</span></span><br><span class="line">    characterEncoding=utf-<span class="number">8</span> <span class="comment">//指定字符编码</span></span><br><span class="line">    serverTimezonezone=GMT%2B8; <span class="comment">//设置时区 UTC 世界时区 GMT%2B8 中国时区</span></span><br></pre></td></tr></table></figure>

<h3 id="JDBC—增"><a href="#JDBC—增" class="headerlink" title="JDBC—增"></a>JDBC—增</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date nowTime = <span class="keyword">new</span> Date(); <span class="comment">//获取时间对象</span></span><br><span class="line">Timestamp addtime = <span class="keyword">new</span> Timestamp(nowTime.getTime());<span class="comment">//获取时间戳</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertStu</span><span class="params">(String name, String sex, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = DBTools.getConnection();</span><br><span class="line">        String sql = <span class="string">&quot;insert into stu_info(name,sex,age,score,status,addtime) values(?,?,?,?,0,?)&quot;</span>;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,name);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,sex);</span><br><span class="line">        preparedStatement.setInt(<span class="number">3</span>,age);</span><br><span class="line">        preparedStatement.setInt(<span class="number">4</span>,score);</span><br><span class="line">        <span class="comment">//给数据库里面插入时间 将Java.util 时间转为Timestamp</span></span><br><span class="line">        <span class="comment">//new Date() 获取当前系统的时间</span></span><br><span class="line">        Date nowTime = <span class="keyword">new</span> Date();</span><br><span class="line">        Timestamp addtime = <span class="keyword">new</span> Timestamp(nowTime.getTime());</span><br><span class="line">        preparedStatement.setTimestamp(<span class="number">5</span>,addtime);</span><br><span class="line"></span><br><span class="line">        preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序执行完毕！！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        DBTools.close(connection,preparedStatement,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JDB—删"><a href="#JDB—删" class="headerlink" title="JDB—删"></a>JDB—删</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStu</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//加载驱动 创建连接</span></span><br><span class="line">        connection = DBTools.getConnection();</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        String sql = <span class="string">&quot;delete from stu_info where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,id);</span><br><span class="line">            <span class="keyword">int</span> num = ps.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未查找到该id！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DBTools.close(connection,ps,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="JDBC—查"><a href="#JDBC—查" class="headerlink" title="JDBC—查"></a>JDBC—查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectStuinfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.加载驱动</span></span><br><span class="line"><span class="comment">         * 2.建立连接</span></span><br><span class="line"><span class="comment">         * 3.执行操作</span></span><br><span class="line"><span class="comment">         * 4.释放资源</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 错误</span></span><br><span class="line"><span class="comment">         * 1.数据库地址 账号 密码</span></span><br><span class="line"><span class="comment">         * 2.数据库驱动版本不一致</span></span><br><span class="line"><span class="comment">         * 3.sql语句编译错误</span></span><br><span class="line"><span class="comment">         * 4.表字段名，表名于数据库保持一致</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//jdbc协议头 ip：端口号 数据库名</span></span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mytest?useSSL=true&quot;</span>;</span><br><span class="line">    String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方便资源释放</span></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1加载驱动 Class.forName 可能会抛出异常</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建连接 创建连接可能抛出异常</span></span><br><span class="line">        connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3.执行操作</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from stu_info;&quot;</span>;</span><br><span class="line">        <span class="comment">//创建预编译指令集，将sql语句绑定在数据库中</span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//执行查询操作，将结果集放在resultSet</span></span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="comment">//resultSet.next()是否由下一行</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            <span class="comment">//resultSet.getString(&quot;&quot;)获取行里面的列值（列名）</span></span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + resultSet.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + resultSet.getString(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span> + resultSet.getInt(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; &quot;</span> + resultSet.getInt(<span class="string">&quot;gid&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源 结果集，预编译对象，连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">            preparedStatement.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序执行完毕!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JDBC—改"><a href="#JDBC—改" class="headerlink" title="JDBC—改"></a>JDBC—改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方便资源释放</span></span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1加载驱动 Class.forName 可能会抛出异常</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建连接 创建连接可能抛出异常</span></span><br><span class="line">    connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">    <span class="comment">//3.执行操作</span></span><br><span class="line">    String sql = <span class="string">&quot;update stu_info set age = 15 where id = 10009&quot;</span>;</span><br><span class="line">    <span class="comment">//创建预编译指令集，将sql语句绑定在数据库中</span></span><br><span class="line">    preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//执行更新操作</span></span><br><span class="line">    preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.释放资源 结果集，预编译对象，连接对象</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;程序执行完毕!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h3><p>给第一二步和第四步封装起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jdbc协议头 ip：端口号 数据库名</span></span><br><span class="line"><span class="comment">//useSSL=false</span></span><br><span class="line"><span class="comment">//characterEncoding=utf-8</span></span><br><span class="line"><span class="comment">//serverTimezonezone=GMT%2B8&quot;;</span></span><br><span class="line"><span class="keyword">static</span> String url = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mytest?useSSL=true&amp;characterEncoding=utf-8&amp;serverTimezonezone=GMT%2B8&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据库连接类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放资源方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>笔记</category>
        <category>MYSQL</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2021/08/10/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、线程简介"><a href="#一、线程简介" class="headerlink" title="一、线程简介"></a>一、线程简介</h2><ul>
<li><p>程序：指令和数据的有序集合（静态概念）</p>
</li>
<li><p>进程：执行程序的一次执行过程（动态概念）</p>
</li>
<li><p>线程：CPU调度和执行的单位，一个进程中有多个线程。程序运行的时候，即使自己没有创建线程，后台也会多个线程，如main()主线程和gc线程。</p>
</li>
<li><p>操作系系中运行的程序就是进程，一个进程可以有多个线程。</p>
</li>
<li><p>普通方法调用：只有主线程一条执行路径。</p>
</li>
<li><p>多线程：多条执行路径，主线程和子线程并行交替执行。</p>
</li>
<li><p>对同一份资源操作时，会存在资源抢夺问题，需要加入并发控制。</p>
</li>
</ul>
<h2 id="二、线程创建"><a href="#二、线程创建" class="headerlink" title="二、线程创建"></a>二、线程创建</h2><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h3><p>步骤：</p>
<ol>
<li>自定义线程类继承Thread类。</li>
<li>重写run()方法，编写线程执行体。</li>
<li>创建线程对象，调用start()方法启动线程。</li>
</ol>
<ul>
<li>线程开启不一定立即执行，由cpu调度执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建多线程方式1：继承Threa类，重写run()方法，调用start开启线程</span></span><br><span class="line"><span class="comment">//总结：注意，线程开启不一定立即执行，由cpu调度执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main线程，主线程</span></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        TestThread1 testThread1 = <span class="keyword">new</span> TestThread1();</span><br><span class="line">        <span class="comment">//调用start()方法开启线程</span></span><br><span class="line">        testThread1.start();<span class="comment">//调用start方法，而不是run方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>子类继承Thread类具备多线程能力</li>
<li>启动线程：子类对象.start()</li>
<li>不建议使用（避免OOP单继承局限性）</li>
</ul>
<h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2.实现Runnable接口"></a>2.实现Runnable接口</h3><p>步骤：</p>
<ol>
<li>定义MyRunnable类实现Runnable接口。</li>
<li>实现run()方法，编写线程执行体。</li>
<li>创建线程对象，调用start()方法启动线程。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建多线程方式2：实现runnable接口，重写run()方法，执行线程需要丢入runnable接口的实现类，调用start方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main线程，主线程</span></span><br><span class="line">        <span class="comment">//创建一个runnable接口的实现类对象</span></span><br><span class="line">        TestThread3 testThread3 = <span class="keyword">new</span> TestThread3();</span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testThread3);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//上面三行代码等于下面一行</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testThread3).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>实现接口Runnable具备多线程能力</li>
<li>启动线程：传入目标对象+Thread对象.start()</li>
<li>推荐使用（避免单继承局限性，灵活方便，方便同一个对象被多个线程使用）</li>
</ul>
<p><strong>模拟龟兔赛跑（Runnable）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>)&amp;&amp; i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断比赛是否结束</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">            <span class="comment">//如果比赛结束就停止程序</span></span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否结束比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>&#123;</span><br><span class="line">     <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner!=<span class="keyword">null</span>)&#123;<span class="comment">//已经存在胜利者</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (steps&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;胜利者是&quot;</span>+winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>下载图片(Runnable）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//练习Runnable，实现多线程同步下载照片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread2</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片线程的执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread2 t1 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;http://bpic.588ku.com/element_origin_min_pic/16/10/29/2ac8e99273bc079e40a8dc079ca11b1f.jpg&quot;</span>,<span class="string">&quot;中秋1.jpg&quot;</span>);</span><br><span class="line">        TestThread2 t2 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;http://bpic.588ku.com/element_origin_min_pic/16/07/06/17577cd55945262.jpg%21r650&quot;</span>,<span class="string">&quot;中秋2.jpg&quot;</span>);</span><br><span class="line">        TestThread2 t3 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;http://bpic.588ku.com/element_origin_min_pic/17/06/13/5c5a1442f0ec72e59829ee10d891f224.jpg%21r650&quot;</span>,<span class="string">&quot;中秋3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(t1).start();<span class="comment">//正常下载顺序t1 t2 t3,由于多线程的缘故，同时下载</span></span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t3).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法 导入commonio2.6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader方法出现问题!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-初识并发问题"><a href="#3-初识并发问题" class="headerlink" title="3.初识并发问题"></a>3.初识并发问题</h3><ul>
<li>多个线程同时操作同一个资源的情况下，线程不安全，数据紊乱（并发问题）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个线程同时操作一个对象</span></span><br><span class="line"><span class="comment">//买火车票的例子</span></span><br><span class="line"><span class="comment">//发现问题：多个线程同时操作同一个资源的情况下，线程不安全，数据紊乱（并发问题）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了第&quot;</span>+ticketNums--+<span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread4 ticket = <span class="keyword">new</span> TestThread4();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">小明拿到了第<span class="number">10</span>票</span><br><span class="line">老师拿到了第<span class="number">10</span>票</span><br><span class="line">老师拿到了第<span class="number">9</span>票</span><br><span class="line">结果会出现这样的问题</span><br></pre></td></tr></table></figure>

<h3 id="4-实现Callable接口（了解）"><a href="#4-实现Callable接口（了解）" class="headerlink" title="4.实现Callable接口（了解）"></a>4.实现Callable接口（了解）</h3><p>步骤： </p>
<ol>
<li>实现Callable接口，需要返回值类型 。</li>
<li>重写call方法，需要抛出异常。</li>
<li>创建目标对象。</li>
<li>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</li>
<li>提交执行：Future result1 = ser.submit(t1); </li>
<li>获取结果：boolean r1 = result1.get()；</li>
<li>关闭服务：ser.shutdownNow();</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线程方式3：实现callable接口</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">callable的好处</span></span><br><span class="line"><span class="comment">1.可以定义返回值</span></span><br><span class="line"><span class="comment">2.可以抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片线程的执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;http://bpic.588ku.com/element_origin_min_pic/16/10/29/2ac8e99273bc079e40a8dc079ca11b1f.jpg&quot;</span>,<span class="string">&quot;中秋11.jpg&quot;</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;http://bpic.588ku.com/element_origin_min_pic/16/07/06/17577cd55945262.jpg%21r650&quot;</span>,<span class="string">&quot;中秋22.jpg&quot;</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;http://bpic.588ku.com/element_origin_min_pic/17/06/13/5c5a1442f0ec72e59829ee10d891f224.jpg%21r650&quot;</span>,<span class="string">&quot;中秋33.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法 导入commonio2.6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader方法出现问题!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-静态代理"><a href="#5-静态代理" class="headerlink" title="5.静态代理"></a>5.静态代理</h3><p>静态代理总结<br>真实对象和代理对象都要实现同一个接口<br>代理对象要代理真实角色<br>好处：<br>    代理对象可以做很多真实对象做不了的事情<br>    真实对象专注做自己的事情</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        You you = <span class="keyword">new</span> You();<span class="comment">//你要结婚</span></span><br><span class="line">        WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(you);</span><br><span class="line">        weddingCompany.happyMarry();</span><br><span class="line">        <span class="comment">//上三行等同于 new WeddingCompany(new You()).happyMarry();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">happyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色，你去结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玛卡巴卡结婚了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色，帮助你去结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="comment">//代理谁--&gt;真是目标角色</span></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        befor();</span><br><span class="line">        <span class="keyword">this</span>.target.happyMarry();<span class="comment">//这就是真实对象</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">befor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结婚之前，布置现场</span><br><span class="line">玛卡巴卡结婚了。</span><br><span class="line">结婚之后，收尾款</span><br></pre></td></tr></table></figure>

<h3 id="6-Lambda表达式"><a href="#6-Lambda表达式" class="headerlink" title="6.Lambda表达式"></a>6.Lambda表达式</h3><p>new Thread（()-&gt;System.out.println(“Lambda表达式”)）.start();</p>
<p>为什么使用Lambda表达式？</p>
<ul>
<li>避免匿名内部类定义过多。</li>
<li>使代码简洁明了。</li>
<li>去掉一堆没有意义的代码，只留下核心的逻辑。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">推导lambda表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILike like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类，没有类的接口，必须借助接口或者父类</span></span><br><span class="line">        like = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = ()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i like lambda5&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i like lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  Lambda简化</p>
<ul>
<li>lambda表达式只能有一行代码的情况下才能简化为一行，如果有多行，必须用代码块包裹。</li>
<li>前提是接口为函数式接口（只包含唯一一个抽象方法的接口是函数式接口）</li>
<li>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号（a，b）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILove love = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.lambda表示简化</span></span><br><span class="line">        love = (<span class="keyword">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i love you--&gt;&quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化1：去掉参数类型</span></span><br><span class="line">        love = (a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i love you--&gt;&quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化2：去掉括号</span></span><br><span class="line">        love = a -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i love you--&gt;&quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化2：去掉花括号</span></span><br><span class="line">        love = a -&gt; System.out.println(<span class="string">&quot;i love you--&gt;&quot;</span> + a);</span><br><span class="line"></span><br><span class="line">        love.love(<span class="number">521</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILove</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、线程状态"><a href="#三、线程状态" class="headerlink" title="三、线程状态"></a>三、线程状态</h2><ul>
<li>创建状态–就绪状态–运行状态–死亡状态  阻塞状态</li>
</ul>
<h3 id="1-停止状态"><a href="#1-停止状态" class="headerlink" title="1.停止状态"></a>1.停止状态</h3><ul>
<li>建议线程正常停止–&gt;利用次数，不建议死循环</li>
<li>建议使用标志位–&gt;设立一个标志位</li>
<li>不要使用stop或者destroy等过时或者JDK不推荐使用的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.设置一个标识符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run......Thread&quot;</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标志位。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;maian&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标志位，让线程停止。</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;该线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-线程方法"><a href="#2-线程方法" class="headerlink" title="2.线程方法"></a>2.线程方法</h3><ol>
<li><strong>线程休眠 sleep</strong><ul>
<li>sleep存在异常InterruptedException。</li>
<li>sleep指当前线程阻塞的毫秒数，时间到达后线程进入就绪状态。</li>
<li>每一个对象都会有一个锁，sleep不会释放锁。</li>
<li>sleep可以模拟网络延时和倒计时。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟网络延时：放大问题的发生性。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了第&quot;</span>+ticketNums--+<span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestSleep ticket = <span class="keyword">new</span> TestSleep();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟倒计时 和 打印当前时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印当前时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获取当前系统时间</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(startTime));</span><br><span class="line">                startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//更新当前时间</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//tendown();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tendown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span> (num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>线程礼让 yield</strong><ul>
<li>礼让线程，让当前正在执行的线程暂停，但不阻塞。</li>
<li>线程从运行状态转换为就绪状态</li>
<li>让CPU重新调度，礼让不一定成功！看CPU心情。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//礼让不一定成功，看CPU心情</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYiled myYiled = <span class="keyword">new</span> MyYiled();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(myYiled,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYiled,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYiled</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.yield();<span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程终止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>线程强制执行 join</strong><ul>
<li>Join合并线程，待此线程执行完毕后，再执行其他线程，其他线程阻塞。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程强制执行 Join （插队执行）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程VIP来了&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动我们的线程</span></span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-线程状态观测"><a href="#3-线程状态观测" class="headerlink" title="3.线程状态观测"></a>3.线程状态观测</h3><ul>
<li>Thread.State</li>
<li>NEW，尚未启动的线程所处的状态。</li>
<li>RUNNABLE，在Java虚拟机中执行的线程所处的状态。</li>
<li>BLOCKED，被阻塞等监视器锁定的线程所处的状态。</li>
<li>WAITING，等待另一个线程执行特定动作所处的状态。</li>
<li>TERMINATED，线程的结束状态。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;  <span class="comment">//lambda表达式</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;//////&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();<span class="comment">//启动后</span></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//RUN</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state!=Thread.State.TERMINATED)&#123;<span class="comment">//只要线程不终止，就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();<span class="comment">//更新线程状态</span></span><br><span class="line">            System.out.println(state);<span class="comment">//输出状态</span></span><br><span class="line">        &#125;</span><br><span class="line">        thread.start();<span class="comment">//报错，线程进入死亡状态就不能再次启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-线程优先级-priority"><a href="#4-线程优先级-priority" class="headerlink" title="4.线程优先级 priority"></a>4.线程优先级 priority</h3><ul>
<li><p>线程优先级用数字表示，范围1~10。</p>
<p>Thread.MIN_PRIORITY = 1;最小是1。</p>
<p>Thread.MAX_PRIORITY = 10;最大是10。</p>
<p>Thread.NORM_PRIORITY = 5;默认是5。</p>
</li>
<li><p>getPriority()获取优先级，setPriority(int xxx)设置优先级。</p>
</li>
<li><p>优先级指的是获取调度的概率，并不是高优先级就一定在第一个执行，看CPU调度。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主程序默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先设置优先级，再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">5</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY);<span class="comment">//MAX_PRIORITY=10</span></span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        t5.setPriority(-1);</span></span><br><span class="line"><span class="comment">        t5.start();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        t6.setPriority(11);</span></span><br><span class="line"><span class="comment">        t6.start();*/</span> 报错</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-守护线程-daemon"><a href="#5-守护线程-daemon" class="headerlink" title="5.守护线程 daemon"></a>5.守护线程 daemon</h3><ul>
<li>线程分为用户线程和守护线程。</li>
<li>虚拟机不用等待守护线程执行完毕。</li>
<li>虚拟机必须确保用户线程执行完毕。</li>
<li>setDaemon(true) 切换为守护线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);<span class="comment">//默认是false表示用户线程，正常的线程都是用户线程。</span></span><br><span class="line">        thread.start();<span class="comment">//上帝守护线程启动，虚拟机不用等待守护线程执行完毕。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();<span class="comment">//你，用户线程启动，虚拟机必须确保用户线程执行完毕。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝守护着你！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">365</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你幸福的活着&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======GoodBye，World！=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、线程同步"><a href="#四、线程同步" class="headerlink" title="四、线程同步"></a>四、线程同步</h2><ul>
<li>并发：同一个对象被多个线程同时操作。</li>
<li>线程同步：当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作， 其他线程才能对该内存地址进行操作，而其他线程又处于等待状态。</li>
<li>线程同步形成条件：队列+锁</li>
</ul>
<h3 id="1-三大不安全案例"><a href="#1-三大不安全案例" class="headerlink" title="1.三大不安全案例"></a>1.三大不安全案例</h3><ol>
<li><strong>不安全的买票</strong>（解决办法：同步方法）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票</span></span><br><span class="line"><span class="comment">//同步方法,默认锁的是this</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buyticket buyticket = <span class="keyword">new</span> Buyticket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(buyticket,<span class="string">&quot;我&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyticket,<span class="string">&quot;你&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(buyticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;<span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//外部停止方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sychronized 同步方法，锁定的是this</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;<span class="comment">//解决办法：同步方法</span></span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买了第&quot;</span>+ticketNum--+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>不安全银行取钱</strong>（解决办法：同步块）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全银行取钱</span></span><br><span class="line"><span class="comment">//俩个人去银行取钱</span></span><br><span class="line"><span class="comment">//同步块，锁的对象是变化的量，需要增删改的对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">&quot;结婚基金&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">&quot;你&quot;</span>);</span><br><span class="line">        Drawing girlfriend = <span class="keyword">new</span> Drawing(account, <span class="number">100</span>, <span class="string">&quot;她&quot;</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        girlfriend.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;<span class="comment">//余额</span></span><br><span class="line">    String name;<span class="comment">//卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;<span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;<span class="comment">//取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney;<span class="comment">//现在手里多少钱</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="comment">//synchronized 默认锁的是this</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//锁的对象是变化的量，需要增删改的对象。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account) &#123;<span class="comment">//解决办法：同步块</span></span><br><span class="line">            <span class="comment">//判断有没有钱</span></span><br><span class="line">            <span class="keyword">if</span>(account.money&lt;drawingMoney)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;取不了钱，账户余额不足&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时 放大问题的发生性</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//卡内余额 = 账户的钱 - 取了的钱</span></span><br><span class="line">            account.money = account.money - drawingMoney;</span><br><span class="line">            <span class="comment">//你手里的钱</span></span><br><span class="line">            nowMoney = nowMoney + drawingMoney;</span><br><span class="line"></span><br><span class="line">            System.out.println(account.name+<span class="string">&quot;余额为&quot;</span>+account.money);</span><br><span class="line">            <span class="comment">//this.getName() = Thread.currentThread().getName()</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的钱为&quot;</span>+nowMoney);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>不安全集合</strong>（解决办法：同步块）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;<span class="comment">//解决办法：同步块</span></span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-同步方法和同步块（synchronized）"><a href="#2-同步方法和同步块（synchronized）" class="headerlink" title="2.同步方法和同步块（synchronized）"></a>2.同步方法和同步块（synchronized）</h3><p>锁机制synchronized：隐式锁。在多线程竞争下，加锁和释锁会导致比较多的上下文切换和调度延时，造成性能问题。一个优先级高的线程等待一个优先级低的线程释放锁，会到导致优先级倒置，也会造成性能问题。</p>
<ul>
<li><p><strong>同步方法</strong></p>
<ul>
<li>synchronized方法 ：public synchronized void method(int a）{}</li>
<li>synchronized 默认锁的是this，控制对“对象”的访问，每个对象都有一把锁。</li>
<li>若将一个大的方法申明为synchronized 将会影响效率。</li>
</ul>
</li>
<li><p><strong>同步块</strong></p>
<ul>
<li> 同步块：synchronized (Obj ) { }</li>
<li>Obj是同步监视器，可以是任何对象，推荐使用共享资源作为Obj。一个线程访问的时候锁定Obj，执行其中的代码，然后解锁Obj，接着第二个线程锁定、执行、解锁，然后第三个······</li>
</ul>
</li>
</ul>
<h3 id="3-死锁"><a href="#3-死锁" class="headerlink" title="3.死锁"></a>3.死锁</h3><ul>
<li><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源 ，都停止执行的情形 。某一个同步块同时拥有“两个以上对象的锁”时，就可能会发生“死锁”的问题。</p>
</li>
<li><p>产生死锁的四个必要条件：</p>
<ol>
<li>互斥条件：一个资源每次只能被一个进程使用。</li>
<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件 : 进程已获得的资源，在末使用完之前，不能强行剥夺。</li>
<li>循环等待条件 : 若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
<p>只要攻破上述四个条件中的一个或者多个条件，就可以避免死锁的发生。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁，多个线程互相抱着对方需要的资源，然后形成僵持。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">&quot;灰姑娘&quot;</span>);</span><br><span class="line">        Makeup g2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line"></span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static来保证只有一份。</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName;<span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice,String girlName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;<span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (mirror)&#123;<span class="comment">//获得镜子的锁</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*synchronized (mirror)&#123;//获得镜子的锁</span></span><br><span class="line"><span class="comment">                System.out.println(this.girlName+&quot;获得了镜子的锁&quot;);</span></span><br><span class="line"><span class="comment">            &#125;解决办法：把获得镜子的锁的同步块移出来*/</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;<span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick)&#123;<span class="comment">//获得口红的锁</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*synchronized (lipstick)&#123;//获得口红的锁</span></span><br><span class="line"><span class="comment">                System.out.println(this.girlName+&quot;获得了口红的锁&quot;);</span></span><br><span class="line"><span class="comment">            &#125;解决办法：把获得口红的锁的同步块移出来*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Lock（锁）"><a href="#4-Lock（锁）" class="headerlink" title="4.Lock（锁）"></a>4.Lock（锁）</h3><ul>
<li>Lock：显示锁（手动开启关闭锁），只有代码块锁。使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lock锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            lock.lock();<span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticketNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNums--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();<span class="comment">//解锁，如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、线程协作"><a href="#五、线程协作" class="headerlink" title="五、线程协作"></a>五、线程协作</h2><h3 id="1-线程通信（生产者消费者模式）"><a href="#1-线程通信（生产者消费者模式）" class="headerlink" title="1.线程通信（生产者消费者模式）"></a>1.线程通信（生产者消费者模式）</h3><ul>
<li>这是一个线程同步问题（不同线程之间的消息传递），生产者和消费者共享同一个资源，二者互相依赖，互为条件。</li>
<li>对于生产者，没有产品， 生产产品时，通知消费者等待，生产了产品，通知消费者消费。</li>
<li>对与消费者，没消费产品之后，通知生产者生产。</li>
<li>wait()：表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁。</li>
<li>wait(long timeout)：指定等待的毫秒数。</li>
<li>notify()：唤醒一个处于等待状态的线程。</li>
<li>notifyAll()：唤醒同一个对象上所有调用wait()方法的线程。</li>
</ul>
<p><strong>解决方式一：管程法</strong></p>
<ul>
<li>通过数据缓冲区处理，生产者将产品放入缓冲区，消费者从缓冲区取出产品。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试：生产者消费者问题--&gt;利用缓冲区解决：管程法</span></span><br><span class="line"><span class="comment">//生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    SynContainer container;<span class="comment">//容器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了--&gt;&quot;</span>+container.pup().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，生产者等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count==chickens.length)&#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没满，生产者丢入产品</span></span><br><span class="line">        chickens[count] =chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否能消费</span></span><br><span class="line">        <span class="keyword">if</span> (count==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//消费者等待生产者生产。</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//吃完了，通知生产者</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方式二：信号灯法</strong></p>
<ul>
<li>通过标志为解决。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试生产者消费者问题2：信号灯法，标志位解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TsetPc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Wacher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者--&gt;演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;快乐大本营播放中&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;抖音：纪律美好生活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者--&gt;观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wacher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wacher</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品--&gt;节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="comment">//演员表演，观众等待 T</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待 F</span></span><br><span class="line">    String voice;<span class="comment">//表演的节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();<span class="comment">//演员等待</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了节目--&gt;&quot;</span>+voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();<span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;<span class="comment">//切换标志位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();<span class="comment">//观众等待</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看节目--&gt;&quot;</span>+voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();<span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;<span class="comment">//切换标志位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2.线程池"></a>2.线程池</h3><ul>
<li>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。 可以避免频繁创建销毁、实现重复利用。</li>
<li>提高响应速度，降低资源消耗，便于线程管理。</li>
<li>ExecutorSerivce：真正的线程池接口。Executors:工具类，用于创建并返回不同类型的线程池。</li>
<li>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执 行Runnable。</li>
<li>Future submit(Callable task)：执行任务，有返回值，一般又来执行 Callable。</li>
<li>void shutdown() 关闭连接池。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//newFixedThreadPool 参数为：线程池大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合框架</title>
    <url>/2021/08/18/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h2><ul>
<li><p><strong>概念</strong>：对象的容器，定义了许多对对象进行操作的的常用方法。可实现数组的功能。</p>
</li>
<li><p><strong>和数组的区别</strong>：</p>
<ol>
<li>数组长度固定，集合长度不固定。</li>
<li>数组可以存储基本类型和引用类型，集合只能存储引用类型。</li>
</ol>
</li>
<li><p><strong>位置</strong>： java.util.*;</p>
</li>
</ul>
<hr>
<h2 id="二、Collection体系"><a href="#二、Collection体系" class="headerlink" title="二、Collection体系"></a>二、Collection体系</h2><p><img src="https://pic.imgdb.cn/item/5f9912e21cd1bbb86b6c3035.png" alt="img"></p>
<hr>
<h3 id="1-Collection父接口"><a href="#1-Collection父接口" class="headerlink" title="1.Collection父接口"></a>1.Collection父接口</h3><ul>
<li><p><strong>特点</strong>：代表一组任意类型的对象，无序、无下标、不能重复。</p>
<ul>
<li>创建集合：<code>Collection collection = new ArrayList();</code></li>
</ul>
</li>
<li><p><strong>常用方法</strong>：</p>
<ul>
<li>添加元素：<code>collection.add();</code></li>
<li>将一个集合中的所有元素添加到此集合中：<code>collection.addAll(Collection c);</code></li>
<li>清空集合的所有元素：<code>collection.clear();</code></li>
<li>在集合中删除o元素。<code>collection.remove(Object o);</code></li>
<li>检查集合中是否包含o元素：<code>collection.contains(Object o);</code></li>
<li>判断集合是否为空：<code>collection.isEmpty();</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection接口的使用</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Collection collection=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        collection.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+collection.size());</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        collection.remove(<span class="string">&quot;榴莲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后：&quot;</span>+collection.size());</span><br><span class="line">        <span class="comment">//3.遍历元素</span></span><br><span class="line">        <span class="comment">//3.1 使用增强for</span></span><br><span class="line">        <span class="keyword">for</span>(Object object : collection)&#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）</span></span><br><span class="line">        <span class="comment">//hasnext();判断是否有下一个元素</span></span><br><span class="line">        <span class="comment">//next();获取下一个元素</span></span><br><span class="line">        <span class="comment">//remove();删除当前元素</span></span><br><span class="line">        Iterator iterator=collection.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            String object=(String)iterator.next();</span><br><span class="line">            System.out.println(object);</span><br><span class="line">            <span class="comment">//删除操作</span></span><br><span class="line">            <span class="comment">//collection.remove(object);引发错误：并发修改异常</span></span><br><span class="line">            <span class="comment">//iterator.remove();应使用迭代器的方法</span></span><br><span class="line">            <span class="comment">// 4.判断</span></span><br><span class="line">            System.out.println(collection.contains(<span class="string">&quot;西瓜&quot;</span>));<span class="comment">//true</span></span><br><span class="line">            System.out.println(collection.isEmpty());<span class="comment">//false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="2-Collection子接口"><a href="#2-Collection子接口" class="headerlink" title="2.Collection子接口"></a>2.Collection子接口</h3><h4 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h4><ul>
<li><p><strong>特点</strong>：有序、有下标、不唯一、元素可以重复。</p>
<ul>
<li>创建方法：<code>List list = new ArrayList&lt;&gt;();</code></li>
</ul>
</li>
<li><p><strong>常用方法</strong>：</p>
<ul>
<li><p>添加元素： <code>list.add();</code>会对基本类型进行自动装箱。</p>
</li>
<li><p>删除元素：<code>list.remove(0);</code></p>
</li>
<li><p>获取指定的元素：<code>list.indexOf();</code></p>
</li>
<li><p>获取第一个和第二个元素（左闭右开）：<code>list.subList(1, 3);</code></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List子接口的使用（一）</span></span><br><span class="line"><span class="comment"> * 特点：1.有序有下标 2.可以重复，不唯一</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> * 5.获取位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        list.add(<span class="number">0</span>,<span class="string">&quot;wang&quot;</span>);<span class="comment">//插入操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//list.remove(&quot;yu&quot;);结果同上</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后：&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        <span class="comment">//3.遍历元素</span></span><br><span class="line">        <span class="comment">//3.1 使用for遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();++i) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用增强for</span></span><br><span class="line">        <span class="keyword">for</span>(Object object:list) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.3 使用迭代器</span></span><br><span class="line">        Iterator iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。</span></span><br><span class="line">        ListIterator listIterator=list.listIterator();</span><br><span class="line">        <span class="comment">//从前往后</span></span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后往前（此时“遍历指针”已经指向末尾）</span></span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(listIterator.previous());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;zhang&quot;</span>));</span><br><span class="line">        <span class="comment">//5.获取位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;li&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List子接口的使用（二）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.获取元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//1.添加数字数据（自动装箱）</span></span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//list.remove(20);很明显数组越界错误，改成如下</span></span><br><span class="line">        <span class="comment">//list.remove((Object)20);</span></span><br><span class="line">        <span class="comment">//list.remove(new Integer(20));</span></span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+list.size());</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        <span class="comment">//3-5不再演示，与之前类似</span></span><br><span class="line">        <span class="comment">//6.补充方法subList，返回子集合，含头不含尾</span></span><br><span class="line">        List list2=list.subList(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(list2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a>List实现类</h4><h5 id="1、ArrayList【重点】"><a href="#1、ArrayList【重点】" class="headerlink" title="1、ArrayList【重点】"></a>1、ArrayList【重点】</h5><ul>
<li><strong>特点</strong>：<ul>
<li>数组结构实现，必须要连续空间，查询块、增删慢。</li>
<li>JDK1.2版本，运行效率快、线程不安全。</li>
</ul>
</li>
<li><strong>常用方法</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ArrayList的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：数组；</span></span><br><span class="line"><span class="comment"> * 特点：查找遍历速度快，增删慢。</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历元素</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> * 5.查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        arrayList.add(s1);</span><br><span class="line">        arrayList.add(s2);</span><br><span class="line">        arrayList.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+arrayList.size());</span><br><span class="line">        System.out.println(arrayList.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        arrayList.remove(s1);</span><br><span class="line">        <span class="comment">//arrayList.remove(new Student(&quot;唐&quot;, 21));</span></span><br><span class="line">        <span class="comment">//注：这样可以删除吗（不可以）？显然这是两个不同的对象。</span></span><br><span class="line">        <span class="comment">//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？</span></span><br><span class="line">        <span class="comment">//3.遍历元素</span></span><br><span class="line">        <span class="comment">//3.1使用迭代器</span></span><br><span class="line">        Iterator iterator=arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2使用列表迭代器</span></span><br><span class="line">        ListIterator listIterator=arrayList.listIterator();</span><br><span class="line">        <span class="comment">//从前往后遍历</span></span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后往前遍历</span></span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasPrevious()) &#123;</span><br><span class="line">            System.out.println(listIterator.previous());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(arrayList.isEmpty());</span><br><span class="line">        System.out.println(arrayList.contains(<span class="keyword">new</span> Student(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>)));<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//注：与上文相同的问题。</span></span><br><span class="line">        <span class="comment">//5.查找</span></span><br><span class="line">        System.out.println(arrayList.indexOf(s1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：Object里的equals(this==obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.是否为同一对象</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>==obj) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2.判断是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (obj==<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3.判断是否是Student类型</span></span><br><span class="line">	<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">		Student student=(Student) obj;</span><br><span class="line">		<span class="comment">//4.比较属性</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.name.equals(student.getName())&amp;&amp;<span class="keyword">this</span>.age==student.age) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//不满足，返回false</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h5><ul>
<li>默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code></li>
<li>没有向集合中添加任何元素时，集合容量为0，添加一个元素后，集合容量为10。</li>
<li>存放元素的数组：<code>transient Object[] elementData;</code></li>
<li>实际元素个数：<code>private int size;</code></li>
<li>每次扩容是原来的1.5倍。</li>
</ul>
<hr>
<h5 id="2、Vector"><a href="#2、Vector" class="headerlink" title="2、Vector"></a>2、Vector</h5><ul>
<li><strong>特点</strong>：<ul>
<li>数组结构实现，查询快、增删慢。</li>
<li>JDK1.0版本，运行效率慢、线程安全。</li>
</ul>
</li>
<li><strong>常用方法</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Vector的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *1.添加数据</span></span><br><span class="line"><span class="comment"> *2.删除数据</span></span><br><span class="line"><span class="comment"> *3.遍历</span></span><br><span class="line"><span class="comment"> *4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector vector=<span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="comment">//1.添加数据</span></span><br><span class="line">        vector.add(<span class="string">&quot;张&quot;</span>);</span><br><span class="line">        vector.add(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">        vector.add(<span class="string">&quot;王&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+vector.size());</span><br><span class="line">        <span class="comment">//2.删除数据</span></span><br><span class="line">        <span class="comment">//vector.remove(0); vector.remove(&quot;tang&quot;);</span></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//使用枚举器</span></span><br><span class="line">        Enumeration elements = vector.elements();</span><br><span class="line">        <span class="keyword">while</span> (elements.hasMoreElements()) &#123;</span><br><span class="line">            String s = (String) elements.nextElement();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(vector.isEmpty());</span><br><span class="line">        System.out.println(vector.contains(<span class="string">&quot;李&quot;</span>));</span><br><span class="line">        <span class="comment">//5. Vector其他方法</span></span><br><span class="line">        <span class="comment">//firstElement()  lastElement()  ElementAt();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="3、LinkedList"><a href="#3、LinkedList" class="headerlink" title="3、LinkedList"></a>3、LinkedList</h5><ul>
<li><strong>特点</strong>：<ul>
<li>双向链表结构实现，无需连续空间，增删快，查询慢。</li>
</ul>
</li>
<li><strong>常用方法</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LinkedList的用法</span></span><br><span class="line"><span class="comment"> * 存储结构：双向链表</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinkedList02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList linkedList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        linkedList.add(s1);</span><br><span class="line">        linkedList.add(s2);</span><br><span class="line">        linkedList.add(s3);</span><br><span class="line">        linkedList.add(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数：&quot;</span>+linkedList.size());</span><br><span class="line">        System.out.println(linkedList.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        <span class="comment">//linkedList.remove(new Student(&quot;唐&quot;, 21));</span></span><br><span class="line">        <span class="comment">//System.out.println(linkedList.toString());</span></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//3.1 使用for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;linkedList.size();i++) &#123;</span><br><span class="line">            System.out.println(linkedList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用增强for</span></span><br><span class="line">        <span class="keyword">for</span>(Object object:linkedList) &#123;</span><br><span class="line">            Student student=(Student) object;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.3 使用迭代器</span></span><br><span class="line">        Iterator iterator =linkedList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Student student = (Student) iterator.next();</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.4 使用列表迭代器</span></span><br><span class="line">        ListIterator listIterator = linkedList.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext())&#123;</span><br><span class="line">            Student student = (Student) listIterator.next();</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 判断</span></span><br><span class="line">        System.out.println(linkedList.contains(s1));</span><br><span class="line">        System.out.println(linkedList.isEmpty());</span><br><span class="line">        System.out.println(linkedList.indexOf(s3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h5><ul>
<li>ArrayList：必须开辟连续空间，查询快，增删慢，数组结构实现。</li>
<li>LinkedList：无需开辟连续空间，查询慢，增删快，双向链表结构实现。</li>
</ul>
<p><img src="https://pic.downk.cc/item/5f9a6b371cd1bbb86bc74cda.png" alt="img"></p>
<hr>
<h4 id="Set子接口"><a href="#Set子接口" class="headerlink" title="Set子接口"></a>Set子接口</h4><ul>
<li><strong>特点</strong>：无序、无下标、唯一的、元素不可重复。</li>
<li><strong>方法</strong>：全部继承自Collection中的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Set接口的使用</span></span><br><span class="line"><span class="comment"> * 特点：1.无序，没有下标；2.不能重复，</span></span><br><span class="line"><span class="comment"> * 1.添加数据</span></span><br><span class="line"><span class="comment"> * 2.删除数据</span></span><br><span class="line"><span class="comment"> * 3.遍历【重点】</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="comment">//1.添加数据</span></span><br><span class="line">        set.add(<span class="string">&quot;张&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;王&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据个数：&quot;</span>+set.size());</span><br><span class="line">        System.out.println(set.toString());<span class="comment">//无序输出</span></span><br><span class="line">        <span class="comment">//2.删除数据</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * set.remove(&quot;tang&quot;); System.out.println(set.toString());</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.遍历【重点】</span></span><br><span class="line">        <span class="comment">//3.1 使用增强for</span></span><br><span class="line">        <span class="keyword">for</span> (String string : set) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator=set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(set.contains(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        System.out.println(set.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a>Set实现类</h4><h5 id="1、HashSet【重点】"><a href="#1、HashSet【重点】" class="headerlink" title="1、HashSet【重点】"></a>1、HashSet【重点】</h5><ul>
<li><strong>存储结构</strong>：哈希表（数组+链表+红黑树）</li>
<li><strong>存储过程（重复依据）</strong>：<ol>
<li>根据hashCode计算保存的位置，如果位置为空，则直接保存，位置不为空，执行第二步。</li>
<li>执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。</li>
</ol>
</li>
<li><strong>特点</strong>：<ul>
<li>基于HashCode计算元素存放位置：<ol>
<li>利用31这个质数，在计算时可以尽量减少散列冲突。</li>
<li>可以提高执行效率，因为31*i=(i&lt;&lt;5)-i，31乘以一个数可以转换成移位操作，这样能快一点。</li>
</ol>
</li>
<li>当存入元素的哈希码相同时，会调用equals进行确认，如果结果为true，则拒绝后者存入。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashSet集合的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：哈希表（数组+链表+红黑树）</span></span><br><span class="line"><span class="comment"> * 1.添加元素</span></span><br><span class="line"><span class="comment"> * 2.删除元素</span></span><br><span class="line"><span class="comment"> * 3.遍历</span></span><br><span class="line"><span class="comment"> * 4.判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashSet02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Person&gt; hashSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;张&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;王&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        hashSet.add(p1);</span><br><span class="line">        hashSet.add(p2);</span><br><span class="line">        hashSet.add(p3);</span><br><span class="line">        <span class="comment">//重复，添加失败</span></span><br><span class="line">        hashSet.add(p3);</span><br><span class="line">        <span class="comment">//直接new一个相同属性的对象，依然会被添加，因为这是俩个对象。只不过他们俩属性相同。</span></span><br><span class="line">        <span class="comment">//hashSet.add(new Person(&quot;yu&quot;, 21));</span></span><br><span class="line">        <span class="comment">//注：假如相同属性便认为是同一个对象，怎么修改？</span></span><br><span class="line">        System.out.println(hashSet.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        hashSet.remove(p2);</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//3.1 增强for</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : hashSet) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 迭代器</span></span><br><span class="line">        Iterator&lt;Person&gt; iterator=hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(hashSet.isEmpty());</span><br><span class="line">        <span class="comment">//直接new一个相同属性的对象结果输出是false，因为这是俩个对象。只不过他们俩属性相同。</span></span><br><span class="line">        System.out.println(hashSet.contains(<span class="keyword">new</span> Person(<span class="string">&quot;张&quot;</span>, <span class="number">21</span>)));</span><br><span class="line">        <span class="comment">//注：假如相同属性便认为是同一个对象，该怎么做？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：要实现“注”里的问题，可以重写hashCode和equals代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">      result = prime * result + age;</span><br><span class="line">      result = prime * result + ((name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Person other = (Person) obj;</span><br><span class="line">      <span class="keyword">if</span> (age != other.age)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.equals(other.name))</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//人类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="2、TreeSet"><a href="#2、TreeSet" class="headerlink" title="2、TreeSet"></a>2、TreeSet</h5><ul>
<li>基于排序顺序实现不重复。</li>
<li>实现了SortedSet接口，对集合元素自动排序。</li>
<li>元素对象的类型必须实现Comparable接口，指定排序规则。</li>
<li>通过CompareTo方法确定是否为重复元素。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用TreeSet保存数据</span></span><br><span class="line"><span class="comment"> * 存储结构：红黑树</span></span><br><span class="line"><span class="comment"> * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Person&gt; persons= <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;张&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;王&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        persons.add(p1);</span><br><span class="line">        persons.add(p2);</span><br><span class="line">        persons.add(p3);</span><br><span class="line">        <span class="comment">//注：直接添加会报类型转换错误，需要实现Comparable接口</span></span><br><span class="line">        System.out.println(persons.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        persons.remove(p1);</span><br><span class="line">        persons.remove(<span class="keyword">new</span> Person(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>));</span><br><span class="line">        System.out.println(persons.toString());</span><br><span class="line">        <span class="comment">//3.遍历  foreach循环   迭代器</span></span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(persons.contains(<span class="keyword">new</span> Person(<span class="string">&quot;王&quot;</span>, <span class="number">21</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：人类中实现Comparable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="comment">//1.先按姓名比</span></span><br><span class="line">	<span class="comment">//2.再按年龄比</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n1=<span class="keyword">this</span>.getName().compareTo(o.getName());</span><br><span class="line">		<span class="keyword">int</span> n2=<span class="keyword">this</span>.age-o.getAge();</span><br><span class="line">		<span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>比较器</strong>：除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeSet的使用</span></span><br><span class="line"><span class="comment"> * Comparator：实现定制比较（比较器）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeSet02</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet&lt;Person&gt; persons = <span class="keyword">new</span> TreeSet&lt;Person&gt;(<span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//先年龄比较</span></span><br><span class="line">                    <span class="comment">//按姓名比较</span></span><br><span class="line">                    <span class="keyword">int</span> n1=o1.getAge()-o2.getAge();</span><br><span class="line">                    <span class="keyword">int</span> n2=o1.getName().compareTo(o2.getName());</span><br><span class="line">                    <span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;zhang&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;li&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;wang&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        persons.add(p1);</span><br><span class="line">        persons.add(p2);</span><br><span class="line">        persons.add(p3);</span><br><span class="line">        System.out.println(persons.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要求：使用TreeSet集合实现字符串按照长度进行排序</span></span><br><span class="line"><span class="comment"> * Comparator接口实现定制比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeSet03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合，指定比较规则</span></span><br><span class="line">        TreeSet&lt;String&gt; treeSet=<span class="keyword">new</span> TreeSet&lt;String&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//先比较字符串长度</span></span><br><span class="line">            <span class="comment">//再比较字符串</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> n1=o1.length()-o2.length();</span><br><span class="line">                <span class="keyword">int</span> n2=o1.compareTo(o2);</span><br><span class="line">                <span class="keyword">return</span> n1==<span class="number">0</span>?n2:n1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeSet.add(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line">        System.out.println(treeSet.toString());</span><br><span class="line">        <span class="comment">//输出[lisi, wangwu, zhaoliu, zhangsan, helloworld]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、Map集合概述"><a href="#三、Map集合概述" class="headerlink" title="三、Map集合概述"></a>三、Map集合概述</h2><ul>
<li><p><strong>Map接口的特点</strong>：</p>
<ol>
<li><p>用于存储任意键值对(Key-Value)。</p>
</li>
<li><p>键：无序、无下标、不允许重复（唯一）。</p>
</li>
<li><p>值：无序、无下标、允许重复（不唯一）。</p>
</li>
</ol>
</li>
<li><p><strong>方法</strong>：</p>
<ul>
<li><p><code>V put(K key,V value)</code>//将对象存入到集合中，关联键值。key重复则覆盖原值。</p>
</li>
<li><p><code>Object get(Object key)</code>//根据键获取相应的值。</p>
</li>
<li><p><code>Set&lt;K&gt;</code>//返回所有的key</p>
</li>
<li><p><code>Collection&lt;V&gt; values()</code>//返回包含所有值的Collection集合。</p>
</li>
<li><p><code>Set&lt;Map.Entry&lt;K,V&gt;&gt;</code>//键值匹配的set集合</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map接口的使用</span></span><br><span class="line"><span class="comment"> * 特点：1.存储键值对 2.键不能重复，值可以重复 3.无序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        map.put(<span class="string">&quot;李&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        map.remove(<span class="string">&quot;李&quot;</span>);</span><br><span class="line">        System.out.println(map.toString());</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//3.1 使用keySet();</span></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot; &quot;</span>+map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用entrySet();效率较高</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Map集合的实现类"><a href="#Map集合的实现类" class="headerlink" title="Map集合的实现类"></a>Map集合的实现类</h3><h4 id="1、HashMap【重点】"><a href="#1、HashMap【重点】" class="headerlink" title="1、HashMap【重点】"></a>1、HashMap【重点】</h4><ul>
<li><strong>存储结构</strong>：哈希表（数组+链表+红黑树）</li>
<li>JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HashMap的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：哈希表（数组+链表+红黑树）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashMap02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Student, String&gt; hashMap=<span class="keyword">new</span> HashMap&lt;Student, String&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">36</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">101</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        hashMap.put(s1, <span class="string">&quot;成都&quot;</span>);</span><br><span class="line">        hashMap.put(s2, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">        hashMap.put(s3, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line">        <span class="comment">//hashMap.put(s3, &quot;上海&quot;);//添加失败，但会更新值</span></span><br><span class="line">        hashMap.put(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">10</span>),<span class="string">&quot;郑州&quot;</span>);<span class="comment">//添加成功，不过他们俩的属性一模一样；</span></span><br><span class="line">        <span class="comment">//注：假如相同属性便认为是同一个对象，怎么修改？（学生类重些hashode和equals）</span></span><br><span class="line">        System.out.println(hashMap.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        hashMap.remove(s3);</span><br><span class="line">        System.out.println(hashMap.toString());</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//3.1 使用keySet()遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Student key : hashMap.keySet()) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot; &quot;</span>+hashMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用entrySet()遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        <span class="comment">//注：同上</span></span><br><span class="line">        System.out.println(hashMap.containsKey(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">10</span>)));<span class="comment">//false</span></span><br><span class="line">        System.out.println(hashMap.containsValue(<span class="string">&quot;郑州&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Student student = (Student) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(name, student.name) &amp;&amp;</span><br><span class="line">            Objects.equals(age, student.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h4><ul>
<li>HashMap刚创建时，table是null，节省空间，当添加第一个元素时，table容量调整为16。</li>
<li>HashMap存储的数组：<code>transient Node&lt;K,V&gt;[] table;</code></li>
<li>默认初始化容量：<code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</code></li>
<li>当元素个数大于阈值（16*0.75 = 12）时，会进行扩容，扩容后的大小为原来的两倍，目的是减少调整元素的个数。</li>
<li>默认加载因子：<code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></li>
<li>jdk1.8 当每个链表长度 &gt;8 ，并且数组元素个数 ≥64时，会调整成红黑树，目的是提高效率</li>
<li>链表调整为红黑树的链表长度阈值（JDK1.8）：<code>static final int TREEIFY_THRESHOLD = 8;</code></li>
<li>红黑树调整为链表的链表长度阈值（JDK1.8）：<code>static final int UNTREEIFY_THRESHOLD = 6;</code></li>
<li>链表调整为红黑树的数组最小阈值（JDK1.8）：<code>static final int MIN_TREEIFY_CAPACITY = 64;</code></li>
<li>HashMap存储的元素个数：<code>transient int size;</code></li>
</ul>
<hr>
<h4 id="HashSet源码分析"><a href="#HashSet源码分析" class="headerlink" title="HashSet源码分析"></a>HashSet源码分析</h4><p>可以看见HashSet的存储结构就是HashMap。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYpublic <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">      <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>那它的存储方式是怎样的呢？可以看一下add方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">COPYpublic <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。</p>
<hr>
<h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><ul>
<li>JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。</li>
<li>稍微了解即可。</li>
</ul>
<h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><ul>
<li>Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。</li>
<li>它继承了Hashtable的方法，与流关系密切。</li>
</ul>
<h4 id="2、TreeMap"><a href="#2、TreeMap" class="headerlink" title="2、TreeMap"></a>2、TreeMap</h4><ul>
<li>实现了SortedMap接口（是Map的子接口），可以对key自动排序。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TreeMap的使用</span></span><br><span class="line"><span class="comment"> * 存储结构：红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;Student, Integer&gt; treeMap=<span class="keyword">new</span> TreeMap&lt;Student, Integer&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">36</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//1.添加元素</span></span><br><span class="line">        treeMap.put(s1, <span class="number">21</span>);</span><br><span class="line">        treeMap.put(s2, <span class="number">22</span>);</span><br><span class="line">        treeMap.put(s3, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小</span></span><br><span class="line">        System.out.println(treeMap.toString());</span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        treeMap.remove(<span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">10</span>));</span><br><span class="line">        System.out.println(treeMap.toString());</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//3.1 使用keySet()</span></span><br><span class="line">        <span class="keyword">for</span> (Student key : treeMap.keySet()) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot; &quot;</span>+treeMap.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.2 使用entrySet()</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot; &quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line">        System.out.println(treeMap.containsKey(s1));</span><br><span class="line">        System.out.println(treeMap.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在学生类中实现Comparable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYpublic <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1=<span class="keyword">this</span>.age-o.age;</span><br><span class="line">        <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除此之外还可以使用比较器来定制比较：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeMap&lt;Student, Integer&gt; treeMap2=<span class="keyword">new</span> TreeMap&lt;Student, Integer&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;			</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="TreeSet源码"><a href="#TreeSet源码" class="headerlink" title="TreeSet源码"></a>TreeSet源码</h4><p>TreeSet的存储结构实际上就是TreeMa：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYpublic <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line">    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看其存储方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">COPYpublic <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。</p>
<hr>
<h2 id="四、泛型概述"><a href="#四、泛型概述" class="headerlink" title="四、泛型概述"></a>四、泛型概述</h2><ul>
<li>本质是参数化类型，把类型作为参数传递。</li>
<li>常见形式有泛型类、泛型接口、泛型方法。</li>
<li><strong>语法</strong>：<ul>
<li>&lt;T,…&gt; T称为类型占位符，表示一种引用类型，可以写多个逗号隔开。</li>
</ul>
</li>
<li><strong>好处</strong>：<ul>
<li>提高代码的重用性。</li>
<li>防止类型转换异常，提高代码的安全性。</li>
</ul>
</li>
</ul>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类</span></span><br><span class="line"><span class="comment"> * 语法：类名&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGeneric</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建泛型变量</span></span><br><span class="line">    <span class="comment">//不能使用new来创建，因为泛型是不确定的类型，也可能拥有私密的构造方法。</span></span><br><span class="line">    T t;</span><br><span class="line">    <span class="comment">//2.泛型作为方法的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//泛型作为方法的返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *使用泛型类创建对象 </span></span><br><span class="line"><span class="comment"> *注意：</span></span><br><span class="line"><span class="comment"> * 1.泛型只能使用引用类型</span></span><br><span class="line"><span class="comment"> * 2.不同泛型类型的对象不能相互赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用泛型类创建对象</span></span><br><span class="line">        MyGeneric&lt;String&gt; genericType=<span class="keyword">new</span> MyGeneric&lt;String&gt;();</span><br><span class="line">        genericType.t=<span class="string">&quot;wang&quot;</span>;</span><br><span class="line">        genericType.show(<span class="string">&quot;w&quot;</span>);</span><br><span class="line"></span><br><span class="line">        MyGeneric&lt;Integer&gt; genericType1=<span class="keyword">new</span> MyGeneric&lt;Integer&gt;();</span><br><span class="line">        genericType1.t=<span class="number">10</span>;</span><br><span class="line">        genericType1.show(<span class="number">20</span>);</span><br><span class="line">        Integer integer=genericType1.getT();</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口</span></span><br><span class="line"><span class="comment"> * 语法：接口名&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 注意：不能创建泛型静态常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//创建常量（非静态）</span></span><br><span class="line">	String nameString=<span class="string">&quot;zhang&quot;</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="function">T <span class="title">server</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口时确定泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">server</span><span class="params">(String t)</span> </span>&#123;</span><br><span class="line">		System.out.println(t);</span><br><span class="line">		<span class="keyword">return</span> t; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyInterfaceImpl myInterfaceImpl=<span class="keyword">new</span> MyInterfaceImpl();</span><br><span class="line">myInterfaceImpl.server(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="comment">//xxx</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口时不确定泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">server</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		System.out.println(t);</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyInterfaceImpl2&lt;Integer&gt; myInterfaceImpl2=<span class="keyword">new</span> MyInterfaceImpl2&lt;Integer&gt;();</span><br><span class="line">myInterfaceImpl2.server(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//2000</span></span><br></pre></td></tr></table></figure>

<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法</span></span><br><span class="line"><span class="comment"> * 语法：&lt;T&gt; 返回类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;泛型方法&quot;</span>+t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">MyGenericMethod myGenericMethod=<span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">myGenericMethod.show(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">myGenericMethod.show(<span class="number">200</span>);</span><br><span class="line">myGenericMethod.show(<span class="number">3.14</span>);</span><br></pre></td></tr></table></figure>

<h3 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a>泛型集合</h3><ul>
<li><p><strong>概念</strong>：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</p>
</li>
<li><p><strong>特点</strong>：</p>
</li>
<li><p>编译时即可检查，而非运行时抛出异常。</p>
<ul>
<li>访问时，不必类型转换（拆箱）。</li>
</ul>
</li>
<li><p>不同泛型指尖引用不能相互赋值，泛型不存在多态。</p>
</li>
</ul>
<hr>
<h2 id="五、Collections工具类"><a href="#五、Collections工具类" class="headerlink" title="五、Collections工具类"></a>五、Collections工具类</h2><ul>
<li><p><strong>概念</strong>：集合工具类，定义了除了存取以外的集合常用方法。</p>
</li>
<li><p><strong>方法</strong>：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Collections工具类的使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sort排序</span></span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//binarySearch二分查找</span></span><br><span class="line">        <span class="keyword">int</span> i=Collections.binarySearch(list, <span class="number">10</span>);</span><br><span class="line">        System.out.println(i);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//copy复制</span></span><br><span class="line">        List&lt;Integer&gt; list2=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">0</span>;ii&lt;<span class="number">5</span>;ii++) &#123; <span class="comment">//ii&lt;4就会报错 下标越界</span></span><br><span class="line">            list2.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该方法要求目标元素容量大于等于源目标</span></span><br><span class="line">        Collections.copy(list2,list);</span><br><span class="line">        System.out.println(list2.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reserve反转</span></span><br><span class="line">        Collections.reverse(list2);</span><br><span class="line">        System.out.println(list2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//shuffle 打乱</span></span><br><span class="line">        Collections.shuffle(list2);</span><br><span class="line">        System.out.println(list2.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充：集合转成数组</span></span><br><span class="line">        Integer[] array = list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(array.length);</span><br><span class="line">        <span class="comment">//补充：数组转成集合，受限集合，不能添加和删除</span></span><br><span class="line">        String[] array1= &#123;<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="string">&quot;wang&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list3 = Arrays.asList(array1);</span><br><span class="line">        System.out.println(list3);</span><br><span class="line">        <span class="comment">//把基本类型数组转成集合时，需要修改为包装类</span></span><br><span class="line">        Integer[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; list4 = Arrays.asList(nums);</span><br><span class="line">        System.out.println(list4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习和练习</title>
    <url>/2021/09/10/%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="前端基础和练习"><a href="#前端基础和练习" class="headerlink" title="前端基础和练习"></a>前端基础和练习</h1><hr>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><blockquote>
<p>HTML—-超文本标记语言</p>
<p>HTML—-网页内容的载体</p>
<p>CSS—-样式是表现</p>
<p>JavaScript—-是用来实现网页上的特效效果</p>
</blockquote>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--p标签  段落标签</span></span><br><span class="line"><span class="comment">        ==&gt; align 对齐方式（center居中、左右）</span></span><br><span class="line"><span class="comment">        ==&gt; b 加粗  i 倾斜   underline 下划线</span></span><br><span class="line"><span class="comment">        ==&gt;</span></span><br><span class="line"><span class="comment">    br标签 换行标签</span></span><br><span class="line"><span class="comment">    h1标签 标题标签</span></span><br><span class="line"><span class="comment">    pre   原样标签</span></span><br><span class="line"><span class="comment">    hr    分割线标签		自闭和标签</span></span><br><span class="line"><span class="comment">    img   图片标签		 自闭和标签</span></span><br><span class="line"><span class="comment">        ==&gt;src地址 alt图片不正常显示所显示的内容</span></span><br><span class="line"><span class="comment">    a     超链接标签</span></span><br><span class="line"><span class="comment">    ==&gt;herf跳转的链接  target打开方式(blank新窗口 self当前窗口)</span></span><br><span class="line"><span class="comment">    ==&gt; 跳转到链接  跳转到锚点     </span></span><br><span class="line"><span class="comment">    ol    有序列表标签</span></span><br><span class="line"><span class="comment">    ul    无序列表标签</span></span><br><span class="line"><span class="comment">   center居中标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>sss<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;color: red;background-color: yellow&quot;</span>&gt;</span>晋中信息学院<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">underline</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试文本样式标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">underline</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/3.jpeg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px;height: 400px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img-blog.csdnimg.cn/20201014180756754.png?x-oss-process=image/resize,m_fixed,h_64,w_64&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;未知图片&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#num1&quot;</span>&gt;</span>跳转到第一段<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>第二个标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>第三个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>第四个标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>晋中信息学院是经国家教育部批准、由山西省教育厅主管的全日制普通本科高校。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>学校前身是成立于2002年的山西农业大学信息学院；<span class="tag">&lt;<span class="name">br</span>&gt;</span>2020年12月23日，教育部正式公布，山西农业大学信息学院转设更名为晋中信息学院。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>据2021年7月学校官网显示，学校占地面积近1000亩，建筑面积33.03万平方米，其中教学行政用房面积21.02万平方米；设有10个二级学院、4个教学部，开设有46个本科专业和若干国际合作项目（专业）；在校生1.5万余人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        静夜思 李白</span><br><span class="line">    床前明月光，疑是地上霜。</span><br><span class="line">    举头望明月，低头思故乡。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>橙子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;num1&quot;</span>&gt;</span>第一段：</span><br><span class="line">        如果我们想直接执行，还需要在手动转化一下，比较麻烦。</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        MyBatis Log Plugin 这款插件是直接将Mybatis执行的sql脚本显示出来，无需处理，可以直接复制出来执行的 。</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        注意其转换的SQL不是输出到IDE的控制台!!!</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        需要到Tools -- &gt;  Mybatis Log Plugin  打开其日志框（如果Tools下面没有的话，可以看下IDE的底部最右下角是否有&quot;Mybatis Log&quot;Tab按钮），</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        再执行， 效果是不是很赞</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        版权声明：本文为CSDN博主「Java技术攀登者」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        原文链接：https://blog.csdn.net/weixin_41846320/article/details/82697818</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    meta    编码格式</span></span><br><span class="line"><span class="comment">    embed   播放器</span></span><br><span class="line"><span class="comment">    marquee 滚动文字</span></span><br><span class="line"><span class="comment">    &amp;reg 注册商标  &amp;nbsp 空格</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;day01.html#num6&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>跳转到另一个网页的第六段<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;../img/mv/1.mp3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">behavior</span>=<span class="string">&quot;scroll&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;20px&quot;</span>&gt;</span>今天天气特别好<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;reg;</span> <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">table  表格</span></span><br><span class="line"><span class="comment">    ==&gt;tr：行    td：列    th：表头（加粗）    border：边框</span></span><br><span class="line"><span class="comment">    ==&gt;rowspan：行合并    colspan：列合并</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2021001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>门门<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2021002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>锋<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2021003<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>玛卡巴卡<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>from表单：采集和提交用户收集的信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">form：表单</span></span><br><span class="line"><span class="comment">	==&gt; action：提交地址    method：提交方式（get、post）</span></span><br><span class="line"><span class="comment">	input:</span></span><br><span class="line"><span class="comment">	1.input(text):文本框</span></span><br><span class="line"><span class="comment">	2.input(password):密码框</span></span><br><span class="line"><span class="comment">	3.input(radio):单选框</span></span><br><span class="line"><span class="comment">		==&gt;name定义一致 互斥 实现单选</span></span><br><span class="line"><span class="comment">		==&gt;checked：默认选择</span></span><br><span class="line"><span class="comment">	4.checkbox:多选框</span></span><br><span class="line"><span class="comment">		==&gt;checked：默认选择</span></span><br><span class="line"><span class="comment">	5.select:下拉选择框</span></span><br><span class="line"><span class="comment">		==&gt;option：下拉选项</span></span><br><span class="line"><span class="comment">		==&gt;selected：默认选择</span></span><br><span class="line"><span class="comment">	6.button:普通按钮    submit：提交按钮    reset：重置按钮</span></span><br><span class="line"><span class="comment">	7.name是控件名字，values是控件初始值（可选），size是控件初始长度，maxlength是输入最大字符数</span></span><br><span class="line"><span class="comment">label：文本标签</span></span><br><span class="line"><span class="comment">	==&gt;for：点击文本内容跳转的地方</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: blue 1px solid;width: 30%;margin: 20px auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpws&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请重复密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;repwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reuserpws&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex3&quot;</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hobby1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hobby1&quot;</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hobby2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hobby2&quot;</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hobby3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hobby3&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hobby4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby4&quot;</span> <span class="attr">value</span>=<span class="string">&quot;04&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hobby4&quot;</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>生日:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;year&quot;</span> <span class="attr">id</span>=<span class="string">&quot;year&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2001&quot;</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2002&quot;</span>&gt;</span>2002<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2003&quot;</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2004&quot;</span>&gt;</span>2004<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2005&quot;</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2006&quot;</span>&gt;</span>2006<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2007&quot;</span>&gt;</span>2007<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2008&quot;</span>&gt;</span>2008<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2009&quot;</span>&gt;</span>2009<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2010&quot;</span>&gt;</span>2010<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>年</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;7&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;8&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;9&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>月</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;day&quot;</span> <span class="attr">id</span>=<span class="string">&quot;day&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;7&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;8&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;9&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>日 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>容器标签，块元素，高度由子元素内容决定，宽度由他的内容决定。</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="1-CSS连接、选择器"><a href="#1-CSS连接、选择器" class="headerlink" title="1. CSS连接、选择器"></a>1. CSS连接、选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">CSS 内联式</span></span><br><span class="line"><span class="comment">    行内联式</span></span><br><span class="line"><span class="comment">    外联式 单独创建css文件，用link连接起来</span></span><br><span class="line"><span class="comment">选择器</span></span><br><span class="line"><span class="comment">    ==&gt;标签选择器   (名字)</span></span><br><span class="line"><span class="comment">    ==&gt;类选择器   .(名字)</span></span><br><span class="line"><span class="comment">    ==&gt;id选择器   #(名字)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*类选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.address</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>晋中信息学院双体系明猿二部<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;address&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:#b81d36;&quot;</span>&gt;</span></span><br><span class="line">        山西省晋中市太谷区学院路8号乌马河剧院负一层</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        web前端开发基础技术需要掌握：HTML、CSS、JavaScript语言。下面我们就来了解下这三门技术都是用来实现什么的：</span><br><span class="line">        1. HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</span><br><span class="line">        2. CSS样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</span><br><span class="line">        3. JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-背景样式"><a href="#2-背景样式" class="headerlink" title="2. 背景样式"></a>2. 背景样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">背景样式</span></span><br><span class="line"><span class="comment">    ==&gt;背景颜色 rgba</span></span><br><span class="line"><span class="comment">    ==&gt;图片背景</span></span><br><span class="line"><span class="comment">    ==&gt;背景重复</span></span><br><span class="line"><span class="comment">    ==&gt;背景附件 fix固定 scroll滚动</span></span><br><span class="line"><span class="comment">    ==&gt;背景位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#40AFFE</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: scroll;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">200px</span>,<span class="number">400px</span></span><br><span class="line">        /*可以写在一行*/    </span><br><span class="line">        /*background:<span class="number">#40AFFE</span> <span class="built_in">url</span>(<span class="string">&quot;../img/1.jpg&quot;</span>) no-repeat scroll <span class="number">200px</span>,<span class="number">400px</span>;*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-文本样式"><a href="#3-文本样式" class="headerlink" title="3. 文本样式"></a>3. 文本样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">文本样式</span></span><br><span class="line"><span class="comment">    ==&gt;文本颜色</span></span><br><span class="line"><span class="comment">    ==&gt;文本方向</span></span><br><span class="line"><span class="comment">    ==&gt;字符间距</span></span><br><span class="line"><span class="comment">    ==&gt;行高</span></span><br><span class="line"><span class="comment">    ==&gt;文本对齐方式</span></span><br><span class="line"><span class="comment">    ==&gt;文本修饰：下划线</span></span><br><span class="line"><span class="comment">    ==&gt;文本阴影：距x 距y 模糊度 颜色</span></span><br><span class="line"><span class="comment">    ==&gt;文本转换：大写 小写</span></span><br><span class="line"><span class="comment">    ==&gt;缩进</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">desc &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="attribute">direction</span>: ltr;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">5px</span> red;</span><br><span class="line">    <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-字体样式"><a href="#4-字体样式" class="headerlink" title="4. 字体样式"></a>4. 字体样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">字体样式</span></span><br><span class="line"><span class="comment">    ==&gt;设置字体</span></span><br><span class="line"><span class="comment">	==&gt;字体大小</span></span><br><span class="line"><span class="comment">    ==&gt;字体样式：斜体</span></span><br><span class="line"><span class="comment">    ==&gt;字体粗细</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">desc &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: 楷体;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: oblique;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-列表样式"><a href="#5-列表样式" class="headerlink" title="5.列表样式"></a>5.列表样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">列表样式</span></span><br><span class="line"><span class="comment">    ==&gt;列表项目外观</span></span><br><span class="line"><span class="comment">    ==&gt;列表符号位置</span></span><br><span class="line"><span class="comment">    ==&gt;图像列表标记</span></span><br><span class="line"><span class="comment">    ==&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: circle;</span><br><span class="line">    <span class="attribute">list-style-position</span>: outside;</span><br><span class="line">    // <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/1.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图像标签列表</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ol>
<li><p>星号（*）选择器 ==&gt; 全局选择</p>
</li>
<li><p>逗号（，）选择器 ==&gt; 联合选择器</p>
</li>
<li><p>空格（  ）选择器 ==&gt; 子孙选择器</p>
</li>
<li><p>大于号（&gt;）选择器 ==&gt; 子选择器</p>
</li>
<li><p>加号（+）选择器 ==&gt; 相邻兄弟选择器 选择弟</p>
</li>
<li><p>括号（[]）选择器 ==&gt; 属性选择器 </p>
</li>
<li><p>伪类</p>
<p>a:link {color:#FF0000;} 未访问的链接</p>
<p>a:visited {color:#00FF00;} 已访问的链接</p>
<p>a:hover {color:#FF00FF;} 鼠标划过链接</p>
<p>a:active {color:#0000FF;}  已选中的链接</p>
<p>focus 选择拥有键盘输入焦点的元素</p>
</li>
</ol>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><blockquote>
<p>行内元素：a、span、label、img、input（text）</p>
<p>块元素：p、div、h、table</p>
<p>display：block、inline、inline-block、none</p>
</blockquote>
<h3 id="div样式设置"><a href="#div样式设置" class="headerlink" title="div样式设置"></a>div样式设置</h3><p><strong>overflow</strong>：溢出</p>
<p><img src="https://pic.imgdb.cn/item/622c68185baa1a80ab8a67ff.png" alt="image-20211025172915474"></p>
<p><strong>outline</strong>：绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<ul>
<li>dotted点状轮廓，soild实现，double双线</li>
</ul>
<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul>
<li>width 内容宽度</li>
<li>height 内容高度</li>
<li>border 边框</li>
<li>margin 外边距 透明的 </li>
<li>padding 内边距<ul>
<li>box-sizing: border-box：通过压缩内容实现固定盒子大小，（内容+内边距+边框=宽高）</li>
</ul>
</li>
</ul>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p><strong>float</strong>：更改⻚⾯元素的排列布局⽅式，能实现我们⻚⾯的布局效果。</p>
<ul>
<li>left 左浮动</li>
<li>right 右浮动</li>
<li>none  默认值 不浮动</li>
</ul>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>top、right、bottom、left  ==&gt;  距离多少</li>
</ul>
<p><strong>相对定位</strong>：realtive ==&gt; 相对于自身</p>
<ul>
<li>以自己为参照物，移动位置，原来的位置信息去不掉</li>
<li><strong>不脱离</strong>文档流，文字不会顶上去</li>
<li>相对自身进行位置偏移，元素在原文档的位置继续保留</li>
</ul>
<p><strong>绝对定位</strong>：absolute ==&gt; 相对于父级空间</p>
<ul>
<li>以父级为参照物，没有父级则以body为参照物</li>
<li><strong>脱离</strong>文档流，文字会顶上去</li>
<li>相对有定位方式的父元素，若父元素没设置定位，找body控件为参照物</li>
</ul>
<p><strong>固定定位</strong>：fixed ==&gt; 以浏览器为参照物</p>
<p><strong>层叠</strong>：z-index ==&gt; 层叠模式</p>
<ul>
<li>层叠模式，数字大的在上边</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li>特定的描述性语言，按照格式进行编写的可执行文件。</li>
</ul>
<h3 id="js变量"><a href="#js变量" class="headerlink" title="js变量"></a><strong>js变量</strong></h3><ul>
<li>var x = 1；弱类型语言</li>
<li>声明的时候不区分数据类型，赋值的时候区分数据类型。</li>
</ul>
<h3 id="js调试"><a href="#js调试" class="headerlink" title="js调试"></a><strong>js调试</strong></h3><ul>
<li>alert(flag)：弹框调试</li>
<li>console.log(flag)：控制台输出调试</li>
</ul>
<h3 id="js函数"><a href="#js函数" class="headerlink" title="js函数"></a><strong>js函数</strong></h3><ul>
<li>function、全局变量、局部变量</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h3><p><img src="https://pic.imgdb.cn/item/622c68185baa1a80ab8a67e1.png" alt="image-20211101112343170"></p>
<p><img src="https://pic.imgdb.cn/item/622c68185baa1a80ab8a67ea.png" alt="image-20211101112353972"></p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li>parseInt()、parseFloat()、Number()、Boolean()</li>
<li>强制类型转换和隐式赋值转换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123a&quot;</span>;</span><br><span class="line"><span class="comment">//强制转换，数值型字符串转换成数值型</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(a)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;num1不能转换&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">Number</span>(a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a可以转换为：&quot;</span>+ n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式转换，数值型字符串转换成数值型</span></span><br><span class="line"><span class="built_in">console</span>.log(a * <span class="number">1</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><img src="https://pic.imgdb.cn/item/622c68e05baa1a80ab8af069.png" alt="image-20211101143609990"></p>
<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;520134199202242877&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length)<span class="comment">//18</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>substr(x,y)</strong> ==&gt; 截取内容，x起始位置，y长度</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//截取内容</span></span><br><span class="line"><span class="keyword">var</span> a = str.substr(<span class="number">6</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1992</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>substring(x,y)</strong>  ==&gt; 截取内容，x起始位置，y结束位置 ，左闭右开</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = str.substring(<span class="number">6</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1992</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>charAt(x)</strong> ==&gt; x索引位置的值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = str.charAt(<span class="number">16</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(a)<span class="comment">//7</span></span><br><span class="line">        a%<span class="number">2</span>==<span class="number">0</span>?<span class="built_in">console</span>.log(<span class="string">&quot;女&quot;</span>):<span class="built_in">console</span>.log(<span class="string">&quot;男&quot;</span>)<span class="comment">//男</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>indexOf(x,y)</strong> ==&gt; 获取x的索引值，y是开始检索的位置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = str.indexOf(<span class="number">0</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>split(“x”)</strong> ==&gt; 以x分割</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;王鑫，王伦，王洋&quot;</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot;，&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//forin 循环 遍历 数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> aKey <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[aKey])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通循环 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>concat(“x”,”y”,”z”)</strong> ==&gt; 拼接xyz  数组拼接会放在新的数组中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;王鑫，王伦，王洋&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">&quot;，我&quot;</span>))</span><br><span class="line"><span class="comment">//王鑫，王伦，王洋，我</span></span><br><span class="line"><span class="keyword">var</span> arr1 = arr.concat(<span class="string">&quot;玛卡巴卡&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="comment">//(4) [&#x27;王鑫&#x27;, &#x27;王伦&#x27;, &#x27;王洋&#x27;, &#x27;玛卡巴卡&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>replace(“x”,”y”)</strong> ==&gt; 将x替换成y</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;王鑫，王伦，王洋&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&quot;王&quot;</span>,<span class="string">&quot;wang&quot;</span>))</span><br><span class="line"><span class="comment">//wang鑫，王伦，王洋</span></span><br></pre></td></tr></table></figure>

<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul>
<li>获取日期函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前日期 new Date()</span></span><br><span class="line"><span class="keyword">var</span> nowDate1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2020-02-01 14:00:00&quot;</span>);</span><br><span class="line"><span class="comment">//Date里面传时间或者毫秒数 打印相应的时间</span></span><br><span class="line"><span class="built_in">console</span>.log(nowDate1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(nowDate)</span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getFullYear())</span><br><span class="line"><span class="comment">//月份获取比真实月分少一年</span></span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getMonth()+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getDate())</span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getHours())</span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getMinutes())</span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getSeconds())</span><br><span class="line"><span class="comment">//距离1970年1月1日0分0秒的毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(nowDate.getTime()/(<span class="number">365</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">16.654321</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(n));<span class="comment">//四舍五入 17</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toFixed(<span class="number">2</span>));<span class="comment">//保留几位小数 16.65</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>));<span class="comment">//最小值 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>));<span class="comment">//最大值 6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(-<span class="number">1</span>));<span class="comment">//绝对值 1</span></span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">student.name=<span class="string">&quot;mm&quot;</span>;</span><br><span class="line">student.age=<span class="number">18</span>;</span><br><span class="line">student.sex=<span class="string">&quot;女&quot;</span>;</span><br><span class="line">student[<span class="string">&quot;location&quot;</span>]=<span class="string">&quot;山西太谷大威村&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">var</span> product = &#123;</span><br><span class="line">    <span class="attr">pdi</span>: <span class="string">&quot;p001&quot;</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&quot;手机&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">3999</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象和数组嵌套</span></span><br><span class="line"><span class="keyword">var</span> classinfo = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">classname</span>: <span class="string">&quot;明猿&quot;</span>,</span><br><span class="line">    <span class="attr">totil</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="attr">student</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="attr">studentlist</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;乔瑞锋&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">score</span>: <span class="number">100</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;刘艺萌&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">score</span>: <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组嵌套对象嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> orderlist = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">orderid</span>:<span class="string">&quot;s0001&quot;</span>, <span class="attr">price</span>: <span class="number">38</span>, <span class="attr">status</span>:<span class="string">&quot;已配送&quot;</span>,</span><br><span class="line">        <span class="attr">plist</span>:[</span><br><span class="line">            &#123;<span class="attr">pdi</span>: <span class="string">&quot;p001&quot;</span>, <span class="attr">pname</span>: <span class="string">&quot;手机&quot;</span>, <span class="attr">price</span>: <span class="number">3999</span>,<span class="attr">count</span>:<span class="number">10</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">pdi</span>: <span class="string">&quot;p002&quot;</span>, <span class="attr">pname</span>: <span class="string">&quot;电脑&quot;</span>, <span class="attr">price</span>: <span class="number">3999</span>,<span class="attr">count</span>:<span class="number">2</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">orderid</span>:<span class="string">&quot;s0002&quot;</span>, <span class="attr">price</span>: <span class="number">0</span>, <span class="attr">status</span>:<span class="string">&quot;未完成&quot;</span>,</span><br><span class="line">        <span class="attr">plist</span>:[]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>JavaScript对象:Array</p>
<ul>
<li>属性<ul>
<li>length,指明了数组的长度</li>
</ul>
</li>
<li>方法<ul>
<li>join() 将数组值连接变为一个字符串</li>
<li>reverse() 将数组值倒序</li>
<li>sort() 将对数组值进行排序</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr.join());<span class="comment">//数组值连接变成一个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse());<span class="comment">//反转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">55</span>]</span><br><span class="line"><span class="built_in">console</span>.log(nums.sort());<span class="comment">//排序</span></span><br></pre></td></tr></table></figure>

<h3 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;h2 style=&#x27;color: red&#x27;&gt;&quot;</span>+<span class="string">&quot;aaaa&quot;</span>+<span class="string">&quot;&lt;/h2&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请输入密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;chengeContect()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">chengeContect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nameele = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        nameele.value = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line">        nameele.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line">        nameele.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id</span></span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(element.value)</span><br><span class="line">    <span class="comment">//通过class</span></span><br><span class="line">    <span class="keyword">var</span> eles = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(eles.length);</span><br><span class="line">    <span class="comment">// for (const ele in eles) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(eles[ele])</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (eles[<span class="number">0</span>].checked == <span class="literal">true</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;选择的性别为男&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;选择的性别为女&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过标签名字</span></span><br><span class="line">    <span class="keyword">var</span> tageles = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="页面练习"><a href="#页面练习" class="headerlink" title="页面练习"></a>页面练习</h2><h3 id="图书界面"><a href="#图书界面" class="headerlink" title="图书界面"></a>图书界面</h3><p><img src="https://pic.imgdb.cn/item/622c68185baa1a80ab8a67f3.png" alt="image-20211026110249124"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#C9C5C5</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#booklist</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: lightblue;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">border</span>: gray solid <span class="number">0.5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bookitem</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: yellow;*/</span></span><br><span class="line">    <span class="comment">/*border: red solid 0.5px;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearitem</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.picDiv</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: lightpink;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.descDiv</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="comment">/*background-color: lightskyblue;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">198px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;booklist&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span>最新上架图书<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookitem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/book-01.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;descDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>20天java入门到精通<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            作者:刘源 著<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            出版社:信院双体系出版社 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>出版时间:2020,10,10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            定价:￥199 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            会员价:￥99</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookitem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/book-02.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;descDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>20天java入门到精通<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            作者:刘源 著<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            出版社:信院双体系出版社 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>出版时间:2020,10,10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            定价:￥199 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            会员价:￥99</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookitem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/book-03.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;descDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>20天java入门到精通<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            作者:刘源 著<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            出版社:信院双体系出版社 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>出版时间:2020,10,10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            定价:￥199 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            会员价:￥99</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookitem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/book-04.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;descDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>20天java入门到精通<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            作者:刘源 著<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            出版社:信院双体系出版社 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>出版时间:2020,10,10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            定价:￥199 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            会员价:￥99</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookitem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/book-05.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;descDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>20天java入门到精通<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            作者:刘源 著<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            出版社:信院双体系出版社 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>出版时间:2020,10,10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            定价:￥199 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            会员价:￥99</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bookitem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/book-06.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;descDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>20天java入门到精通<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            作者:刘源 著<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            出版社:信院双体系出版社 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>出版时间:2020,10,10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            定价:￥199 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            会员价:￥99</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--清除浮动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearitem&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="页面制作"><a href="#页面制作" class="headerlink" title="页面制作"></a>页面制作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/main.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>笔记<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>手记<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bgpicDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/1.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer-top&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>MY BEAUTIFUL LIFE<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>LOOK MORE <span class="symbol">&amp;nbsp;</span>&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid-first&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shareitem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/weibo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                        WEIBLOG</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shareitem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/weixin.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                        WEICHAT</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shareitem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/QQ.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                        QQ</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid-second&quot;</span>&gt;</span></span><br><span class="line">                &quot;I want to give good things to record down,after recall will be beautiful&quot;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid-last&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picitem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/03-01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                        CooL Image</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                        Record Picture</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picitem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/03-02.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                        CooL Image</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                        Record Picture</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;picitem&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/03-03.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                        CooL Image</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                        Record Picture</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                From the photo album</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bitem&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/04-01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bitem&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/img/04-02.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                    Life is always let us was black and blue all over, but afterwards, the injured local will become our most strong place.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*全局设置*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: yellow;*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: dimgray;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgpicDiv</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgpicDiv</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer-top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="comment">/*background-color: pink;*/</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer-top</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.layer-top</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">234</span>,<span class="number">107</span>,<span class="number">87</span>);</span><br><span class="line">    <span class="attribute">border</span>: white <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> lightgray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: pink;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-first</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-first</span> <span class="selector-class">.shareitem</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: yellow;*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.3333%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-first</span> <span class="selector-class">.clear</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shareitem</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shareitem</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: dimgray;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-second</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">    <span class="comment">/*background-color: yellow;*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">234</span>,<span class="number">107</span>,<span class="number">87</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-last</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-last</span> <span class="selector-class">.picitem</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: yellow;*/</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.333%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-last</span> <span class="selector-class">.clear</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.picitem</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.picitem</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.picitem</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444444</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: pink;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bitem</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: blue;*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bitem</span> <span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bitem</span> <span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bitem</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: pink;*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#636363</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> <span class="selector-class">.clear</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期选择框练习"><a href="#日期选择框练习" class="headerlink" title="日期选择框练习"></a>日期选择框练习</h2><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a><strong>HTML</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>日期选择联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.date</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;initymd()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>出生年月：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>年<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;year&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;changeymd()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>月<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;changeymd()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>日<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;day&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/d9_DateSelectDemo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a><strong>JavaScript</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化年月日的option</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initymd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> year = <span class="built_in">document</span>.getElementById(<span class="string">&quot;year&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> month = <span class="built_in">document</span>.getElementById(<span class="string">&quot;month&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> day = <span class="built_in">document</span>.getElementById(<span class="string">&quot;day&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取系统时间</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给下拉选择空间添加下拉选项</span></span><br><span class="line">    addOptions(year, <span class="number">1999</span>, now.getFullYear());</span><br><span class="line">    addOptions(month, <span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">    addOptions(day, <span class="number">1</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置年份下拉选项 选择中间项</span></span><br><span class="line">    <span class="keyword">var</span> length = year.length;</span><br><span class="line">    <span class="keyword">var</span> selecIndex = <span class="built_in">Math</span>.round(length / <span class="number">2</span>);</span><br><span class="line">    year.selectedIndex = selecIndex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装 添加option</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOptions</span>(<span class="params">object,start,end</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        object.options.add(<span class="keyword">new</span> Option(i,i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当月份选择内容变化，日期内容也会变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeymd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小月份：4，6，9，11  1-30</span></span><br><span class="line"><span class="comment">     * 特殊月：2  判断年：平年 1-28  闰年 1-29</span></span><br><span class="line"><span class="comment">     * 大月份：1，3，5，7，8，10，12  1-31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取month月份下拉控件</span></span><br><span class="line">    <span class="keyword">var</span> month = <span class="built_in">document</span>.getElementById(<span class="string">&quot;month&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> day = <span class="built_in">document</span>.getElementById(<span class="string">&quot;day&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> year = <span class="built_in">document</span>.getElementById(<span class="string">&quot;year&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//m表示当前选择的月份值</span></span><br><span class="line">    <span class="keyword">var</span> m = month.value;</span><br><span class="line">    <span class="keyword">var</span> y = year.value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日期的终止值发生改变</span></span><br><span class="line">    <span class="keyword">var</span> dayend;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">4</span> || m == <span class="number">6</span> || m == <span class="number">9</span> || m == <span class="number">11</span>) &#123;</span><br><span class="line">        dayend = <span class="number">30</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//进行平年闰年判断</span></span><br><span class="line">        <span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">            dayend = <span class="number">29</span>;<span class="comment">//闰年</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dayend = <span class="number">28</span>;<span class="comment">//平年</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dayend = <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//day控件清零</span></span><br><span class="line">    day.length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用填充选项的方法</span></span><br><span class="line">    addOptions(day,<span class="number">1</span>,dayend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多选框（多选、反选）练习"><a href="#多选框（多选、反选）练习" class="headerlink" title="多选框（多选、反选）练习"></a>多选框（多选、反选）练习</h2><h3 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a><strong>HTML</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>多选<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>游泳</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>看书</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>写作</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>有序</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;selectAll()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reverseAll()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/d9_checkebox.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-2"><a href="#JavaScript-2" class="headerlink" title="JavaScript"></a><strong>JavaScript</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标记</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将所有的checkbox都选中，遍历check属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elements = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历每个元素 将checked属性设置为true</span></span><br><span class="line">        <span class="keyword">let</span> ele =elements[i];</span><br><span class="line">        ele.checked = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;selectall&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        btn.value = <span class="string">&quot;全不选&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        btn.value = <span class="string">&quot;全选&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag = !flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将所有的checkbox都选中，遍历check属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elements = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历每个元素 将checked属性设置为原来的相反值</span></span><br><span class="line">        <span class="keyword">let</span> ele =elements[i];</span><br><span class="line">        ele.checked = !ele.checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 框架</title>
    <url>/2021/10/10/spring/</url>
    <content><![CDATA[<h3 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h3><p><strong>简介</strong>：</p>
<ul>
<li><strong>spring理念</strong>：使现有的技术更加容易使用，本身是一个大杂烩，整合了所有的技术框架</li>
<li><strong>优点</strong>：<ul>
<li>Spring是一个开源的免费的框架（容器）</li>
<li>Spring是一个轻量级、非入侵式的框架</li>
<li>控制反转（IOC）、面向切面编程（AOP）</li>
<li>支持事务的处理，对框架整合的支持！</li>
</ul>
</li>
<li><strong>总结</strong>：Spring就是一个轻量级的控制反转（IOP）和面向切面编程（AOP）的框架</li>
<li><strong>拓展</strong>：Spring开发时现代化的Java开发，说白了就是基于Spring的开发<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
<li>约定大于配置</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>Spring Cloud时基于SpringBoot实现的</li>
</ul>
</li>
<li>现在大多数公司都在使用SpringBoot进行快速开发，使用前提：掌握SpringMVC和Spring </li>
</ul>
</li>
<li><strong>弊端</strong>：发展太久，违背了原理的理念，配置十分繁琐</li>
</ul>
<h3 id="二、IOC"><a href="#二、IOC" class="headerlink" title="二、IOC"></a>二、IOC</h3><h4 id="1-IOC-理论推到"><a href="#1-IOC-理论推到" class="headerlink" title="1.IOC 理论推到"></a>1.IOC 理论推到</h4><ol>
<li><p>UserDao 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserDaoImpl 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认获取用户的数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserService 业务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>UserServiceImpl 业务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();<span class="comment">//根据用户的需求修改这里</span></span><br><span class="line">    <span class="comment">//new UserDaoImpl() 或者 new UserDaoMysqlImpl()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户实际调用的是业务层，dao层他们不需要接触</span></span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>在我们之前（上述）的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改 UserServiceImpl  源代码，如果程序的代码量十分大，修改一次的成本代价十分昂贵。</p>
</li>
<li><p>这时我们可以（在UserServiceImpl中）利用一个set接口实现，已经发生了根本性的变化！</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//利用set进行动态实现值的注入！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>之前，程序是主动创建对象的，控制权在程序员手上</li>
<li>使用了set注入之后，程序不再具有主动性，而是变成了被动的接受对象</li>
<li>这种思想，从本质上解决了问题，我们程序员不用去管理对象的创建了。系统的耦合性大大降低，可以更加专注在业务的实现上，这是 IOC 的原型</li>
</ul>
<h4 id="2-IOC-本质"><a href="#2-IOC-本质" class="headerlink" title="2.IOC 本质"></a>2.IOC 本质</h4><ul>
<li>IOC 控制反转：是一种设计思想，将对象的创建方式移给第三方，就是将获得依赖对象的方式反转了</li>
<li>DI 依赖注入：实现IOC的一种方法</li>
<li>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从ioc容器中去除需要的的对象。</li>
</ul>
<p><strong>本质</strong>：控制反转是通过描述（xml或者注解）并通过第三方生产或获取特定对象的方式，在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入DI</p>
<h3 id="三、Hello-Spring"><a href="#三、Hello-Spring" class="headerlink" title="三、Hello Spring"></a>三、Hello Spring</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2.编写代码"></a>2.编写代码</h4><ul>
<li>Hello实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>beans.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring类创建对象，在Spring中这些都称为bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建了一个叫做hello的Hello对象 并将str的值设置为&quot;Spring&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析beans.xml文件，生成管理相应的Bean对象</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//getBean：参数即为Spring配置文件中的bean的id</span></span><br><span class="line">    Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(hello.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：Hello&#123;str=&#x27;Spring&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-思考"><a href="#4-思考" class="headerlink" title="4.思考"></a>4.思考</h4><ul>
<li><p>Hello对象是由Spring创建的</p>
</li>
<li><p>Hello对象的属性是由Spring容器设置的</p>
<p>这个过程就叫做 <strong>控制反转</strong></p>
<ul>
<li><strong>控制</strong>：Spring来控制对象的创建，传统时由程序本身创建程序的对象</li>
<li><strong>反转</strong>：程序本身不创建对象，而变成的被动的接收对象</li>
</ul>
</li>
<li><p>依赖注入：利用set方法进行注入</p>
</li>
<li><p>IOC是一种编程思想，由主动的编程编程被动的接收</p>
</li>
<li><p>通过Spring，要实现不同的操作，不必去程序中修改，只需要修改xml配置文件。</p>
</li>
<li><p>IOC：对象由Spring来 创建、管理、装配</p>
</li>
</ul>
<h3 id="四、IOC创建对象的方式："><a href="#四、IOC创建对象的方式：" class="headerlink" title="四、IOC创建对象的方式："></a>四、IOC创建对象的方式：</h3><h4 id="1-通过无参构造方法来创建-默认！"><a href="#1-通过无参构造方法来创建-默认！" class="headerlink" title="1.通过无参构造方法来创建  默认！"></a>1.通过无参构造方法来创建  默认！</h4><ul>
<li>User.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User的无参构造！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>beans.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玛卡巴卡&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：User的无参构造！ name=玛卡巴卡</span></span><br></pre></td></tr></table></figure>

<h4 id="2-通过有参构造方法来创建"><a href="#2-通过有参构造方法来创建" class="headerlink" title="2.通过有参构造方法来创建"></a>2.通过有参构造方法来创建</h4><ol>
<li>下标赋值</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;哈哈&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>类型赋值</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--类型赋值 避免多个类型 不建议使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;哈哈&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>参数名字赋值</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数名字赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;哈哈&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h4><p>注意：在配置文件加载的时候，其中管理的对象都已经初始化了！</p>
<h3 id="五、Spring-配置"><a href="#五、Spring-配置" class="headerlink" title="五、Spring 配置"></a>五、Spring 配置</h3><h4 id="1-Alias-别名"><a href="#1-Alias-别名" class="headerlink" title="1.Alias 别名"></a>1.Alias 别名</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名：在获取bean的时候可以使用别名获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;usernew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-Bean-配置"><a href="#2-Bean-配置" class="headerlink" title="2.Bean 配置"></a>2.Bean 配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span></span><br><span class="line"><span class="comment">如果配置id,又配置了name,那么name是别名</span></span><br><span class="line"><span class="comment">name可以设置多个别名,可以用逗号,分号,空格隔开</span></span><br><span class="line"><span class="comment">如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment">class是bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello2 h2,h3;h4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-import-导入"><a href="#3-import-导入" class="headerlink" title="3.import 导入"></a>3.import 导入</h4><ul>
<li>团队的合作通过import来实现</li>
<li>多个人开发的 beans.xml 合并到同一个 application context.xml 总配置文件中， 引用总平配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span> = <span class="string">&quot;&#123;path&#125;/beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="六、依赖注入（DI）"><a href="#六、依赖注入（DI）" class="headerlink" title="六、依赖注入（DI）"></a>六、依赖注入（DI）</h3><ul>
<li><strong>依赖注入</strong>：set注入</li>
<li><strong>依赖</strong>：指Bean对象的创建依赖容器，Bean对象的依赖资源</li>
<li><strong>注入</strong>：指Bean对象所依赖的资源，由容器来设置和装配</li>
</ul>
<h4 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1.构造器注入"></a>1.构造器注入</h4><ul>
<li>有参构造注入，参考第四大点</li>
</ul>
<h4 id="2-set注入（重点）"><a href="#2-set注入（重点）" class="headerlink" title="2.set注入（重点）"></a>2.set注入（重点）</h4><ul>
<li>要求被注入的属性，必须有set方法，set方法的方法名由set + 属性首字母大写，如果属性是boolean类型，没有set方法，是is</li>
<li>测试环境：</li>
</ul>
<p>Address.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties infp;</span><br><span class="line"> 	</span><br><span class="line">    <span class="comment">// 省略   属性的get和 set tostring</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Student student = (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    System.out.println(student.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-常量注入"><a href="#1-常量注入" class="headerlink" title="1.常量注入"></a>1.常量注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种，常量注入注入，value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玛卡巴卡&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-Bean注入"><a href="#2-Bean注入" class="headerlink" title="2.Bean注入"></a>2.Bean注入</h5><ul>
<li>注意：这里的值是一个引用，ref</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重庆&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种，bean注入 ref 引用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-数组注入"><a href="#3-数组注入" class="headerlink" title="3.数组注入"></a>3.数组注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4-List注入"><a href="#4-List注入" class="headerlink" title="4.List注入"></a>4.List注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="5-Map注入"><a href="#5-Map注入" class="headerlink" title="5.Map注入"></a>5.Map注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--map注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234156123452345234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;111111111111111&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="6-set注入"><a href="#6-set注入" class="headerlink" title="6.set注入"></a>6.set注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-NUll注入"><a href="#7-NUll注入" class="headerlink" title="7.NUll注入"></a>7.NUll注入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--NULL注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="8-Properties注入"><a href="#8-Properties注入" class="headerlink" title="8.Properties注入"></a>8.Properties注入</h5><ul>
<li><prop key="key">value</prop></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--properties注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;infp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>2018243106<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>玛卡巴卡<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-拓展注入实现"><a href="#3-拓展注入实现" class="headerlink" title="3.拓展注入实现"></a>3.拓展注入实现</h4><ol>
<li><strong>p命名空间注入</strong><ul>
<li>需要在头文件中加入约束文件</li>
<li><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，通过set注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;玛卡巴卡&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：User&#123;name=&#x27;玛卡巴卡&#x27;, age=18&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>c命名空间注入</strong><ul>
<li>需要在头文件中加入约束文件</li>
<li><code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code></li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入，通过构造器注入：construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;玛卡巴卡2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">user2Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：User&#123;name=&#x27;玛卡巴卡2&#x27;, age=18&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-Bean的作用域"><a href="#4-Bean的作用域" class="headerlink" title="4.Bean的作用域"></a>4.Bean的作用域</h4><ol>
<li><p>Singleton（单例）</p>
<ul>
<li>单例模式：Spring默认模式，只会产身一个对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;玛卡巴卡&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user==user2);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Prototype（原型）</p>
<ul>
<li>原型模式：每次从容器中get的时候，都会产生一个对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;玛卡巴卡&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user==user2);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Request（请求）,Session（会议）,在 web程序中。</p>
</li>
</ol>
<h3 id="七、Bean的自动装配"><a href="#七、Bean的自动装配" class="headerlink" title="七、Bean的自动装配"></a>七、Bean的自动装配</h3><ul>
<li>自动装配：Spring满足bean依赖的一种方式！</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li>
<li>在Spring中有三种装配的方式<ul>
<li>在xml中显示的配置</li>
<li>在java中显示配置</li>
<li>隐式 的 自动装配bean【重要】</li>
</ul>
</li>
</ul>
<h4 id="1-测试-环境搭建"><a href="#1-测试-环境搭建" class="headerlink" title="1.测试 环境搭建"></a>1.测试 环境搭建</h4><ul>
<li>People.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略 get 和 set 和 tostring</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Cat.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Dog.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>beans.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玛卡巴卡&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    People people = context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-byName"><a href="#2-byName" class="headerlink" title="2.byName"></a>2.byName</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--byname:会自动在容器上下文中寻找，和自己对象set方法后面的值对应的bean id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玛卡巴卡&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>总结</strong>：bynanme，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</li>
</ul>
<h4 id="3-byType"><a href="#3-byType" class="headerlink" title="3.byType"></a>3.byType</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--byname:会自动在容器上下文中寻找，和自己对象set方法后面的值对应的bean id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--byname:会自动在容器上下文中寻找，和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玛卡巴卡&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>前俩行的id也可以省略，因为是根据类型来自动装配的：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--byname:会自动在容器上下文中寻找，和自己对象set方法后面的值对应的bean id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--byname:会自动在容器上下文中寻找，和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玛卡巴卡&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>总结</strong>：bytype，需要保证所有的bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li>
</ul>
<h4 id="4-使用注解"><a href="#4-使用注解" class="headerlink" title="4.使用注解"></a>4.使用注解</h4><ul>
<li><p>利用注解的方式注入属性</p>
</li>
<li><p>直接载属性上添加注解使用即可，也可以再set方法上使用</p>
</li>
<li><p>使用前提：</p>
<ol>
<li><p>需要在配置文件的文件头中引入context约束</p>
<p><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p>
</li>
<li><p>需要配置注解的支持</p>
<p><code>&lt;context:annotation-config/&gt;</code></p>
</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.People&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong>：</p>
<ul>
<li><p>Cat.java  和  Dog.java  如上</p>
</li>
<li><p>People.java:</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired(name = &quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>beans.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springfra</span></span></span><br><span class="line"><span class="string"><span class="tag">                           mework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.pojo.People&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    People people = context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-Autowired"><a href="#1-Autowired" class="headerlink" title="1.@Autowired"></a>1.@Autowired</h5><ul>
<li>该注解是按类型（bytype）自动装配的。</li>
<li>使用Autowired我们可以不用编写set方法，前提是你这个自动装配的属性在IOC（Spring）容器中存在，且符合名字Byname</li>
<li>@Nullable   某个字段标记了这个注解，说明这个字段可以为null</li>
<li>@Autowired（required=false）<ul>
<li>默认为true：对象必须存在，不能为null</li>
<li>false：对象可以为null</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-Qualifiler"><a href="#2-Qualifiler" class="headerlink" title="2.@Qualifiler"></a>2.@Qualifiler</h5><ul>
<li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配，其中@Qualifier不能单独使用。</li>
</ul>
<h5 id="3-Resource"><a href="#3-Resource" class="headerlink" title="3.@Resource"></a>3.@Resource</h5><ul>
<li>  @Resource如若有指定的name属性，则按该属性进行byName方式查找装配</li>
<li> 默认通过byName方式进行装配；如果不成功，则按byType的方式自动装配。都不成功，则报异常。</li>
</ul>
<h5 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h5><ul>
<li>@Autowired 和 @Resource 区别<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired 默认通过byType的方式，若有多个Type，则根据默认Name装配</li>
<li>@Resource 默认通过byName的方式，如果找不到名字，使用byType进行装配</li>
</ul>
</li>
</ul>
<h3 id="八、注解开发"><a href="#八、注解开发" class="headerlink" title="八、注解开发"></a>八、注解开发</h3><ul>
<li><p>Spring4之后，使用注解需要引入aop包</p>
</li>
<li><p>需要在配置文件的文件头中引入context约束</p>
<p><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></p>
</li>
<li><p>需要配置注解的支持</p>
<p><code>&lt;context:annotation-config/&gt;</code></p>
</li>
<li><p>指定扫描的包，该包下的注解就会生效</p>
<p><code>&lt;context:component-scan base-package=&quot;com.feng.pojo&quot;/&gt;</code></p>
</li>
</ul>
<h4 id="1-bean"><a href="#1-bean" class="headerlink" title="1.bean"></a>1.bean</h4><ol>
<li>配置扫描哪些包下的注解</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在指定包下编写类，增加注解</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.feng.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//component:组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name =<span class="string">&quot;玛卡巴卡&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user.name);<span class="comment">//玛卡巴卡</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-属性如何注入"><a href="#2-属性如何注入" class="headerlink" title="2.属性如何注入"></a>2.属性如何注入</h4><ol>
<li>可以不用提供set方法，直接在属性名上添加@value(“值”)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.feng.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//component:组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于 &lt;property name=&quot;name&quot; value=&quot;玛卡巴卡&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;玛卡巴卡&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果提供了set方法，也可以在set方法上添加@value(“值”);</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.feng.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//component:组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//相当于 &lt;property name=&quot;name&quot; value=&quot;玛卡巴卡&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;玛卡巴卡&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-衍生的注解"><a href="#3-衍生的注解" class="headerlink" title="3.衍生的注解"></a>3.衍生的注解</h4><ul>
<li>@Component 三个衍生注解，我们在web开发中，会按照mvc三层架构分层<ul>
<li>@Repository：dao层</li>
<li>@Service：service层</li>
<li>@Controller：web层（controller）</li>
</ul>
</li>
<li>这四个注解的功能都是一样的，都是代表某个类注册到Spring中，装配Bean</li>
</ul>
<h4 id="4-自动装配置"><a href="#4-自动装配置" class="headerlink" title="4.自动装配置"></a>4.自动装配置</h4><ul>
<li>@Autowired 默认通过byType的方式，若有多个Type，则根据默认Name装配</li>
<li>@Qualifier可以使@Autowired 根据byName的方式自动装配，其中@Qualifier不能单独使用。</li>
<li>@Resource 默认通过byName的方式，如果找不到名字，使用byType进行装配</li>
<li>同上   七、4.</li>
</ul>
<h4 id="5-作用域"><a href="#5-作用域" class="headerlink" title="5.作用域"></a>5.作用域</h4><ul>
<li>@scope<ul>
<li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。 </li>
<li>prototype：原型模式，多例模式，关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.feng.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//component:组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//相当于 &lt;property name=&quot;name&quot; value=&quot;玛卡巴卡&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;玛卡巴卡&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h4><ul>
<li>XML与注解比较<ul>
<li>XML更加万能，适用任何场景 ，结构清晰，维护方便</li>
<li>注解不是自己提供的类使用不了，开发简单方便，维护相对复杂</li>
</ul>
</li>
<li>XML与注解整合开发：最佳实践<ul>
<li>xml管理Bean</li>
<li>注解完成属性的注入</li>
<li>使用过程中， 可以不用扫描，扫描是为了类上的注解，但是必须开启注解的支持。</li>
</ul>
</li>
</ul>
<h4 id="7-基于Java类配置Spring"><a href="#7-基于Java类配置Spring" class="headerlink" title="7.基于Java类配置Spring"></a>7.基于Java类配置Spring</h4><ul>
<li>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的 版本， JavaConfig 已正式成为 Spring4 的核心功能 。</li>
</ul>
<p>测试：</p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里这个注解的意思，就是说明这个类被spring接管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user无参构造&quot;</span>);<span class="comment">//输出了俩次</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;玛卡巴卡&quot;)</span><span class="comment">//属性注入值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个也会被spring容器托管，注册到容器种，因为他本来也是@Component</span></span><br><span class="line"><span class="comment">//@Configuration代表这是一个配置类，就和我们之前学的beans.xml是一样的</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.feng.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(FengConfig2.class)</span><span class="comment">//导入其他配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FengConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean，就相当于之前学的一个bean标签</span></span><br><span class="line">    <span class="comment">//这个方法的名字，就相当于bean标签中的id属性（名字）</span></span><br><span class="line">    <span class="comment">//这个方法的返回值，就相当于bean标签中的class属性（类型）</span></span><br><span class="line">    <span class="meta">@Bean()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();<span class="comment">//就是返回要注入到bean的对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果完全使用了配置类方式去做，我们就只能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(FengConfig.class);</span><br><span class="line"></span><br><span class="line">    User user = (User) context.getBean(<span class="string">&quot;getUser&quot;</span>);</span><br><span class="line">    System.out.println(user.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="九、代理模式"><a href="#九、代理模式" class="headerlink" title="九、代理模式"></a>九、代理模式</h3><ul>
<li>代理模式 是 SpringAOP的底层</li>
<li>代理模式的分类：<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
</li>
</ul>
<h4 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h4><ul>
<li><strong>角色分析</strong><ul>
<li>抽象角色 : 一般使用接口或者抽象类来实现</li>
<li>真实角色 : 被代理的角色</li>
<li>代理角色 : 代理的真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 </li>
<li>客户 : 使用代理角色来进行一些操作 </li>
</ul>
</li>
<li><strong>测试</strong>：</li>
</ul>
<ol>
<li>接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>真实角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>静态代理角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//签租聘合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租聘合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>客户端访问代理角色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东要出租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理，代理中介帮房东出租房子，and，代理角色一般会有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你不去面对房东，你去找中介租房子就ok</span></span><br><span class="line">        proxy.rent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>代理模式的好处</strong></p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>一个真实的角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li>
</ul>
</li>
</ul>
<h4 id="2-加深理解"><a href="#2-加深理解" class="headerlink" title="2.加深理解"></a>2.加深理解</h4><p><strong>测试</strong>：</p>
<ul>
<li>UserService接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserServiceProxy 代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日治方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Debug]打印了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Client 客户</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        </span><br><span class="line">        proxy.setUserService(userService);</span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>避免修改原代码，在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</li>
</ul>
<h4 id="3-动态代理"><a href="#3-动态代理" class="headerlink" title="3.动态代理"></a>3.动态代理</h4><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，不是直接写好的</li>
<li>动态代理分为俩打类：基于接口的动态代理，基于类的动态代理<ul>
<li><strong>基于接口–JDK动态代理【This ↓】</strong></li>
<li>基于类：cglib</li>
<li>java字节码实现：javasist</li>
</ul>
</li>
<li>需要俩个类：Proxy:代理，InvocationHandler：调用处理程序</li>
</ul>
<p> <strong>动态代理的好处</strong>：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务就交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理可以代理多个类，只要实现了同一个接口即可</li>
</ul>
<p><strong>测试</strong>：</p>
<p>Rent 接口 抽象角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Host 真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理角色 实现 <strong>InvocationHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用这个类自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client 客户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色：现在没有</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//通过调用程序处理角色来处理我们要调用的接口对象</span></span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        <span class="comment">//这里proxy就是动态生成的，我们并没有写</span></span><br><span class="line">        Rent proxy = (Rent) pih.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-加深理解"><a href="#4-加深理解" class="headerlink" title="4.加深理解"></a>4.加深理解</h4><ul>
<li>动态代理代理的是接口，所以可以代理多个类，只要类实现了同一个接口</li>
</ul>
<p><strong>测试</strong>：</p>
<p>userService接口 抽象角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>userServiceImpl 真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理 角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用这个类自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        log(method.getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client 客户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//代理角色 不存在 （代理对象的调用处理程序）</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        pih.setTarget(userService);<span class="comment">//设置要代理的对象</span></span><br><span class="line"></span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();<span class="comment">//动态生成代理类</span></span><br><span class="line"></span><br><span class="line">        proxy.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十、AOP"><a href="#十、AOP" class="headerlink" title="十、AOP"></a>十、AOP</h3><ul>
<li>AOP：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</li>
<li>AOP在Spring中的作用：提供声明式事务，允许用户自定义切面</li>
<li>使用AOP织入，需要导入一个jar包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-使用Spring实现AOP（方式一）"><a href="#1-使用Spring实现AOP（方式一）" class="headerlink" title="1.使用Spring实现AOP（方式一）"></a>1.使用Spring实现AOP（方式一）</h4><ul>
<li>使用Spring的API接口实现【主要SpringAPI接口实现】</li>
</ul>
<p><strong>测试</strong>：</p>
<p>业务接口：UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类： UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前后增强类（日志）： Log AfterLog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//method 要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args 参数</span></span><br><span class="line">    <span class="comment">//target 目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returnvalue 返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;执行了&quot;</span>+method.getName()</span><br><span class="line">        +<span class="string">&quot;方法，返回结果为&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件：（需要导入约束）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式一：使用原生Spring API接口--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop:需要导入aop的约束 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：expression：表达式，execution（要执行的位置！ * * * * *）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.feng.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationcontext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//动态代理的是接口:注意点</span></span><br><span class="line">    UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.select();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-自定义类来实现AOP（方式二）"><a href="#2-自定义类来实现AOP（方式二）" class="headerlink" title="2.自定义类来实现AOP（方式二）"></a>2.自定义类来实现AOP（方式二）</h4><ul>
<li>自定义类实现AOP【主要是切面定义】</li>
</ul>
<p><strong>测试</strong>：</p>
<p>自定义切面类 DiyPointCut</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法执行前======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法执行后======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方式二：自定义类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面，ref要引用的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.feng.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-使用注解实现AOP（方式三）"><a href="#3-使用注解实现AOP（方式三）" class="headerlink" title="3.使用注解实现AOP（方式三）"></a>3.使用注解实现AOP（方式三）</h4><ul>
<li>通过注解实现AOP</li>
</ul>
<p><strong>测试</strong>：</p>
<p>注解增强类 AnnotationPointCut</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式三：注解方式实现AOP</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//标注这个类是 一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.feng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======方法执行前=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.feng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======方法执行后=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.feng.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        Object proceed = jp.proceed();<span class="comment">//执行方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationcontext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//动态代理的是接口:注意点</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.select();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//环绕前</span></span><br><span class="line"><span class="comment">//======方法执行前=====</span></span><br><span class="line"><span class="comment">//查询了一个用户</span></span><br><span class="line"><span class="comment">//======方法执行后=====</span></span><br><span class="line"><span class="comment">//环绕后	</span></span><br></pre></td></tr></table></figure>

<h3 id="十一、整合Mybatis"><a href="#十一、整合Mybatis" class="headerlink" title="十一、整合Mybatis"></a>十一、整合Mybatis</h3><p> 步骤：</p>
<ol>
<li>导入相关jar包<ul>
<li>junit</li>
<li>mybatis</li>
<li>mysql数据库</li>
<li>spring相关的</li>
<li>aop织入</li>
<li>mybatis-spring【new】</li>
</ul>
</li>
<li>编写配置文件</li>
<li>测试</li>
</ol>
<h4 id="1-回忆mybatis"><a href="#1-回忆mybatis" class="headerlink" title="1.回忆mybatis"></a>1.回忆mybatis</h4><ol>
<li>编写实体类</li>
<li>编写核心配置文件</li>
<li>编写接口</li>
<li>编写Mapper.xml</li>
<li>测试</li>
</ol>
<h4 id="2-Mybatis-Spring"><a href="#2-Mybatis-Spring" class="headerlink" title="2.Mybatis-Spring"></a>2.Mybatis-Spring</h4><ul>
<li>实体类 接口 和  mapper.xml</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.feng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.编写数据源替换mybatis的数据源 spring-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource:使用Spring的数据源替换Mybatis的配置</span></span><br><span class="line"><span class="comment">    我们这里使用Spring提供的JDBC：org.springframework.jdbc.datasource</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis</span></span></span><br><span class="line"><span class="string"><span class="tag">                ?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/feng/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册sqlSessionTemplate，关联sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能用构造器注入  因为他没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.sqlSessionFactory</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/feng/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.sqlSessionTemplate</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册sqlSessionTemplate，关联sqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只能用构造器注入  因为他没有set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.需要给接口加实现类 私有化sqlSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sqlSession不用我们自己创建了，Spring来管理</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.将自己写的实现类，注入到spring中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6.测试使用</p>
<h3 id="十二、声明式事务"><a href="#十二、声明式事务" class="headerlink" title="十二、声明式事务"></a>十二、声明式事务</h3><h4 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h4><ul>
<li>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</li>
<li>事务的四个属性ACID<ol>
<li>原子性:事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li>
<li>一致性:一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li>
<li>隔离性:可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li>
<li>持久性:事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</li>
</ol>
</li>
</ul>
<p>测试:</p>
<ul>
<li>UserDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserMapper</li>
<li>故意将delete写错进行事务测试</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    deletes from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>UserDaoImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加一些操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;玛卡巴卡&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line">        mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>发现执行结果报错,delete写错了,但是插入用户却成功了.此时就需要事务来处理</li>
</ul>
<h4 id="2-Spring-编程式事务管理"><a href="#2-Spring-编程式事务管理" class="headerlink" title="2.Spring 编程式事务管理"></a>2.Spring 编程式事务管理</h4><ul>
<li>事务管理代码嵌到业务方法中来控制事务的提交和回滚</li>
<li>缺点:必须在每个业务中添加事务管理代码</li>
</ul>
<h4 id="3-Spring-声明式事务管理"><a href="#3-Spring-声明式事务管理" class="headerlink" title="3.Spring 声明式事务管理"></a>3.Spring 声明式事务管理</h4><ul>
<li><p>将事务管理代码从代码中分离出来,以声明的方式来实现事务管理</p>
</li>
<li><p>将事务管理作为横切关注点，通过aop方法模块化。</p>
</li>
<li><p>Spring管理事务,约束文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>JFBC事务  事务管理器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>事务通知</li>
<li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;search*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AOP</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop织入事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.feng.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    UserMapper mapper = (UserMapper) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>笔记</category>
        <category>框架</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>Spring</tag>
        <tag>IOC</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
</search>
